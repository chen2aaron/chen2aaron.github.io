<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xixijun&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://morningchen.com/"/>
  <updated>2018-09-27T14:35:46.000Z</updated>
  <id>https://morningchen.com/</id>
  
  <author>
    <name>xixijun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CEYE.IO</title>
    <link href="https://morningchen.com/2017/11/04/ceye-architechure/"/>
    <id>https://morningchen.com/2017/11/04/ceye-architechure/</id>
    <published>2017-11-04T03:46:48.000Z</published>
    <updated>2018-09-27T14:35:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-CEYE是什么"><a href="#1-CEYE是什么" class="headerlink" title="1. CEYE是什么"></a>1. CEYE是什么</h2><p>CEYE是一个用来检测 <code>带外（Out-of-Band）</code>流量的监控平台，如DNS查询和HTTP请求。它可以帮助安全研究人员在测试漏洞时收集信息（例如SSRF / XXE / RFI / RCE）。</p><h2 id="2-为什么会有CEYE"><a href="#2-为什么会有CEYE" class="headerlink" title="2. 为什么会有CEYE"></a>2. 为什么会有CEYE</h2><p>提到为什么会有CEYE就必须提到它的使用场景了。</p><p>有两种常见的情况会导致许多漏洞扫描工具漏扫：</p><ul><li>漏洞检测或漏洞利用需要进一步的用户或系统交互</li><li>一些漏洞类型没有直接表明攻击是成功的。如Payload触发了却不在前端页面显示。</li></ul><p>为了解决这个问题，我们开发了CEYE平台。通过使用诸如DNS和HTTP之类的带外信道，便可以得到回显信息。</p><a id="more"></a><h2 id="3-如何使用"><a href="#3-如何使用" class="headerlink" title="3. 如何使用"></a>3. 如何使用</h2><p>登录 <code>ceye.io</code>，在<a href="http://ceye.io/profile" target="_blank" rel="noopener">用户详情页</a>可以看到自己的域名标识符 <code>identifier</code>，对于每个用户，都有唯一的域名标识符如<code>abcdef.ceye.io</code>。所有来自于<code>abcdef.ceye.io</code>或<code>*.abcdef.ceye.io</code>的 <code>DNS查询</code>和<code>HTTP请求</code>都会被记录。通过查看这些记录信息，安全研究人员可以确认并改进自己的漏洞研究方案。</p><h3 id="3-1-通过DNS带外信道检测-Blind-Payload-的执行情况"><a href="#3-1-通过DNS带外信道检测-Blind-Payload-的执行情况" class="headerlink" title="3.1 通过DNS带外信道检测 Blind Payload 的执行情况"></a>3.1 通过DNS带外信道检测 Blind Payload 的执行情况</h3><p><img src="ceye-dns.jpeg" alt=""></p><p>DNS查询可以以多种不同的方式进行解析。<code>CEYE.IO</code>平台提供了一台DNS Server来解析域名。它的<code>nameserver address</code>被设置为自己的服务器IP，因此所有关于<code>ceye.io</code>的域名的DNS查询最终都会被发送到CEYE的DNS服务器。</p><p>例如，在终端中使用<code>nslookup</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">➜ nslookup `whoami`.abcdef.ceye.io</span><br><span class="line">Server:127.1.1.1</span><br><span class="line">Address:127.1.1.1<span class="comment">#53</span></span><br><span class="line"></span><br><span class="line">Non-authoritative answer:</span><br><span class="line">Name:chan.abcdef.ceye.io</span><br><span class="line">Address: 118.192.48.48</span><br></pre></td></tr></table></figure><p>可以看到有记录产生<br><img src="ceye-dns01.jpeg" alt=""></p><p>我们保存了最近的100条记录，你可以通过搜索框，搜索并导出你需要的结果，导出格式为<code>JSON</code>。更多的Playload信息可以登录<code>CEYE.IO</code>平台获取。</p><h3 id="3-2-通过HTTP带外信道检测-Blind-Payload-的执行情况"><a href="#3-2-通过HTTP带外信道检测-Blind-Payload-的执行情况" class="headerlink" title="3.2 通过HTTP带外信道检测 Blind Payload 的执行情况"></a>3.2 通过HTTP带外信道检测 Blind Payload 的执行情况</h3><p>CEYE.IO平台拥有自己的HTTP服务器，记录用户域名的所有请求。这可以用来做一些有趣的事情。例如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜ curl -X POST http://ip.port.abcdef.ceye.io/`whoami`?p=http -d data=http</span><br><span class="line">&#123;<span class="string">"meta"</span>: &#123;<span class="string">"code"</span>: 201, <span class="string">"message"</span>: <span class="string">"HTTP Record Insert Success"</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="ceye-http01.jpeg" alt=""></p><p>在后台，CEYE.IO平台将记录客户端请求的URL，远程IP地址，Http Method，Data，User Agent，Content Type等信息。你可以在HTTP Records页面找到这些详细信息。</p><h2 id="4-关于CEYE架构"><a href="#4-关于CEYE架构" class="headerlink" title="4. 关于CEYE架构"></a>4. 关于CEYE架构</h2><p>原ceye的架构：</p><ul><li>开发语言：python2.7</li><li>Nginx反向代理</li><li>后端WEB引擎：Flask</li><li>ORM：SQLAlchemy</li><li>数据库：MySQL</li></ul><p>新的CEYE采用了前后端分离架构：</p><p>前端 <code>ceye.io</code>：</p><ul><li>开发语言：ES6</li><li>React全家桶：react react-router react-redux</li><li>异步请求库：Axios</li><li>ES6转码编译器：Babel</li><li>打包工具：Webpack</li><li>UI设计：AntDesion</li><li>UI动效：AntMotion</li></ul><p>后端 <code>api.ceye.io</code>：</p><ul><li>开发语言：python3.6</li><li>WEB框架：<a href="https://github.com/falconry/falcon" target="_blank" rel="noopener">Falcon</a></li><li>ORM：redisco</li><li>数据库 NOSQL：Redis</li><li>数据校验：cerberus</li><li>部署：Fabric</li><li>DNS Server：twisted</li><li>WSGI Server：gunicorn</li><li>负载均衡：Nginx</li></ul><h3 id="4-1-技术选型"><a href="#4-1-技术选型" class="headerlink" title="4.1 技术选型"></a>4.1 技术选型</h3><h4 id="数据库-MySQL-or-Redis？"><a href="#数据库-MySQL-or-Redis？" class="headerlink" title="数据库 MySQL or Redis？"></a>数据库 MySQL or Redis？</h4><p>我们完全弃用了以前的MySQL数据库，采用了Redis作为后端数据库。原因是当数个表的数据突破了亿行，页面上同时需要读取的动态数据增多时，为了优化MySQL的操作就显得得不偿失。而 Redis 可以在单台服务器上实现每秒数万次的读取和写入。</p><p>既然选择了Redis作为后端数据库，那么相应的应该选择一个Redis ORM。这里我们选择了Redisco作为ORM，虽然原作者已经弃坑不更新了，它的继承者也已经快一年多没有回复issue了，也没有做python3的适配。但是谁叫它的接口更符合django orm的操作方式呢。于是提交了一个PR适配了python3。</p><h4 id="WEB-Framework？"><a href="#WEB-Framework？" class="headerlink" title="WEB Framework？"></a>WEB Framework？</h4><p>这里我们选择falcon而没有使用flask，django或其他python web框架的原因是它更快而且RESTful，这里推荐一个扩展阅读：<a href="http://klen.github.io/py-frameworks-bench/" target="_blank" rel="noopener">关于Python Web框架的性能测试结果</a>。<br>当我写完这个项目时，发现了一个更快的框架 <a href="https://github.com/squeaky-pl/japronto" target="_blank" rel="noopener">Japronto</a></p><h4 id="前端框架？"><a href="#前端框架？" class="headerlink" title="前端框架？"></a>前端框架？</h4><p>这里面临了2个选择，Vue or React？</p><ul><li>选择熟悉的？Vue （<a href="https://www.iviewui.com/" target="_blank" rel="noopener">iView</a> ， <a href="http://element.eleme.io/#/zh-CN" target="_blank" rel="noopener">Element</a>）</li><li>选择适配公司技术栈的？React （<a href="https://ant.design" target="_blank" rel="noopener">AntDesign</a>）</li><li>学习新技术！React！</li></ul><p>作为一个二手前端，于是开始了踩坑React之旅，各种深坑浅坑不断，还好都一一解决了。<br>作为曾经的Vue粉简单对比下React和Vue：</p><ul><li><p>生态圈</p><p>明显感觉到了React生态圈的强大，蚂蚁金服前端团队的AntDesion项目，真的把我惊艳到了。它的设计原则让我深刻的体会到了什么是<code>让用户觉得自己是爹</code>。</p></li><li><p>上手难度</p><p>两者相比，从上手难度来说React的各种概念真的是让新手脑壳疼，而且react的starter kit都构建得无比恶心。再从代码量方面来说：在写redux action和reducer的时候，各种命名都会显得很繁琐，但又恰好是redux这一套，让后期维护变得更加容易。对于写惯了django template等等后端渲染模版的方式后再学Vue template就会很容易上手，而刚开始用React的JSX语法会觉得有点别扭，但是习惯了又会写得很爽。</p></li></ul><p>这里不展开讨论React和Vue到底哪个好，就和PHP是世界上最美的语言一样，这是个<code>哲学问题</code></p><p>最后希望大家用得开心，我们会持续跟进你们的建议哒~ ^.^</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-CEYE是什么&quot;&gt;&lt;a href=&quot;#1-CEYE是什么&quot; class=&quot;headerlink&quot; title=&quot;1. CEYE是什么&quot;&gt;&lt;/a&gt;1. CEYE是什么&lt;/h2&gt;&lt;p&gt;CEYE是一个用来检测 &lt;code&gt;带外（Out-of-Band）&lt;/code&gt;流量的监控平台，如DNS查询和HTTP请求。它可以帮助安全研究人员在测试漏洞时收集信息（例如SSRF / XXE / RFI / RCE）。&lt;/p&gt;
&lt;h2 id=&quot;2-为什么会有CEYE&quot;&gt;&lt;a href=&quot;#2-为什么会有CEYE&quot; class=&quot;headerlink&quot; title=&quot;2. 为什么会有CEYE&quot;&gt;&lt;/a&gt;2. 为什么会有CEYE&lt;/h2&gt;&lt;p&gt;提到为什么会有CEYE就必须提到它的使用场景了。&lt;/p&gt;
&lt;p&gt;有两种常见的情况会导致许多漏洞扫描工具漏扫：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;漏洞检测或漏洞利用需要进一步的用户或系统交互&lt;/li&gt;
&lt;li&gt;一些漏洞类型没有直接表明攻击是成功的。如Payload触发了却不在前端页面显示。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了解决这个问题，我们开发了CEYE平台。通过使用诸如DNS和HTTP之类的带外信道，便可以得到回显信息。&lt;/p&gt;
    
    </summary>
    
      <category term="Product" scheme="https://morningchen.com/categories/Product/"/>
    
      <category term="CEYE" scheme="https://morningchen.com/categories/Product/CEYE/"/>
    
    
      <category term="React" scheme="https://morningchen.com/tags/React/"/>
    
      <category term="Python" scheme="https://morningchen.com/tags/Python/"/>
    
      <category term="Architechure" scheme="https://morningchen.com/tags/Architechure/"/>
    
      <category term="CEYE" scheme="https://morningchen.com/tags/CEYE/"/>
    
  </entry>
  
  <entry>
    <title>Cross site scripting vulnerability in django-epiceditor</title>
    <link href="https://morningchen.com/2017/03/09/Cross-site-scripting-vulnerability-in-django-epiceditor/"/>
    <id>https://morningchen.com/2017/03/09/Cross-site-scripting-vulnerability-in-django-epiceditor/</id>
    <published>2017-03-09T04:43:38.000Z</published>
    <updated>2018-09-27T03:49:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>django-epiceditor</p><p>A django app that allows the easy addition of EpicEditor markdown editor to a django form field, whether in a custom app or the Django Admin.</p><p>The project url: <a href="https://pypi.python.org/pypi/django-epiceditor" target="_blank" rel="noopener">https://pypi.python.org/pypi/django-epiceditor</a></p><a id="more"></a><h2 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h2><ul><li>django==1.10.6</li><li>django-epiceditor==0.2.3</li></ul><h2 id="Vulnerability-reproduction"><a href="#Vulnerability-reproduction" class="headerlink" title="Vulnerability reproduction"></a>Vulnerability reproduction</h2><p>Your apps, in the form.py<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> epiceditor.widgets <span class="keyword">import</span> AdminEpicEditorWidget</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> FooModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FooModelForm</span><span class="params">(forms.ModelForm)</span>:</span></span><br><span class="line">    title = forms.CharField(widget=AdminEpicEditorWidget())</span><br><span class="line">    info = forms.CharField(widget=AdminEpicEditorWidget())</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = FooModel</span><br><span class="line">        fields = <span class="string">"__all__"</span></span><br></pre></td></tr></table></figure></p><p>Then enter django background page, if the field use widget AdminEpicEditorWidget</p><p>in editor:</p><p><img src="http://7xi9tp.com1.z0.glb.clouddn.com/v2476.png" alt=""></p><p>click preview<br><img src="http://7xi9tp.com1.z0.glb.clouddn.com/v1123.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;django-epiceditor&lt;/p&gt;
&lt;p&gt;A django app that allows the easy addition of EpicEditor markdown editor to a django form field, whether in a custom app or the Django Admin.&lt;/p&gt;
&lt;p&gt;The project url: &lt;a href=&quot;https://pypi.python.org/pypi/django-epiceditor&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pypi.python.org/pypi/django-epiceditor&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Security" scheme="https://morningchen.com/categories/Security/"/>
    
      <category term="XSS" scheme="https://morningchen.com/categories/Security/XSS/"/>
    
    
      <category term="xss" scheme="https://morningchen.com/tags/xss/"/>
    
      <category term="vulnerability" scheme="https://morningchen.com/tags/vulnerability/"/>
    
  </entry>
  
  <entry>
    <title>Ethereum Ecosphere</title>
    <link href="https://morningchen.com/2016/12/19/ethereum-ecosphere/"/>
    <id>https://morningchen.com/2016/12/19/ethereum-ecosphere/</id>
    <published>2016-12-19T01:01:45.000Z</published>
    <updated>2018-09-27T17:04:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="以太坊项目生态圈"><a href="#以太坊项目生态圈" class="headerlink" title="以太坊项目生态圈"></a>以太坊项目生态圈</h1><h3 id="组织结构"><a href="#组织结构" class="headerlink" title="组织结构"></a>组织结构</h3><p>以太坊项目将由以下3个组织组成<br><img src="/2016/12/19/ethereum-ecosphere/eth.png"><br><a id="more"></a><br><img src="https://camo.githubusercontent.com/68b6d4dd156e85d22114ef1fa8a028f4f717e6f5/687474703a2f2f626974636f696e386274632e71696e6975646e2e636f6d2f77702d636f6e74656e742f75706c6f6164732f323031342f31312f66696c65303030322e6a7067" alt="ethereum"></p><h5 id="以太坊基金会："><a href="#以太坊基金会：" class="headerlink" title="以太坊基金会："></a>以太坊基金会：</h5><p>总部设在瑞士楚格州的非营利基金会，这个基金是负责为未来加密货币研发和推进开发的其他机构分配资源的伞形公司。该基金会的董事会由Vitalik Buterin（主席），Mihai Alisie（副主席），Taylor Gerring, Stephan Tual, Joseph Lubin, Jeffrey Wilcke 还有 Gavin Wood组成。该基金会将重点放在首要的“使命”上，即，使运营机构来完成每天的日常工作。</p><p>使命和愿景:<br>以太坊基金会的使命是促进和支持研究，开发和教育，为世界提供分散的协议和工具，使开发商能够生产下一代分布式应用程序（dapps），并共同构建更全球可访问，更自由和更可信的互联网 。</p><p>主要职责：举办开发者大会 目前已举办3届</p><ul><li>DEVCON0 柏林 2014年11月</li><li>DEVCON1 伦敦 2015年11月</li><li>DEVCON2 上海 2016年9月</li></ul><h5 id="以太坊瑞士有限公司-已停止运作-："><a href="#以太坊瑞士有限公司-已停止运作-：" class="headerlink" title="以太坊瑞士有限公司(已停止运作)："></a>以太坊瑞士有限公司(已停止运作)：</h5><p>总部设在瑞士的一家公司，为了领导创世块链的发行，将负责运营2014年度的一部分工作。该公司由以太坊基金会100％控制，计划在创世块链发行后停止运作。</p><h5 id="DΞV："><a href="#DΞV：" class="headerlink" title="ĐΞV："></a>ĐΞV：</h5><p>将得到两档基金来专门建立的一个非营利性组织，优化和推广以太坊1.0版本。主导开发者Vitalik Buterin，Gavin Wood 和 Jeffrey Wilcke为董事。</p><h5 id="其他组织："><a href="#其他组织：" class="headerlink" title="其他组织："></a>其他组织：</h5><p>包括自律组织（SRO）和非营利性研究机构，这些组织可能会同时得到资助。根据预计，以太坊瑞士有限公司将会协助这些研究机构的起步，以太坊基金会可能将会监督SRO的活动。最终，以太坊基金会还将监督研究机构本身。</p><h3 id="以太坊历史与规划"><a href="#以太坊历史与规划" class="headerlink" title="以太坊历史与规划"></a>以太坊历史与规划</h3><h4 id="众筹计划"><a href="#众筹计划" class="headerlink" title="众筹计划"></a>众筹计划</h4><h5 id="以太坊1-0版本-已完成"><a href="#以太坊1-0版本-已完成" class="headerlink" title="以太坊1.0版本(已完成)"></a>以太坊1.0版本(已完成)</h5><p>以太坊1.0代表了ĐΞV和以太坊瑞士有限公司和的首要目标。以太坊基金会则将会把兴趣放在促进整个加密空间的发展上。</p><p>自2014年1月份项目成立以来，自愿贡献代码的开发人员已经完成了以下功能：</p><p>完成4个近乎兼容的以太坊客户端</p><ul><li><a href="https://github.com/ethereum/go-ethereum" target="_blank" rel="noopener">go-ethereum</a> 官方以太坊协议的Go语言实现</li><li><a href="https://github.com/ethereum/cpp-ethereum" target="_blank" rel="noopener">cpp-ethereum</a> 以太坊协议的c++实现</li><li><a href="https://github.com/ethereum/pyethapp" target="_blank" rel="noopener">pyethapp</a> 以太坊协议的python实现</li><li><a href="https://github.com/ethereum/ethereumj" target="_blank" rel="noopener">ethereumj</a> 以太坊协议的纯Java实现</li></ul><p>Serpent, LLL 和 Mutan的3种合约编程语言</p><ul><li><a href="https://github.com/ethereum/serpent" target="_blank" rel="noopener">serpent</a></li><li>LLL （已死亡 无进展）</li><li><a href="https://github.com/obscuren/mutan" target="_blank" rel="noopener">Mutan</a></li></ul><p>以太坊的JavaScript API</p><ul><li><a href="https://github.com/ethereum/web3.js" target="_blank" rel="noopener">web3.js</a></li></ul><h4 id="发布计划"><a href="#发布计划" class="headerlink" title="发布计划"></a>发布计划</h4><h5 id="第一阶段-Frontier-已完成"><a href="#第一阶段-Frontier-已完成" class="headerlink" title="第一阶段 Frontier (已完成)"></a>第一阶段 Frontier (已完成)</h5><p>Frontier阶段是以太坊的最初版本，不是一个完全可靠和安全的网络。Frontier是空白版的以太坊网络：一个用于挖矿的界面和一种上传和执行合约的方法。Frontier的主要用途是：将挖矿和交易所交易运行起来，从而社区可以运行挖矿设备，和开始建立一个环境，人们可以在里面测试分布式应用（DApps）。由于Frontier阶段的以太坊客户端只有命令行界面，没有图形界面，所以该阶段主要为开发者。</p><h5 id="第二阶段-Homestead（目前阶段）"><a href="#第二阶段-Homestead（目前阶段）" class="headerlink" title="第二阶段 Homestead（目前阶段）"></a>第二阶段 Homestead（目前阶段）</h5><p>Homestead阶段与Frontier阶段相比，没有明显的技术性里程碑，主要改善了安全性，表明以太坊网络已经平稳运行，不再是不安全和不可靠的网络了。在此阶段，以太坊提供了图形界面的钱包（Mist），易用性得到极大改善，以太坊不再是开发者的专属，普通用户也可以方便地体验和使用以太坊。</p><p>详细发展计划见<br> <a href="https://github.com/ethereum/homestead-guide" target="_blank" rel="noopener">homestead-guide</a></p><h5 id="第三阶段-Metropolis（待定）"><a href="#第三阶段-Metropolis（待定）" class="headerlink" title="第三阶段 Metropolis（待定）"></a>第三阶段 Metropolis（待定）</h5><p>在Metropolis阶段，团队将最终正式发布一个为非技术用户设计的、功能相对完善的用户界面，也就是发布<a href="https://github.com/ethereum/mist" target="_blank" rel="noopener">Mist浏览器</a>。</p><h5 id="第四阶段-Serenity（待定）"><a href="#第四阶段-Serenity（待定）" class="headerlink" title="第四阶段 Serenity（待定）"></a>第四阶段 Serenity（待定）</h5><p>同时也是以太坊2.0阶段，它有4个主要研究目标：</p><ul><li>发布区块链的 PoS 股权证明(Casper)版本</li><li>可扩展性</li><li>zkSNARK（zero-knowledge Succinct Non-interactive Argument of Knowledge），也就是零知识简洁非交互式参数。解决隐私问题。</li><li>升级evm（以太坊虚拟机）</li></ul><h3 id="目前主要维护的开源代码"><a href="#目前主要维护的开源代码" class="headerlink" title="目前主要维护的开源代码"></a>目前主要维护的开源代码</h3><h5 id="以太坊客户端"><a href="#以太坊客户端" class="headerlink" title="以太坊客户端"></a>以太坊客户端</h5><p>按照流行程度由高到低排列</p><ul><li><a href="https://github.com/ethereum/go-ethereum" target="_blank" rel="noopener">go-ethereum</a> 官方以太坊协议的Go语言实现</li><li><a href="https://github.com/ethcore/parity" target="_blank" rel="noopener">parity</a> 以太坊协议的Rust实现</li><li><a href="https://github.com/ethereum/cpp-ethereum" target="_blank" rel="noopener">cpp-ethereum</a> 以太坊协议的c++实现</li><li><a href="https://github.com/ethereum/pyethapp" target="_blank" rel="noopener">pyethapp</a> 以太坊协议的python实现</li><li><a href="https://github.com/ethereum/ethereumj" target="_blank" rel="noopener">ethereumj</a> 以太坊协议的纯Java实现</li></ul><h5 id="合约编程语言"><a href="#合约编程语言" class="headerlink" title="合约编程语言"></a>合约编程语言</h5><ul><li><a href="https://github.com/ethereum/solidity" target="_blank" rel="noopener">solidity</a> 坚实的面向合约的编程语言 (主流合约编程语言)</li><li><a href="https://github.com/ethereum/viper" target="_blank" rel="noopener">viper</a> 新的正在实验中的编程语言</li><li><a href="https://github.com/ethereum/serpent" target="_blank" rel="noopener">serpent</a> 用于写合约的编程语言</li></ul><h5 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h5><ul><li><a href="https://github.com/ethereum/web3.js" target="_blank" rel="noopener">web3.js</a> 以太坊的JavaScript API</li><li><a href="https://github.com/ethereum/evmjit" target="_blank" rel="noopener">evmjit</a> EVM JIT是一个用于及时编译Ethereum EVM代码的库。 它可以用于替换以太坊客户端中经典的解释器式EVM虚拟机。</li><li><a href="https://github.com/ethereum/pyethereum" target="_blank" rel="noopener">pyethereum</a> 以太坊项目的Python核心库</li><li><a href="https://github.com/ethereum/browser-solidity" target="_blank" rel="noopener">browser-solidity</a> 一个基于浏览器的Solidity编译器和IDE</li><li><a href="https://github.com/ethereum/mist" target="_blank" rel="noopener">mist</a> mist浏览器 浏览和使用Ðapps的首选工具</li><li><a href="https://github.com/ethereum/homebrew-ethereum" target="_blank" rel="noopener">homebrew-ethereum</a> homebrew的扩展 用来在mac上安装和管理 ethereum</li><li><a href="https://github.com/ethereum/solc-js" target="_blank" rel="noopener">solc-js</a> Javascript绑定的solidity编译器</li><li><a href="https://github.com/ethereum/ens" target="_blank" rel="noopener">ens</a> 以太坊的域名服务(Ethereum Name Service)</li><li><a href="https://github.com/ethereum/remix" target="_blank" rel="noopener">remix</a> Ethereum IDE 和web工具</li><li><a href="https://github.com/ethereum/meteor-dapp-wallet" target="_blank" rel="noopener">meteor-dapp-wallet</a> 用meteor写的以太坊钱包应用</li><li><a href="https://github.com/ethereum/meteor-package-elements" target="_blank" rel="noopener">meteor-package-elements</a> 基本的Meteor模板/组件的集合，使得dapps更快地构建。</li></ul><h5 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h5><ul><li><a href="https://github.com/ethereum/ethereum-org" target="_blank" rel="noopener">ethereum-org</a> 以太坊网站源码</li><li><a href="https://github.com/ethereum/yellowpaper" target="_blank" rel="noopener">yellowpaper</a> 以太坊黄皮书</li><li><a href="https://github.com/ethereum/EIPs" target="_blank" rel="noopener">EIPs</a> 以太坊改进建议(Ethereum Improvement Proposal), 提议和描述对以太坊协议的更改。</li><li><a href="https://github.com/ethereum/wiki" target="_blank" rel="noopener">wiki</a> 以太坊wiki</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;以太坊项目生态圈&quot;&gt;&lt;a href=&quot;#以太坊项目生态圈&quot; class=&quot;headerlink&quot; title=&quot;以太坊项目生态圈&quot;&gt;&lt;/a&gt;以太坊项目生态圈&lt;/h1&gt;&lt;h3 id=&quot;组织结构&quot;&gt;&lt;a href=&quot;#组织结构&quot; class=&quot;headerlink&quot; title=&quot;组织结构&quot;&gt;&lt;/a&gt;组织结构&lt;/h3&gt;&lt;p&gt;以太坊项目将由以下3个组织组成&lt;br&gt;&lt;img src=&quot;/2016/12/19/ethereum-ecosphere/eth.png&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Research" scheme="https://morningchen.com/categories/Research/"/>
    
      <category term="Ethereum" scheme="https://morningchen.com/categories/Research/Ethereum/"/>
    
    
      <category term="ethereum" scheme="https://morningchen.com/tags/ethereum/"/>
    
      <category term="block-chain" scheme="https://morningchen.com/tags/block-chain/"/>
    
  </entry>
  
  <entry>
    <title>Run docker-compose in Jenkins</title>
    <link href="https://morningchen.com/2016/11/22/Run-docker-compose-in-Jenkins/"/>
    <id>https://morningchen.com/2016/11/22/Run-docker-compose-in-Jenkins/</id>
    <published>2016-11-22T09:09:06.000Z</published>
    <updated>2018-09-27T03:52:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>在阿里云服务器上部署Jenkins 在Jenkins中自动运行docker-compose<br>这篇文章主要记录一下部署时候遇到的问题。</p><p>Server: Ubuntu 14.04.2 LTS</p><p>Requirement:</p><ul><li>Jenkins version 2.19.3</li><li>Docker version 1.12.3</li><li>docker-compose version 1.8.1</li></ul><a id="more"></a><h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p>Jenkins 安装完成后会创建一个名为jenkins的用户，默认启动8080端口 开启jenkins服务<br>登陆web，初始引导操作会让你创建用户和安装一些插件，这里说一下必须额外安装的插件</p><p>系统管理-管理插件-可选插件</p><ul><li>Git client plugin</li><li>Git plugin</li><li>Bitbucket Plugin</li><li>Build Pipeline Plugin</li><li>Pipeline</li></ul><p>下插件时因为众所周知的网络问题 需要多重试几次</p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>该项目有4个job 分别是</p><ul><li>mom 用于抓bitbucket mom的代码</li><li>momflask 用于抓bitbucket momflask的代码</li><li>rmom 用于抓bitbucket rmom的代码</li><li>run_docker_compose 运行docker-compose</li></ul><h4 id="1-新建mom-job"><a href="#1-新建mom-job" class="headerlink" title="1. 新建mom job"></a>1. 新建mom job</h4><p>源码管理 <a href="mailto:git@bitbucket.org" target="_blank" rel="noopener">git@bitbucket.org</a>:Aaron_Liu/mom.git</p><p>指定分支 master</p><p>构建-execute shell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br><span class="line">ls -a</span><br></pre></td></tr></table></figure></p><p>构建后操作-Trigger parameterized build on other projects（这一步是为了自动触发momflask的构建工作）</p><pre><code>Projects to build momflaskTrigger when build is StableTrigger build without parameters 一定要打勾！！！</code></pre><h4 id="2-新建momflask-job"><a href="#2-新建momflask-job" class="headerlink" title="2. 新建momflask job"></a>2. 新建momflask job</h4><p>General 高级</p><pre><code>使用自定义的工作空间 目录 `$JENKINS_HOME/workspace/mom/momflask`目的是为了把momflask的文件夹放在mom下</code></pre><p>源码管理 <a href="mailto:git@bitbucket.org" target="_blank" rel="noopener">git@bitbucket.org</a>:xixijun/momflask.git</p><p>指定分支 develop</p><p>构建-execute shell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br><span class="line">ls -a</span><br></pre></td></tr></table></figure></p><p>构建后操作-Trigger parameterized build on other projects（这一步是为了自动触发rmom的构建工作）</p><pre><code>Projects to build rmomTrigger when build is StableTrigger build without parameters 一定要打勾！！！</code></pre><h4 id="3-新建rmom-job"><a href="#3-新建rmom-job" class="headerlink" title="3. 新建rmom job"></a>3. 新建rmom job</h4><p>General 高级</p><pre><code>使用自定义的工作空间 目录 `$JENKINS_HOME/workspace/mom/rmom`</code></pre><p>源码管理 <a href="mailto:git@bitbucket.org" target="_blank" rel="noopener">git@bitbucket.org</a>:xixijun/rmom.git</p><p>指定分支 dev</p><p>构建-execute shell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pwd</span><br><span class="line">ls -a</span><br></pre></td></tr></table></figure></p><p>构建后操作-Trigger parameterized build on other projects（这一步是为了自动触发run_docker_compose的构建工作）</p><pre><code>Projects to build run_docker_composeTrigger when build is StableTrigger build without parameters 一定要打勾！！！</code></pre><h4 id="4-新建run-docker-compose-job"><a href="#4-新建run-docker-compose-job" class="headerlink" title="4. 新建run_docker_compose job"></a>4. 新建run_docker_compose job</h4><p>General 高级</p><pre><code>使用自定义的工作空间 目录 `$JENKINS_HOME/workspace/mom`</code></pre><p>构建-execute shell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose ps</span><br><span class="line">docker-compose up -d --build</span><br></pre></td></tr></table></figure></p><h4 id="5-新建pipline-view"><a href="#5-新建pipline-view" class="headerlink" title="5. 新建pipline view"></a>5. 新建pipline view</h4><p>这一步需要 <code>Build Pipeline Plugin</code> 插件支持<br>新建按钮在All标签栏右边的+号<br>点击 Build Pipeline View</p><p>配置 Select Initial Job 选择mom<br>保存后会看到流程图，流程图的关联是依据之前设置 <code>构建后操作-Trigger parameterized build on other projects</code></p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>如果想要实现git推送代码后自动更新 需要在job的构建触发器中设置Build when a change is pushed to BitBucket<br>还要在该项目的BitBucket中设置webhooks为 <a href="http://url/bitbucket-hook/" target="_blank" rel="noopener">http://url/bitbucket-hook/</a></p><p>安装Jenkins之后会创建一个名为jenkins的用户 需要赋予该用户权限才能执行docker命令<br>sudo usermod -aG docker Jenkins</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;在阿里云服务器上部署Jenkins 在Jenkins中自动运行docker-compose&lt;br&gt;这篇文章主要记录一下部署时候遇到的问题。&lt;/p&gt;
&lt;p&gt;Server: Ubuntu 14.04.2 LTS&lt;/p&gt;
&lt;p&gt;Requirement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jenkins version 2.19.3&lt;/li&gt;
&lt;li&gt;Docker version 1.12.3&lt;/li&gt;
&lt;li&gt;docker-compose version 1.8.1&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://morningchen.com/categories/DevOps/"/>
    
    
      <category term="Docker" scheme="https://morningchen.com/tags/Docker/"/>
    
      <category term="Jenkins" scheme="https://morningchen.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>谈谈互联网安全</title>
    <link href="https://morningchen.com/2016/02/16/Talk-about-Internet-Security/"/>
    <id>https://morningchen.com/2016/02/16/Talk-about-Internet-Security/</id>
    <published>2016-02-16T12:09:30.000Z</published>
    <updated>2018-09-27T03:55:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>无论是IT从业人员还是普通用户都应该了解一下互联网安全，毕竟这关系到私人隐私。以下从9个方面谈谈互联网安全</p><h3 id="1-撞库"><a href="#1-撞库" class="headerlink" title="1.撞库"></a>1.撞库</h3><p>其实很多网站都泄露过数据库，包括一些大的比如csdn、网易邮箱、携程、甚至包括很久之前的QQ都泄露过。<br>撞库就是拿这些已经泄露过的用户名+密码，去尝试在一系列别的网站登陆</p><p>应对策略：对于开发人员，换salt，换加密方式；对于普通用户，改密码。</p><h3 id="2-模拟登陆"><a href="#2-模拟登陆" class="headerlink" title="2.模拟登陆"></a>2.模拟登陆</h3><p>当你登陆一个网站的时候，其实是建立了一个session，也就是会话，会话数据是在服务器端保存。但是如何知道你是哪个用户呢，它会回传一个session_id保存在cookie里，用户每次登陆的时候都会随机生成的一个很长的随机session_id，黑客会通过一些工具（比如抓包工具）来获取你浏览器的session_id来模拟登陆你的账号，达到窃取隐私的目的。</p><a id="more"></a><h3 id="3-抓包"><a href="#3-抓包" class="headerlink" title="3.抓包"></a>3.抓包</h3><p>现在绝大多数网站还是使用的http协议，而http协议本身又是不加密的，所以在你访问一个网站的时候，它的request和response都是明文的，这样黑客就能抓到你request和response的内容，然后进行各个字段的分析，就能拿到它有用的东西，然后去破解你，模拟你的登陆。<br>解决办法就是用https协议，这个s就是secure的意思，它通过SSL/TLS协议把request和response的内容做了一些加密，并且具有校验机制和证书，防止被第三方篡改或者冒充。当然有一些https加密方式已经被破解了，需要更新最新的加密包。之前的SSL低版本漏洞和心脏滴血漏洞都是https协议被破解的情况。</p><p>应对策略：网站换https协议、及时更新依赖的包</p><h3 id="4-跨站脚本攻击-XSS"><a href="#4-跨站脚本攻击-XSS" class="headerlink" title="4.跨站脚本攻击 - XSS"></a>4.跨站脚本攻击 - XSS</h3><p>比如有的网站的留言板没有禁用掉html格式的代码，黑客用一段url的脚本留言，这个url的?后面跟上用户的cookie信息。任何一个人只要打开了这个页面就会把自己的cookie信息上传到黑客的服务器上，黑客就拿到你的cookie进行分析，要知道session_id是存在cookie里的，于是黑客就能利用你的session_id进行模拟登陆，来窃取一些信息了</p><p>应对策略：所以这些留言板和用户可输入的地方都要对html语法进行过滤</p><h3 id="5-DDoS攻击"><a href="#5-DDoS攻击" class="headerlink" title="5.DDoS攻击"></a>5.DDoS攻击</h3><p>黑客会通过各种手段掌握大量空闲的计算机，俗称肉鸡，去对某一个网站发起请求。把你的网站比作银行柜台的话，黑客用一万台肉鸡对你的网站发起请求，就意味着一万个人来到你的银行柜台找柜员Bala一些有的没的，但是后面想取钱的人就挤不进来，这样子银行柜台被塞满了，也就意味着你的网站瘫痪了。<br>过去都是针对一些安全防范做得不太好的网吧植入木马程序，最近出现个新的情况，用手机当作肉鸡，特别是root后的手机，一旦root后，会很容易给第三方软件掌握手机的系统权限，那么就相当于手机也被装了木马。<br>DDos目前没有什么很好的措施进行防范，因为都是模拟的真实用户，而且来源地理位置IP也是很分散的，很难去过滤掉这种非法请求，所以这种可能需要找第三方安全公司进行策略上的清洗，也就是流量的清洗，他们会识别这些请求有什么非法的地方，然后吧这些请求过滤掉。具体的做法就是把你网站的域名解析到安全公司的IP上，他的服务器把过滤后的合法请求再转发给你自己的网站服务器上，这样大量的DDos请求就被他们给过滤掉了。</p><h3 id="6-SQL注入"><a href="#6-SQL注入" class="headerlink" title="6.SQL注入"></a>6.SQL注入</h3><p>造成SQL注入的原因是因为程序没有有效过滤用户的输入，使攻击者成功的向服务器提交恶意的SQL查询代码，程序在接收后错误的将攻击者的输入作为查询语句的一部分执行，导致原始的查询逻辑被改变，额外的执行了攻击者精心构造的恶意代码。</p><p>应对策略：DAO层包装，在后台作为参数传过去，处理特殊字符掉</p><h3 id="7-弱密码"><a href="#7-弱密码" class="headerlink" title="7.弱密码"></a>7.弱密码</h3><p>服务器密码、数据库密码等一些配置文件应该使用字母数字大小写混合的复杂长密码。还有，不要把这些配置文件上传到开源的版本控制系统中去了。去github上搜索关键字password，简直不要太多。<br>再说说用户密码的加密方式，虽然很多网站采用的MD5的加密方式加密了用户的密码，但是很多黑客手里都有彩虹表，左边是原文密码，右边是MD5后的密码。如果用户的密码异常简单或很常见的话，就算是MD5加密后的密码，也能很容易反查出原文密码。</p><p>应对策略：换较难破解的加密方式，</p><p>一些常见的密码加密算法，由破解难度从低到高排列：</p><ul><li>明文储存</li><li>hash md5</li><li>md5 + salt</li><li>bcrypt</li><li>PBKDF2</li></ul><h3 id="8-服务器漏洞"><a href="#8-服务器漏洞" class="headerlink" title="8.服务器漏洞"></a>8.服务器漏洞</h3><p>一般都是开发人员疏忽造成的，比如说权限控制没做好，没考虑周全等原因都会造成服务器漏洞，给黑客可乘之机。</p><p>应对策略：code review</p><h3 id="9-服务器安全"><a href="#9-服务器安全" class="headerlink" title="9.服务器安全"></a>9.服务器安全</h3><p>之前写过一篇关于服务器安全的文章<a href="http://morningchen.com/2015/07/16/settings-for-VPS-safety/">《服务器安全之SSH设置》</a></p><ul><li>用linux iptables软件防火墙服务</li><li>尽量把不用的一些端口给关掉，数据库的默认端口也要给改掉（想想之前的redis漏洞）</li><li>软件及时更新，打安全补丁</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>从安全角度来讲，永远是道高一尺魔高一丈，黑客永远会找到更先进的攻击方法。比如说去年有人也说过京东，他虽然用的https协议，但是是SSL 2.0的加密版本，早就被破解了，但是还有无数的网站连https都没用做。毕竟京东是一家上市公司，大家难免对他的要求都比较高。对于一般的互联网公司而言，可能是个循序渐进的过程，一开始把一些较大的漏洞给补上，随着公司的扩大，预算的增加，不断提高自己的安全水准，或者请一些安全专家。</p><p>对于一般用户而言就是尽量保证自己每个网站的密码都不相同，一些涉及到隐私的重要网站，比如说一些购物网站、网银一定要使用复杂的密码，然后每隔一段时间就换一次密码。永远记住一句话，不是你的账号没泄露，而是你的账号没有价值。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;无论是IT从业人员还是普通用户都应该了解一下互联网安全，毕竟这关系到私人隐私。以下从9个方面谈谈互联网安全&lt;/p&gt;
&lt;h3 id=&quot;1-撞库&quot;&gt;&lt;a href=&quot;#1-撞库&quot; class=&quot;headerlink&quot; title=&quot;1.撞库&quot;&gt;&lt;/a&gt;1.撞库&lt;/h3&gt;&lt;p&gt;其实很多网站都泄露过数据库，包括一些大的比如csdn、网易邮箱、携程、甚至包括很久之前的QQ都泄露过。&lt;br&gt;撞库就是拿这些已经泄露过的用户名+密码，去尝试在一系列别的网站登陆&lt;/p&gt;
&lt;p&gt;应对策略：对于开发人员，换salt，换加密方式；对于普通用户，改密码。&lt;/p&gt;
&lt;h3 id=&quot;2-模拟登陆&quot;&gt;&lt;a href=&quot;#2-模拟登陆&quot; class=&quot;headerlink&quot; title=&quot;2.模拟登陆&quot;&gt;&lt;/a&gt;2.模拟登陆&lt;/h3&gt;&lt;p&gt;当你登陆一个网站的时候，其实是建立了一个session，也就是会话，会话数据是在服务器端保存。但是如何知道你是哪个用户呢，它会回传一个session_id保存在cookie里，用户每次登陆的时候都会随机生成的一个很长的随机session_id，黑客会通过一些工具（比如抓包工具）来获取你浏览器的session_id来模拟登陆你的账号，达到窃取隐私的目的。&lt;/p&gt;
    
    </summary>
    
      <category term="Security" scheme="https://morningchen.com/categories/Security/"/>
    
    
      <category term="随笔" scheme="https://morningchen.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="Security" scheme="https://morningchen.com/tags/Security/"/>
    
  </entry>
  
  <entry>
    <title>《Growth Hacker》读后感</title>
    <link href="https://morningchen.com/2015/12/18/growth-hacker-book-review/"/>
    <id>https://morningchen.com/2015/12/18/growth-hacker-book-review/</id>
    <published>2015-12-18T14:58:11.000Z</published>
    <updated>2018-09-27T03:51:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>拜读了一下《Growth Hacker》。艾玛，简直就是产品经理的装逼利器啊～本书干货满满，各种没听过的词迎面扑来，简直大开眼界。此书一出，估计国内不久后就会出现CGO(Chief Growth Officer)首席增长官了:)，嘿嘿嘿。</p><p>讲真，一口气看完这本书后，给我印象最深的还是这句话：</p><blockquote><p>总的说来，一路野蛮成长，跌跌撞撞，体内吸收了不少“混乱”的能量，然而那些在当初看来任性妄为、无足轻重的经历，终将在某一日连点成线，开花结果</p></blockquote><p>简直深有体会啊！！！曾经不经意做的一些小事，看过的一篇文章，写过的一段代码，发表的一篇感叹，恰好就在那时碰撞在了一起，不由感叹冥冥之中。。。&gt;.&lt; 简直了。。</p><p>或许我的BLOG也可能会在未来与某件事连成一线吧。简单梳理下主要内容，作为一个框架植入到我的脑海中，等什么时候用得着了自然就会想起其中一二。</p><a id="more"></a><h3 id="什么是增长黑客"><a href="#什么是增长黑客" class="headerlink" title="什么是增长黑客"></a>什么是增长黑客</h3><p>顾名思义 Growth 指的产品增长这个核心目标，Hacker 就是以 Hacker的思维方式思考。<br>产品增长这个目标可以分为5个阶段AARRR</p><ul><li>Acquisition 获取用户</li><li>Activation 激发活跃</li><li>Retention 提高留存</li><li>Revenue 增加收入</li><li>Referral 传播推荐</li></ul><p>本书以大量的案例阐述了如何做到AARRR这五个阶段，但前提是创造正确的产品</p><h3 id="创造正确的产品"><a href="#创造正确的产品" class="headerlink" title="创造正确的产品"></a>创造正确的产品</h3><ul><li>产品本身的定位</li><li><p>PMF</p><p>  ProductMarketFit 探寻产品与市场的完美契合<br>  如果产品初期不是那么完备，那么无止境的市场扩张只会毁了这个产品</p></li><li><p>MVP</p><p>  需求才是催生产品的原动力 用最小化可行产品(MVP, Minimum Viable Product)验证需求</p><p>  典型例子 用微信平台开发MVP</p><p>  必备模块：反馈渠道、官方公告、自动升级</p></li></ul><h3 id="Growth-Hacker的特征"><a href="#Growth-Hacker的特征" class="headerlink" title="Growth Hacker的特征"></a>Growth Hacker的特征</h3><ul><li>数据为王</li><li>专注目标</li><li>关注细节</li><li>富于创意</li><li>信息通透</li></ul><h3 id="以后可能会用上的Growth-Hacker工具箱"><a href="#以后可能会用上的Growth-Hacker工具箱" class="headerlink" title="以后可能会用上的Growth Hacker工具箱"></a>以后可能会用上的Growth Hacker工具箱</h3><ul><li><p>Google Analytics</p><p>谷歌强大免费的统计工具</p></li><li><p>Mixpanel/KissMetrics</p><p>用户行为导向分析工具</p></li><li><p>UserCycle</p><p>统计分析+生命周期维护+分组实验测试</p></li><li><p>Customer.io/Vero</p><p>分析邮件</p></li><li><p>Optimize.ly/Unbouce</p><p>A/B测试利器</p></li><li><p>Basecamp/风车/明道/Tower/Teambition</p><p>团队协作平台</p></li><li><p>友盟/TalkingData</p><p>移动应用统计平台</p></li></ul><h3 id="我的感受"><a href="#我的感受" class="headerlink" title="我的感受"></a>我的感受</h3><p>对于程序员来说，也许最好的面试方式是show me the code；<br>对于增长黑客而言，也许就是show me the data。</p><p>无论是传统行业还是新兴行业，都越来越需要多面手了。比如建筑电气工程师、技术型销售、全栈工程师以及这里说到的增长黑客，他们都不止精通于一点，多个部门之间的协调合作正是需要这些多面手来把持。实现产品的增长正是需要增长黑客，他们是游走在产品、运营、研发、设计、用研等环节之间的多面手。</p><p>涌现出如此多的未知事物想想都有些小兴奋呢，期待未来～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;拜读了一下《Growth Hacker》。艾玛，简直就是产品经理的装逼利器啊～本书干货满满，各种没听过的词迎面扑来，简直大开眼界。此书一出，估计国内不久后就会出现CGO(Chief Growth Officer)首席增长官了:)，嘿嘿嘿。&lt;/p&gt;
&lt;p&gt;讲真，一口气看完这本书后，给我印象最深的还是这句话：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;总的说来，一路野蛮成长，跌跌撞撞，体内吸收了不少“混乱”的能量，然而那些在当初看来任性妄为、无足轻重的经历，终将在某一日连点成线，开花结果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简直深有体会啊！！！曾经不经意做的一些小事，看过的一篇文章，写过的一段代码，发表的一篇感叹，恰好就在那时碰撞在了一起，不由感叹冥冥之中。。。&amp;gt;.&amp;lt; 简直了。。&lt;/p&gt;
&lt;p&gt;或许我的BLOG也可能会在未来与某件事连成一线吧。简单梳理下主要内容，作为一个框架植入到我的脑海中，等什么时候用得着了自然就会想起其中一二。&lt;/p&gt;
    
    </summary>
    
      <category term="Reading" scheme="https://morningchen.com/categories/Reading/"/>
    
    
      <category term="随笔" scheme="https://morningchen.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js 初体验</title>
    <link href="https://morningchen.com/2015/12/05/vue-js-notes/"/>
    <id>https://morningchen.com/2015/12/05/vue-js-notes/</id>
    <published>2015-12-05T13:53:09.000Z</published>
    <updated>2018-09-27T03:57:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近工作中的一个小项目需要做一个车辆信息选择框的三级联动，有点类似省市县的三级联动，下一级依赖上一级的数据。最后的效果是这样<br><img src="http://7xi9tp.com1.z0.glb.clouddn.com/car_selector.png" alt="car_selector"><br>因为这一块的代码业务逻辑相当复杂，采用jQuery写的话代码量有点大，而且会把html的代码写在js文件里，不易于阅读和后期维护，所以CTO大大建议用Vue.js来重写。</p><h3 id="思考过程"><a href="#思考过程" class="headerlink" title="思考过程"></a>思考过程</h3><ol><li>首先是爬取车辆信息的数据，找了一家信息比较全的相关平台，开始了爬虫之旅，待有空写下爬虫的思考，这里略过</li><li>拿到大概2万多条数据后，写一个pipeline整理好数据并写入自己的数据库，数据分为3类：品牌、系列、车型，存入3张表里，分别命名为car_brands, car_series, car_models，哦了～有了数据就可以动手了</li><li>后端写好三个handler逻辑，将数据以json的方式传给前端</li></ol><a id="more"></a><h3 id="用-jQuery写"><a href="#用-jQuery写" class="headerlink" title="用 jQuery写"></a>用 jQuery写</h3><p>前端前端来接受我大后端的数据吧～，以下是我之前写的jQuery版本的代码</p><ol><li>第一个focus事件 点击input框框弹出modal选择框，并向后台请求car_brands数据，成功后render到modal里</li><li>第二个click事件 选择第一列品牌后，向后台请求car_series数据，成功后render出该品牌下所有的车系</li><li>第三个click事件 选择第二列车系后，向后台请求car_models数据，成功后render出该车系下所有的型号</li><li>第四个click事件 选择第三列车型后，将<code>确定</code>button激活</li><li>第五个click事件 点击保存按钮后 隐藏modal框，将选好的信息写入input框框，用blur方法激活formvalidation表单校验</li></ol><pre><code>$(&quot;#select-car&quot;).on(&quot;focus&quot;, &apos;input&apos;, (function () {    $(&apos;#carModal&apos;).modal(&apos;show&apos;);    $(&quot;#choose-brand &gt; .choose-box&quot;).html(&apos;&apos;);    $(&quot;#choose-series &gt; .choose-box&quot;).html(&apos;&lt;div class=&quot;cont-default&quot; data-code=&quot;&quot; data-name=&quot;&quot;&gt;请先选择品牌&lt;/div&gt;&apos;);    $(&quot;#choose-model &gt; .choose-box&quot;).html(&apos;&lt;div class=&quot;cont-default&quot; data-code=&quot;&quot; data-name=&quot;&quot;&gt;请先选择车系&lt;/div&gt;&apos;);    $(&apos;#save-car&apos;).prop(&apos;disabled&apos;, true);    $.ajax({        url: &quot;/borrow/release/car_brands&quot;,        dataType: &quot;json&quot;,        success: function (data) {            $(&quot;.brand-cata&quot;).html(&quot;&quot;);            $.each(data, function(k, v){                $(&quot;.brand-cata&quot;).append(&quot;&lt;li&gt;&quot; + v.cata + &quot;&lt;/li&gt;&quot;);                $(&quot;#choose-brand &gt; .choose-box&quot;).append(&quot;&lt;div class=cont-tit data-name=&apos;&quot; + v.cata + &quot;&apos;&gt;&quot; + v.cata + &quot;&lt;/div&gt;&quot;);                $.each(v.brands, function(k, v){                    var b = $(&quot;&lt;div class=&apos;choose-cont&apos; data-code=&apos;&quot; + v.brand_code + &quot;&apos; data-name=&apos;&quot; + v.en_name + &quot;&apos;&gt;&quot; + v.en_name + &quot;&lt;/div&gt;&quot;);                    $(&quot;#choose-brand &gt; .choose-box&quot;).append(b);                })            });            $(&quot;.brand-cata li&quot;).on(&quot;click&quot;, function () {                var e = $(this).html(),                    t = $(&quot;#choose-brand .choose-box .cont-tit[data-name=&quot; + e.toUpperCase() + &quot;]&quot;);                t.length &amp;&amp; t.parent().animate({scrollTop: t.parent().scrollTop() + (t.offset().top - t.parent().offset().top)})            });        },        error: function (data) {},        fail: function (data) {}    });}));var loading_flag = false;$(&quot;#choose-brand&quot;).on(&quot;click&quot;, &quot;.choose-box &gt; .choose-cont&quot;, function () {    if (loading_flag == true) {        return false    }    $(&quot;#choose-series &gt; .choose-box&quot;).html(&apos;&lt;div class=&quot;cont-default&quot; data-code=&quot;&quot; data-name=&quot;&quot;&gt;请先选择品牌&lt;/div&gt;&apos;);    $(&quot;#choose-model &gt; .choose-box&quot;).html(&apos;&lt;div class=&quot;cont-default&quot; data-code=&quot;&quot; data-name=&quot;&quot;&gt;请先选择车系&lt;/div&gt;&apos;);    $(&apos;#save-car&apos;).prop(&apos;disabled&apos;, true);    $(&quot;.choose-cont&quot;).removeClass(&quot;active&quot;);    $(this).addClass(&quot;active&quot;);    $.ajax({        url: &quot;/borrow/release/car_series&quot;,        data: {&apos;brand_code&apos;: $(this).attr(&apos;data-code&apos;)},        dataType: &quot;json&quot;,        beforeSend: function () {            loading_flag = true;        },        success: function (data) {            loading_flag = false;            $(&quot;#choose-series &gt; .choose-box&quot;).html(&quot;&quot;);            $.each(data, function (k, v) {                $(&quot;#choose-series &gt; .choose-box&quot;).append(&quot;&lt;div class=cont-tit&gt;&quot; + v.factory + &quot;&lt;/div&gt;&quot;);                $.each(v.series, function(k, v) {                    var s = $(&apos;&lt;div class=&quot;choose-cont&quot; data-code=&quot;&apos; + v.series_code + &apos;&quot; data-name=&quot;&apos; + v.en_name + &apos;&quot;&gt;&apos; + v.en_name + &quot;&lt;/div&gt;&quot;);                    $(&quot;#choose-series &gt; .choose-box&quot;).append(s);                })            });        },        error: function (data) {        },        fail: function (data) {        }    })});$(&quot;#choose-series&quot;).on(&quot;click&quot;, &quot;.choose-box &gt; .choose-cont&quot;, function () {    if (loading_flag == true) {        return false    }    $(&quot;#choose-model &gt; .choose-box&quot;).html(&apos;&lt;div class=&quot;cont-default&quot; data-code=&quot;&quot; data-name=&quot;&quot;&gt;请先选择车系&lt;/div&gt;&apos;);    $(&quot;#choose-series &gt; .choose-box &gt; .choose-cont&quot;).removeClass(&quot;active&quot;);    $(&apos;#save-car&apos;).prop(&apos;disabled&apos;, true);    $(this).addClass(&quot;active&quot;);    $.ajax({        url: &quot;/borrow/release/car_models&quot;,        data: {&apos;series_code&apos;: $(this).attr(&apos;data-code&apos;)},        dataType: &quot;json&quot;,        beforeSend: function () {            loading_flag = true;        },        success: function (data) {            loading_flag = false;            $(&quot;#choose-model &gt; .choose-box&quot;).html(&quot;&quot;);            $.each(data, function (k, v) {                $(&quot;#choose-model &gt; .choose-box&quot;).append(&quot;&lt;div class=cont-tit&gt;&quot; + v.year + &apos;款&apos; + &quot;&lt;/div&gt;&quot;);                $.each(v.models, function(k, v) {                    var m = $(&apos;&lt;div class=&quot;choose-cont&quot; data-code=&quot;&apos; + v.code + &apos;&quot; data-name=&quot;&apos; + v.en_name + &apos;&quot;&gt;&apos; + v.en_name + &quot;&lt;/div&gt;&quot;);                    $(&quot;#choose-model &gt; .choose-box&quot;).append(m);                })            });        },        error: function (data) {        },        fail: function (data) {        }    })});$(&quot;#choose-model&quot;).on(&quot;click&quot;, &quot;.choose-box &gt; .choose-cont&quot;, function () {    $(&quot;#choose-model &gt; .choose-box &gt; .choose-cont&quot;).removeClass(&quot;active&quot;);    $(this).addClass(&quot;active&quot;);    if ($(&quot;#choose-model &gt; .choose-box &gt; .choose-cont.active&quot;).length === 1) {        $(&quot;#save-car&quot;).prop(&quot;disabled&quot;, false)    }});$(&quot;#save-car&quot;).on(&quot;click&quot;, function () {    var car_brand = $(&apos;#choose-brand &gt; .choose-box &gt; .choose-cont.active&apos;).text(),        car_series = $(&quot;#choose-series &gt; .choose-box &gt; .choose-cont.active&quot;).text(),        car_model = $(&quot;#choose-model &gt; .choose-box &gt; .choose-cont.active&quot;).text();    $(&quot;#carModal&quot;).modal(&quot;hide&quot;);    $(&quot;#brand&quot;).val(car_brand).blur();    $(&quot;#brand-model&quot;).val(car_series).blur();    $(&quot;#car-model&quot;).val(car_model).blur();    $(&quot;#select-car&quot;).off(&quot;focus&quot;, &quot;input&quot;);    $(&quot;#select-car&quot;).on(&quot;focus&quot;, &apos;input&apos;, function(){        $(&apos;#carModal&apos;).modal(&apos;show&apos;)    })});</code></pre><p>如果我是刚接手这个项目的码农话，看到这个代码简直要掀桌(ノ=Д=)ノ┻━┻！！！估计就算自己写的过几个月也看不懂了。<br>是时候祭出vue了！！！</p><h3 id="用-Vue-js重写"><a href="#用-Vue-js重写" class="headerlink" title="用 Vue.js重写"></a>用 Vue.js重写</h3><p>过了一遍vue的官方文档，发现有以下几个问题需要解决：</p><ol><li><p>解决tornado 和 vue expression 的冲突</p><p> 因为我们用的是tornado，前端不仅有tornado render来的数据，还有vue的数据，如果都用<code>{{ }}</code>会造成冲突的。google+stackoverflow了一波，发现可以改写vue expression的全局配置。</p><pre><code>Vue.config.delimiters = [&apos;${&apos;, &apos;}&apos;]</code></pre><p> 将vue expression 改写成<code>${ }</code>。</p><p> <a href="http://vuejs.org/api/#delimiters。" target="_blank" rel="noopener">http://vuejs.org/api/#delimiters。</a></p></li><li><p>第二个问题就是vue 内部如何传值</p><p> 官方例子中给了我们答案，直接 <code>this.foo = bar</code>就可以改变data里的数据了，简直方便的不要不要的</p><p> <a href="http://vuejs.org/examples/commits.html" target="_blank" rel="noopener">http://vuejs.org/examples/commits.html</a></p></li></ol><p>看看vue.js 的代码，</p><ol><li>改写全局配置，用<code>${ }</code>代替默认的<code>{{ }}</code>expression</li><li>设置loading_flag防止多次ajax请求</li><li><p>新建一个vue的实例，里面包含6条数据和5个方法，他们必须在<code>#select-car</code>那个div里面，否则不能解析</p><ul><li>brand_items, series_items, model_items 用来保存后端传来的json数据</li><li>chosen_brand, chosen_series, chosen_model 用来保存用户当前选择的数据</li><li>show_modal 方法就是jQuery版本中的select-car事件，请求car_brands数据，传给brand_items，其他的方法也类似</li></ul></li></ol><pre><code>Vue.config.delimiters = [&apos;${&apos;, &apos;}&apos;];var loading_flag = false;var vue_show = new Vue({    el: &apos;#select-car&apos;,    data: {        brand_items: &apos;&apos;,        series_items: &apos;&apos;,        model_items: &apos;&apos;,        chosen_brand: &apos;&apos;,        chosen_series: &apos;&apos;,        chosen_model: &apos;&apos;    },    methods: {        show_modal: function () {            $(&apos;#carModal&apos;).modal(&apos;show&apos;);            var self = this;            $.ajax({                url: &quot;/common/car_brands&quot;,                dataType: &quot;json&quot;,                success: function(data){                    self.brand_items = sort_brands(data);                }            })        },        select_brand: function (e) {            var self = this;            if (loading_flag == true) {                return false            }            var $target = $(e.target);            self.chosen_brand = $target.attr(&apos;data-name&apos;);            loading_flag = true;            $.ajax({                url: &quot;/common/car_series&quot;,                data: {&apos;brand_code&apos;: $target.attr(&apos;data-code&apos;)},                dataType: &quot;json&quot;            }).done( function (data) {                self.model_items=[];                self.series_items = sort_series(data);                self.chosen_series = &apos;&apos;;                self.chosen_model = &apos;&apos;;            }).always(function (data) {                loading_flag = false            });        },        select_series: function (e) {            var self = this;            if (loading_flag == true) {                return false            }            var $target = $(e.target);            self.chosen_series = $target.attr(&apos;data-name&apos;);            loading_flag = true;            $.ajax({                url: &quot;/common/car_models&quot;,                data: {&apos;series_code&apos;: $target.attr(&apos;data-code&apos;)},                dataType: &quot;json&quot;            }).done( function (data) {                self.model_items = sort_models(data);                self.chosen_model = &apos;&apos;;            }).always(function (data) {                loading_flag = false            });        },        select_model: function (e) {            var self = this;            self.chosen_model = $(e.target).attr(&apos;data-name&apos;);        },        scroll_brands: function (e) {            var s = $(e.target).html(),                t = $(&quot;#choose-brand .choose-box .cont-tit[data-name=&quot; + s.toUpperCase() + &quot;]&quot;);            t.length &amp;&amp; t.parent().animate({scrollTop: t.parent().scrollTop() + (t.offset().top - t.parent().offset().top)})        }    }});</code></pre><p>从vue js 中可以看出逻辑清晰，数据和方法显示直观，几乎没什么html代码，因为都写在html页面中了，再来看看html中的vue如何写</p><ol><li>vue 根据<code>el: &#39;#select-car&#39;</code>来判断这个div是不是vue</li><li>input 框绑定了<code>show_modal</code>的click事件，<code>{{ form.car_model }}</code>是tornado 传来的别的数据 和vue无关，不要在意</li><li><code>字母列表</code>用<code>v-for</code>方法循环了<code>brand_items</code>，将左侧的字母render出来，并绑定了<code>scroll_brands</code> click事件</li><li><code>品牌列表</code>用<code>template v-for</code>方法循环了<code>brand_items</code>，用<code>v-bind:class</code>写个三元表达式来判断是不是被选中。<code>template v-for</code>下还有第二层循环<code>v-for</code>，他绑定了<code>select_brand</code>的click事件</li><li><code>车系列表</code>、<code>车型列表</code>与<code>品牌列表</code>类似</li><li><code>确定</code>button 用<code>:disabled</code>写个三元表达式来判断是否选了model，以激活<code>确定</code>button</li></ol><p>这里说下<code>template v-for</code>和<code>v-for</code> 的区别：</p><ul><li><code>v-for</code>只循环自身，不循环别的元素</li><li><code>template v-for</code>循环包裹着的所有元素</li></ul><pre><code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;select-car&quot; class=&quot;select&quot;&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;input type=&quot;text&quot; class=&quot;form-control&quot; name=&quot;car_model&quot; id=&quot;car-model&quot; placeholder=&quot;点击选择车型&quot;</span><br><span class="line">           autocomplete=&quot;off&quot; readonly value=`&#123;&#123; form.car_model &#125;&#125;` style=&quot;cursor: pointer&quot; @click=&quot;show_modal&quot;&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Modal --&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;div class=&quot;open-tit&quot;&gt;请选择品牌&lt;/div&gt;</span><br><span class="line">    &lt;ul class=&quot;col-xs-1 brand-cata&quot;&gt;</span><br><span class="line">        &lt;!--字母列表--&gt;</span><br><span class="line">        &lt;li v-for=&quot;item in brand_items&quot; @click=&quot;scroll_brands&quot;&gt;</span><br><span class="line">            $&#123; item.cata &#125;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;div class=&quot;col-xs-10 choose-box&quot;&gt;</span><br><span class="line">        &lt;!--品牌列表--&gt;</span><br><span class="line">        &lt;template v-for=&quot;item in brand_items&quot;&gt;</span><br><span class="line">            &lt;div class=cont-tit data-name=&quot;$&#123; item.cata &#125;&quot;&gt;</span><br><span class="line">                $&#123; item.cata &#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;choose-cont&quot; v-bind:class=&quot;[chosen_brand==b.en_name ? &apos;active&apos; : &apos;&apos;]&quot; data-code=&quot;$&#123; b.brand_code &#125;&quot; data-name=&quot;$&#123; b.en_name &#125;&quot;</span><br><span class="line">                 v-for=&quot;b in item.brands&quot; @click=&quot;select_brand&quot;&gt;</span><br><span class="line">                $&#123; b.en_name &#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;div class=&quot;open-tit&quot;&gt;请选择车系&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;choose-box&quot;&gt;</span><br><span class="line">        &lt;!--车系列表--&gt;</span><br><span class="line">        &lt;div class=&quot;cont-default&quot; data-code=&quot;&quot; data-name=&quot;&quot; v-bind:class=&quot;[chosen_brand ? &apos;none&apos; : &apos;&apos;]&quot;&gt;请先选择品牌&lt;/div&gt;</span><br><span class="line">        &lt;template v-for=&quot;item in series_items&quot;&gt;</span><br><span class="line">            &lt;div class=cont-tit&gt;$&#123; item.factory &#125;&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;choose-cont&quot; v-bind:class=&quot;[chosen_series==s.en_name ? &apos;active&apos; : &apos;&apos;]&quot; data-code=&quot;$&#123; s.series_code &#125;&quot; data-name=&quot;$&#123; s.en_name &#125;&quot;</span><br><span class="line">                 v-for=&quot;s in item.series&quot; @click=&quot;select_series&quot;&gt;</span><br><span class="line">                $&#123; s.en_name &#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;div class=&quot;open-tit&quot;&gt;请选择车型&lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;choose-box&quot;&gt;</span><br><span class="line">        &lt;!--车型列表--&gt;</span><br><span class="line">        &lt;div class=&quot;cont-default&quot; data-code=&quot;&quot; data-name=&quot;&quot; v-bind:class=&quot;[chosen_series ? &apos;none&apos; : &apos;&apos;]&quot;&gt;请先选择车系&lt;/div&gt;</span><br><span class="line">        &lt;template v-for=&quot;item in model_items&quot;&gt;</span><br><span class="line">            &lt;div class=cont-tit&gt;$&#123; item.year + &apos;款&apos; &#125;&lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;choose-cont&quot; v-bind:class=&quot;[chosen_model==m.en_name ? &apos;active&apos; : &apos;&apos;]&quot; data-code=&quot;$&#123; m.code &#125;&quot; data-name=&quot;$&#123; m.en_name &#125;&quot;</span><br><span class="line">                    v-for=&quot;m in item.models&quot; @click=&quot;select_model&quot;&gt;</span><br><span class="line">                $&#123; m.en_name &#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    ...</span><br><span class="line">    &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; id=&quot;save-car&quot; :disabled=&quot;chosen_model ? false : true&quot;&gt;确定&lt;/button&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>Vue.js 仅仅是MVVM中的V层，他设计简单，学习周期短，可以快速投入到单页面中</li><li>指令和组件分很清晰，有自己的视图和数据逻辑</li><li>有更好的性能，没有脏检查，并且非常非常容易优化</li></ul><h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><ul><li>Vue.js官方 <a href="http://vuejs.org/" target="_blank" rel="noopener">http://vuejs.org/</a></li><li>CTO大大的强力助攻，和这么多优秀的小伙伴一起共事简直太棒了~</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近工作中的一个小项目需要做一个车辆信息选择框的三级联动，有点类似省市县的三级联动，下一级依赖上一级的数据。最后的效果是这样&lt;br&gt;&lt;img src=&quot;http://7xi9tp.com1.z0.glb.clouddn.com/car_selector.png&quot; alt=&quot;car_selector&quot;&gt;&lt;br&gt;因为这一块的代码业务逻辑相当复杂，采用jQuery写的话代码量有点大，而且会把html的代码写在js文件里，不易于阅读和后期维护，所以CTO大大建议用Vue.js来重写。&lt;/p&gt;
&lt;h3 id=&quot;思考过程&quot;&gt;&lt;a href=&quot;#思考过程&quot; class=&quot;headerlink&quot; title=&quot;思考过程&quot;&gt;&lt;/a&gt;思考过程&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;首先是爬取车辆信息的数据，找了一家信息比较全的相关平台，开始了爬虫之旅，待有空写下爬虫的思考，这里略过&lt;/li&gt;
&lt;li&gt;拿到大概2万多条数据后，写一个pipeline整理好数据并写入自己的数据库，数据分为3类：品牌、系列、车型，存入3张表里，分别命名为car_brands, car_series, car_models，哦了～有了数据就可以动手了&lt;/li&gt;
&lt;li&gt;后端写好三个handler逻辑，将数据以json的方式传给前端&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Frontend" scheme="https://morningchen.com/categories/Frontend/"/>
    
      <category term="Vue" scheme="https://morningchen.com/categories/Frontend/Vue/"/>
    
    
      <category term="JavaScript" scheme="https://morningchen.com/tags/JavaScript/"/>
    
      <category term="Tornado" scheme="https://morningchen.com/tags/Tornado/"/>
    
      <category term="Vue" scheme="https://morningchen.com/tags/Vue/"/>
    
      <category term="jQuery" scheme="https://morningchen.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>写css遇到的问题</title>
    <link href="https://morningchen.com/2015/11/03/css-notes/"/>
    <id>https://morningchen.com/2015/11/03/css-notes/</id>
    <published>2015-11-03T11:12:41.000Z</published>
    <updated>2018-09-27T03:49:49.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="标签的伪类样式"><a href="#标签的伪类样式" class="headerlink" title="标签的伪类样式"></a>标签的伪类样式</h3><ul><li>a:link： 未访问链接</li><li>a:visited： 已访问链接</li><li>a:focus： 正在访问的链接</li><li>a:active： 激活时（链接获得焦点时）链接的颜色</li><li>a:hover： 鼠标移到链接上时</li></ul><h3 id="文字溢出省略"><a href="#文字溢出省略" class="headerlink" title="文字溢出省略"></a>文字溢出省略</h3><pre><code>.flatpages-articles-col-left &gt; ul &gt; li &gt; a {    color: #3492e9;    line-height: 50px;    font-size: 16px;    width: 300px;    height: 40px;    overflow: hidden;    text-overflow: ellipsis;    white-space: nowrap;    display: inline-block;}</code></pre><a id="more"></a><h3 id="文章内滚动"><a href="#文章内滚动" class="headerlink" title="文章内滚动"></a>文章内滚动</h3><pre><code>.flatpages-articles-col-right {    border-left: 1px solid #d2d2d2;    height: 500px;    overflow: scroll;}</code></pre><h3 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h3><pre><code>.flatpages-articles-title {    width: 1004px;    height: 60px;    background: #0197f3;    position: relative;    margin-left: -28px;    margin-top: 26px;    -moz-box-shadow: 0 2px 5px rgba(0, 0, 0, .25);    -webkit-box-shadow: 0 2px 5px rgba(0, 0, 0, .25);    box-shadow: 0 2px 5px rgba(0, 0, 0, .25);}</code></pre><h3 id="三角"><a href="#三角" class="headerlink" title="三角"></a>三角</h3><pre><code>.flatpages-articles-title:before {    width: 0;    height: 0;    border-top: 12px solid #3492e9;    border-left: 12px solid transparent;    content: &apos;&apos;;    top: 60px;    position: absolute;}</code></pre><h3 id="透明蒙板"><a href="#透明蒙板" class="headerlink" title="透明蒙板"></a>透明蒙板</h3><pre><code>.flatpages-join-mask {    height: 710px;    width: 980px;    background-color: rgba(255, 255, 255, 0.6);    border-radius: 20px;    padding-top: 42px;}</code></pre><p>适配IE8，IE8中内容不透明，蒙板透明，记得在内容中加上position: relative</p><pre><code>.flatpages-about-mask {    background: #fff;    background-color: rgba(255, 255, 255, 0.6);    filter: progid:DXImageTransform.Microsoft.Alpha(opacity=60);    -ms-filter: &quot;progid:DXImageTransform.Microsoft.Alpha(opacity=60)&quot;;    color: #fff;    border-radius: 20px;    -moz-border-radius: 20px;    -webkit-border-radius: 20px;    padding: 40px 60px;    height: 600px;    margin-top: 20px;}</code></pre><h3 id="伪元素下划线"><a href="#伪元素下划线" class="headerlink" title="伪元素下划线"></a>伪元素下划线</h3><pre><code>.flatpages-join-info &gt; span:before {    content: &quot; &quot;;    position: absolute;    width: 360px;    height: 1px;    background-color: #d2d2d2;    bottom: 0;    left: 10px;}.flatpages-join-info &gt; span:after {    content: &quot; &quot;;    position: absolute;    bottom: 0;    left: 10px;    width: 100px;    height: 1px;    background-color: #00a1ea;}</code></pre><h3 id="各种图形"><a href="#各种图形" class="headerlink" title="各种图形"></a>各种图形</h3><ul><li><a href="https://css-tricks.com/examples/ShapesOfCSS/" target="_blank" rel="noopener">The Shapes of CSS</a></li></ul><h3 id="图片灰度切换"><a href="#图片灰度切换" class="headerlink" title="图片灰度切换"></a>图片灰度切换</h3><p>例子 <a href="http://insights.thoughtworkers.org/frontend-backend/" target="_blank" rel="noopener">http://insights.thoughtworkers.org/frontend-backend/</a></p><pre><code>img.gray {    -webkit-filter: grayscale(100%);    -o-filter: grayscale(100%);    filter: gray;    filter: grayscale(100%);    -webkit-transition: all 0.6s;    -moz-transition: all 0.6s;    -ms-transition: all 0.6s;    -o-transition: all 0.6s;    transition: all 0.6s;}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;标签的伪类样式&quot;&gt;&lt;a href=&quot;#标签的伪类样式&quot; class=&quot;headerlink&quot; title=&quot;标签的伪类样式&quot;&gt;&lt;/a&gt;标签的伪类样式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;a:link： 未访问链接&lt;/li&gt;
&lt;li&gt;a:visited： 已访问链接&lt;/li&gt;
&lt;li&gt;a:focus： 正在访问的链接&lt;/li&gt;
&lt;li&gt;a:active： 激活时（链接获得焦点时）链接的颜色&lt;/li&gt;
&lt;li&gt;a:hover： 鼠标移到链接上时&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;文字溢出省略&quot;&gt;&lt;a href=&quot;#文字溢出省略&quot; class=&quot;headerlink&quot; title=&quot;文字溢出省略&quot;&gt;&lt;/a&gt;文字溢出省略&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;.flatpages-articles-col-left &amp;gt; ul &amp;gt; li &amp;gt; a {
    color: #3492e9;
    line-height: 50px;
    font-size: 16px;
    width: 300px;
    height: 40px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    display: inline-block;
}
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Frontend" scheme="https://morningchen.com/categories/Frontend/"/>
    
      <category term="CSS" scheme="https://morningchen.com/categories/Frontend/CSS/"/>
    
    
      <category term="CSS" scheme="https://morningchen.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>Two Scoops of Django 1.8 学习笔记七</title>
    <link href="https://morningchen.com/2015/09/26/Two-Scoops-of-Django-1-8-notes-7/"/>
    <id>https://morningchen.com/2015/09/26/Two-Scoops-of-Django-1-8-notes-7/</id>
    <published>2015-09-26T08:45:28.000Z</published>
    <updated>2018-09-27T03:56:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="12-表单通用模式"><a href="#12-表单通用模式" class="headerlink" title="12. 表单通用模式"></a>12. 表单通用模式</h2><p>Django的表单强大、灵活、扩展性强、健全。因此，Django admin 和 CBVs广泛的使用了表单。<br>事实上，所有重大的Django API 框架用ModelForms 或者类似的实现来作为它们校验的一部分。</p><p>结合表单、模型、视图让我们用较少的努力做了较多的事。学习曲线是值得的：<br>一旦你学会了使用这些组件流畅的进行工作，你会发现，Django提供了以惊人的速度创造数量惊人的有用且稳定功能的能力</p><p>这一章明确讲解了Django最好的部分之一：forms, models, CBVs之间的协同工作。<br>它覆盖了五个通用表单模式。每个Django开发者都应该掌握<br><a id="more"></a></p><h3 id="12-1-模式一：简易的ModelForm使用默认校验"><a href="#12-1-模式一：简易的ModelForm使用默认校验" class="headerlink" title="12.1 模式一：简易的ModelForm使用默认校验"></a>12.1 模式一：简易的ModelForm使用默认校验</h3><p>如果你还记得，用CBVs就能实现表单的增加和修改，而且只需要几行代码：</p><pre><code># flavors/views.pyfrom django.views.generic import CreateView, UpdateViewfrom braces.views import LoginRequiredMixinfrom .models import Flavorclass FlavorCreateView(LoginRequiredMixin, CreateView):    model = Flavor    fields = (&apos;title&apos;, &apos;slug&apos;, &apos;scoops_remaining&apos;)class FlavorUpdateView(LoginRequiredMixin, UpdateView):    model = Flavor    fields = (&apos;title&apos;, &apos;slug&apos;, &apos;scoops_remaining&apos;)</code></pre><p>总结一下我们在这儿是如何使用默认校验的：</p><ul><li>将Flavor作为模型分配到FlavorCreateView和FlavorUpdateView</li><li>这两个视图根据Falvor模型自动生成了一个ModelForm</li><li>这些ModelForm依赖Falvor模型中默认的字段校验规则</li></ul><p>Django提供了很多不错的数据校验，但在实践中还远远不够。<br>我们认识到了这一点，因此将它作为第一步，下一模式中将会演示如何创建一个自定义的字段校验器</p><h3 id="12-2-模式二：ModelForm中自定义表单字段校验"><a href="#12-2-模式二：ModelForm中自定义表单字段校验" class="headerlink" title="12.2 模式二：ModelForm中自定义表单字段校验"></a>12.2 模式二：ModelForm中自定义表单字段校验</h3><p>如果我们想要确定dessert应用中的title字段是否是以<code>Tasty</code>开头该怎么办。可以用简单的自定义字段校验器解决。</p><p>想象一下这个例子：我们的项目中有两个不同的dessert相关的模型：一个描述冰淇淋口味的Flavor模型和一个描述不同种类奶昔的Milkshake模型。假设它们都有title字段。</p><p>为了校验所有可编辑模型的title字段，我们先创建一个validators.py模块</p><pre><code># core/validators.pyfrom django.core.exceptions import ValidationErrordef validate_tasty(value):    &quot;&quot;&quot;Raise a ValidationError if the value doesn&apos;t start with the        word &apos;Tasty&apos;.    &quot;&quot;&quot;    if not value.startswith(u&quot;Tasty&quot;):        msg = u&quot;Must start with Tasty&quot;        raise ValidationError(msg)</code></pre><p>这是一个函数校验器，如果不能通过测试则抛出错误。我们的validate_tasty()函数校验器看起来就是一个简单的字符串检查，而在实践中，表单字段校验器相当复杂。</p><p>为了在两个不同的dessert模型中都能使用到validate_tasty()，我们会把这个校验器放在一个叫做TastyTitleAbstractModel的抽象模型中，我们就能在整个项目中使用了。</p><p>假设我们的Flavor模型和Milkshake模型在各自独立的应用中，把校验器放在任一个应用中都不合理。因此，我们把TastyTitleAbstractModel放在<code>core/models.py</code>核心模块中。</p><pre><code># core/models.pyfrom django.db import modelsfrom .validators import validate_tastyclass TastyTitleAbstractModel(models.Model):    title = models.CharField(max_length=255, validators=[validate_tasty])    class Meta:        abstract = True</code></pre><p>如我们所愿，代码最后两行让TastyTitleAbstractModel成为了抽象模型。</p><p>我们修改一下 flavor/models.py 的原始代码，把TastyTitleAbstractModel作为父类：</p><pre><code># flavors/models.pyfrom django.core.urlresolvers import reversefrom django.db import modelsfrom core.models import TastyTitleAbstractModelclass Flavor(TastyTitleAbstractModel):    slug = models.SlugField()    scoops_remaining = models.IntegerField(default=0)    def get_absolute_url(self):        return reverse(&quot;flavors:detail&quot;, kwargs={&quot;slug&quot;: self.slug})</code></pre><p>它可以用到Falvor模型中，也可以用到任何一个与tasty相关的模型中，<br>比如一个描述华夫饼的WaffleCone模型或者一个描述蛋糕的Cake模型。<br>如果他们的title字段不是以<code>Tasty</code>开头的，都会抛出一个校验错误。</p><p>现在，我们来探讨一下可能存在你脑海中的两个疑问：</p><ul><li>如果我们只想在表单中使用validate_tasty()怎么办？</li><li>除了title字段，我们还想在别的字段中使用怎么办？</li></ul><p>那就需要利用这个校验器来创建一个自定义的FalvorForm：</p><pre><code># flavors/forms.pyfrom django import formsfrom core.validators import validate_tastyfrom .models import Flavorclass FlavorForm(forms.ModelForm):    def __init__(self, *args, **kwargs):        super(FlavorForm, self).__init__(*args, **kwargs)        self.fields[&quot;title&quot;].validators.append(validate_tasty)        self.fields[&quot;slug&quot;].validators.append(validate_tasty)    class Meta:        model = Flavor</code></pre><p>这个模式最赞的地方是我们没有改变校验器的原始代码，仅仅只是将它导入，并且在新的位置使用了它<br>给这个视图附上自定义表单是我们的下一步，GCBVs中的edit视图会基于视图的模型属性自动生成ModelForm，我们将通过定制的FlavorForm来覆盖默认的。</p><pre><code># flavors/views.pyfrom django.contrib import messagesfrom django.views.generic import CreateView, UpdateView, DetailViewfrom braces.views import LoginRequiredMixinfrom .models import Flavorfrom .forms import FlavorFormclass FlavorActionMixin(object):    model = Flavor    fields = (&apos;title&apos;, &apos;slug&apos;, &apos;scoops_remaining&apos;)    @property    def success_msg(self):        return NotImplemented    def form_valid(self, form):        messages.info(self.request, self.success_msg)        return super(FlavorActionMixin, self).form_valid(form)class FlavorCreateView(LoginRequiredMixin, FlavorActionMixin,                            CreateView):    success_msg = &quot;created&quot;    # Explicitly attach the FlavorForm class    form_class = FlavorFormclass FlavorUpdateView(LoginRequiredMixin, FlavorActionMixin,                            UpdateView):    success_msg = &quot;updated&quot;    # Explicitly attach the FlavorForm class    form_class = FlavorFormclass FlavorDetailView(DetailView):    model = Flavor</code></pre><p>现在FlavorCreateView和FlavorUpdateView这两个视图使用新的FlavorForm来校验传入数据。</p><h3 id="12-3-模式三：覆写校验的clean阶段"><a href="#12-3-模式三：覆写校验的clean阶段" class="headerlink" title="12.3 模式三：覆写校验的clean阶段"></a>12.3 模式三：覆写校验的clean阶段</h3><p>我们来讨论一下有趣的校验使用情况：</p><ul><li>多字段校验</li><li>校验涉及已验证的数据库中的现有数据</li></ul><p>这两种场景都需要根据自定义的校验逻辑覆写clean()和clean_field_name()方法</p><p>在默认的校验器和自定义的字段校验器运行之后，Django提供了第二阶段的校验，那就是clean()和clean_field_name()方法。你可能想知道为什么Django提供了更多的钩子进行校验，下是我们最喜欢的原因：</p><ol><li>由于clean()不是针对任何一个特定的字段，clean()方法是用来验证两个或更多的字段互相冲突的场所，</li><li>clean 阶段是一个针对持久类数据校验的更好的场所，由于数据已经有了一些验证，你就不会将数据库的循环浪费在不必要的查询中。</li></ol><p>我们通过另一个例子来探讨一下，也许你想实现一个冰淇淋的订购表单，用户可以指定想要的口味，配料。然后来我们的店里取走。由于我们需要给顾客展示库存不够的情况，我们会用到clean_slug()方法：</p><pre><code># flavors/forms.pyfrom django import formsfrom flavors.models import Flavorclass IceCreamOrderForm(forms.Form):    &quot;&quot;&quot;Normally done with forms.ModelForm. But we use forms.Form here        to demonstrate that these sorts of techniques work on every        type of form.    &quot;&quot;&quot;    slug = forms.ChoiceField(&quot;Flavor&quot;)    toppings = forms.CharField()    def __init__(self, *args, **kwargs):        super(IceCreamOrderForm, self).__init__(*args,                    **kwargs)        # We dynamically set the choices here rather than        # in the flavor field definition. Setting them in        # the field definition means status updates won&apos;t        # be reflected in the form without server restarts.        self.fields[&quot;slug&quot;].choices = [            (x.slug, x.title) for x in Flavor.objects.all()        ]        # NOTE: We could filter by whether or not a flavor        #       has any scoops, but this is an example of        #       how to use clean_slug, not filter().    def clean_slug(self):        slug = self.cleaned_data[&quot;slug&quot;]        if Flavor.objects.get(slug=slug).scoops_remaining &lt;= 0:            msg = u&quot;Sorry, we are out of that flavor.&quot;            raise forms.ValidationError(msg)        return slug</code></pre><p>对于由HTML驱动的视图，如果库存不够了就会抛出Sorry, we are out of that flavor的错误。简直方便的不要不要的。</p><p>现在想象一下，如果我们接到了客户投诉说巧克力太多。是的，这是愚蠢的也不可能发生的，我们只是用这个虚构的例子来为我们的知识点举例。</p><pre><code># attach this code to the previous exampledef clean(self):    cleaned_data = super(IceCreamOrderForm, self).clean()    slug = cleaned_data.get(&quot;slug&quot;, &quot;&quot;)    toppings = cleaned_data.get(&quot;toppings&quot;, &quot;&quot;)    # Silly &quot;too much chocolate&quot; validation example    if u&quot;chocolate&quot; in slug.lower() and \           u&quot;chocolate&quot; in toppings.lower():        msg = u&quot;Your order has too much chocolate.&quot;        raise forms.ValidationError(msg)    return cleaned_data</code></pre><h3 id="12-4-模式四：破解表单字段-2-CBVs-2-Forms-1-Model"><a href="#12-4-模式四：破解表单字段-2-CBVs-2-Forms-1-Model" class="headerlink" title="12.4 模式四：破解表单字段(2 CBVs, 2 Forms, 1 Model)"></a>12.4 模式四：破解表单字段(2 CBVs, 2 Forms, 1 Model)</h3><p>这一节，我们会深入研究一个模型中对应两个视图/表单的情况。我们将会破解表单来创作一个自定义行为的表单。</p><p>一个商店列表的例子，我们希望这些商店的信息能尽快的存到系统中，但是之后希望还能添加例如电话号码和街道地址的数据。下面是我们的冰淇淋商店IceCreamStore模型：</p><pre><code># stores/models.pyfrom django.core.urlresolvers import reversefrom django.db import modelsclass IceCreamStore(models.Model):    title = models.CharField(max_length=100)    block_address = models.TextField()    phone = models.CharField(max_length=20, blank=True)    description = models.TextField(blank=True)    def get_absolute_url(self):        return reverse(&quot;store_detail&quot;, kwargs={&quot;pk&quot;: self.pk})</code></pre><p>默认生成的ModelForm会强制用户输入title和block_address字段，但是允许用户不填phone和description字段</p><p>我们通过下面的表单来实现商店信息的更新：</p><pre><code># stores/forms.py# Call phone and description from the self.fields dict-like objectfrom django import formsfrom .models import IceCreamStoreclass IceCreamStoreUpdateForm(forms.ModelForm):    class Meta:        model = IceCreamStore    def __init__(self, *args, **kwargs):        # Call the original __init__ method before assigning        # field overloads        super(IceCreamStoreUpdateForm, self).__init__(*args,                            **kwargs)        self.fields[&quot;phone&quot;].required = True        self.fields[&quot;description&quot;].required = True</code></pre><p>一个重要的知识点需要记住！！！Django的表单就是python的类。它们可以作为对象来实现，它们能继承自其他类，也可以当作父类。<br>因此，我们可以这样写我们的两个表单：</p><pre><code># stores/forms.pyfrom django import formsfrom .models import IceCreamStoreclass IceCreamStoreCreateForm(forms.ModelForm):    class Meta:        model = IceCreamStore        fields = (&quot;title&quot;, &quot;block_address&quot;, )class IceCreamStoreUpdateForm(IceCreamStoreCreateForm):    def __init__(self, *args, **kwargs):        super(IceCreamStoreUpdateForm,                self).__init__(*args, **kwargs)        self.fields[&quot;phone&quot;].required = True        self.fields[&quot;description&quot;].required = True    class Meta(IceCreamStoreCreateForm.Meta):        # show all the fields!        fields = (&quot;title&quot;, &quot;block_address&quot;, &quot;phone&quot;,                &quot;description&quot;, )</code></pre><blockquote><p>警告！！！使用Meta.fields！！不要使用Meta.exclude！！！</p></blockquote><p>最后，我们来写对应的CBVs视图：</p><pre><code># stores/viewsfrom django.views.generic import CreateView, UpdateViewfrom .forms import IceCreamStoreCreateFormfrom .forms import IceCreamStoreUpdateFormfrom .models import IceCreamStoreclass IceCreamCreateView(CreateView):    model = IceCreamStore    form_class = IceCreamStoreCreateFormclass IceCreamUpdateView(UpdateView):    model = IceCreamStore    form_class = IceCreamStoreUpdateForm</code></pre><h3 id="12-5-模式五：可复用的搜索mixin视图"><a href="#12-5-模式五：可复用的搜索mixin视图" class="headerlink" title="12.5 模式五：可复用的搜索mixin视图"></a>12.5 模式五：可复用的搜索mixin视图</h3><p>在这个例子中，我们将会了解如何在两个对应不同模型的视图中复用一个搜索表单。<br>假设这两个模型都有一个叫做title的字段，这个例子演示了如何在Flavor模型和IceCreamStore模型中使用单一的CBV视图提供简单的搜索功能。</p><p>我们先给视图创建一个简单的mixin搜索：</p><pre><code># core/views.pyclass TitleSearchMixin(object):    def get_queryset(self):        # Fetch the queryset from the parent&apos;s get_queryset        queryset = super(TitleSearchMixin, self).get_queryset()        # Get the q GET parameter        q = self.request.GET.get(&quot;q&quot;)        if q:            # return a filtered queryset            return queryset.filter(title__icontains=q)        # No q is specified so we return queryset        return queryset</code></pre><p>接下来就是让它工作在Flavor和IceCreamUpdateView视图中：</p><pre><code># add to flavors/views.pyfrom django.views.generic import ListViewfrom core.views import TitleSearchMixinfrom .models import Flavorclass FlavorListView(TitleSearchMixin, ListView):    model = Flavor# add to stores/views.pyfrom django.views.generic import ListViewfrom core.views import TitleSearchMixinfrom .models import Storeclass IceCreamStoreListView(TitleSearchMixin, ListView):    model = Store</code></pre><p>然后给每个ListView定义HTML：</p><pre><code>&lt;form action=&quot;&quot; method=&quot;GET&quot;&gt;    &lt;input type=&quot;text&quot; name=&quot;q&quot; /&gt;    &lt;button type=&quot;submit&quot;&gt;search&lt;/button&gt;&lt;/form&gt;&lt;form action=&quot;&quot; method=&quot;GET&quot;&gt;    &lt;input type=&quot;text&quot; name=&quot;q&quot; /&gt;    &lt;button type=&quot;submit&quot;&gt;search&lt;/button&gt;&lt;/form&gt;</code></pre><p>Mixins是复用代码很好的方式，但是在一个类中使用太多的mixins会制造出非常难维护代码。<br>一如既往的保证代码简洁就行</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;12-表单通用模式&quot;&gt;&lt;a href=&quot;#12-表单通用模式&quot; class=&quot;headerlink&quot; title=&quot;12. 表单通用模式&quot;&gt;&lt;/a&gt;12. 表单通用模式&lt;/h2&gt;&lt;p&gt;Django的表单强大、灵活、扩展性强、健全。因此，Django admin 和 CBVs广泛的使用了表单。&lt;br&gt;事实上，所有重大的Django API 框架用ModelForms 或者类似的实现来作为它们校验的一部分。&lt;/p&gt;
&lt;p&gt;结合表单、模型、视图让我们用较少的努力做了较多的事。学习曲线是值得的：&lt;br&gt;一旦你学会了使用这些组件流畅的进行工作，你会发现，Django提供了以惊人的速度创造数量惊人的有用且稳定功能的能力&lt;/p&gt;
&lt;p&gt;这一章明确讲解了Django最好的部分之一：forms, models, CBVs之间的协同工作。&lt;br&gt;它覆盖了五个通用表单模式。每个Django开发者都应该掌握&lt;br&gt;
    
    </summary>
    
      <category term="Backend" scheme="https://morningchen.com/categories/Backend/"/>
    
      <category term="Django" scheme="https://morningchen.com/categories/Backend/Django/"/>
    
    
      <category term="Django" scheme="https://morningchen.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Two Scoops of Django 1.8 学习笔记六</title>
    <link href="https://morningchen.com/2015/09/25/Two-Scoops-of-Django-1-8-notes-6/"/>
    <id>https://morningchen.com/2015/09/25/Two-Scoops-of-Django-1-8-notes-6/</id>
    <published>2015-09-25T03:34:13.000Z</published>
    <updated>2018-09-27T03:56:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="11-Form-Fundamentals-表单基本原理"><a href="#11-Form-Fundamentals-表单基本原理" class="headerlink" title="11. Form Fundamentals 表单基本原理"></a>11. Form Fundamentals 表单基本原理</h2><p>表单中最重要的事情是校验传入的数据</p><h3 id="11-1-用表单校验传入数据"><a href="#11-1-用表单校验传入数据" class="headerlink" title="11.1 用表单校验传入数据"></a>11.1 用表单校验传入数据</h3><pre><code>import csvimport StringIOfrom django import formsfrom .models import Purchase, Sellerclass PurchaseForm(forms.ModelForm):    class Meta:        model = Purchase    def clean_seller(self):        seller = self.cleaned_data[&quot;seller&quot;]        try:            Seller.objects.get(name=seller)        except Seller.DoesNotExist:            msg = &quot;{0} does not exist in purchase #{1}.&quot;.format(                seller,                self.cleaned_data[&quot;purchase_number&quot;]            )            raise forms.ValidationError(msg)        return sellerdef add_csv_purchases(rows):    rows = StringIO.StringIO(rows)    records_added = 0    errors = []    # Generate a dict per row, with the first CSV row being the keys.    for row in csv.DictReader(rows, delimiter=&quot;,&quot;):        # Bind the row data to the PurchaseForm.        form = PurchaseForm(row)        # Check to see if the row data is valid.        if form.is_valid():            # Row data is valid so save the record.            form.save()            records_added += 1        else:            errors.append(form.errors)    return records_added, errors</code></pre><a id="more"></a><h3 id="11-2-在HTML的表单中使用POST方法"><a href="#11-2-在HTML的表单中使用POST方法" class="headerlink" title="11.2 在HTML的表单中使用POST方法"></a>11.2 在HTML的表单中使用POST方法</h3><pre><code>&lt;form action=&quot;{% raw %}{% url "flavor_add" %}{% endraw %}&quot; method=&quot;POST&quot;&gt;</code></pre><h3 id="11-3-针对需要修改数据的表单使用CSRF保护"><a href="#11-3-针对需要修改数据的表单使用CSRF保护" class="headerlink" title="11.3 针对需要修改数据的表单使用CSRF保护"></a>11.3 针对需要修改数据的表单使用CSRF保护</h3><pre><code>{% raw %}{% csrf_token %}{% endraw %}</code></pre><h4 id="通过AJAX提交数据"><a href="#通过AJAX提交数据" class="headerlink" title="通过AJAX提交数据"></a>通过AJAX提交数据</h4><p>用AJAX的时候也要用到CSRF，你需要设置叫做X-CSRFToken的HTTP header</p><p>第一步，获得csrftoken的cookie</p><pre><code>// using jQueryfunction getCookie(name) {    var cookieValue = null;    if (document.cookie &amp;&amp; document.cookie != &apos;&apos;) {        var cookies = document.cookie.split(&apos;;&apos;);        for (var i = 0; i &lt; cookies.length; i++) {            var cookie = jQuery.trim(cookies[i]);            // Does this cookie string begin with the name we want?            if (cookie.substring(0, name.length + 1) == (name + &apos;=&apos;)) {                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));                break;            }        }    }    return cookieValue;}var csrftoken = getCookie(&apos;csrftoken&apos;);</code></pre><p>还可以通过 <a href="https://github.com/js-cookie/js-cookie/" target="_blank" rel="noopener">https://github.com/js-cookie/js-cookie/</a> 来代替上面的方法</p><pre><code>var csrftoken = Cookies.get(&apos;csrftoken&apos;);</code></pre><p>最后在AJAX请求上设置HTTP头</p><pre><code>function csrfSafeMethod(method) {    // these HTTP methods do not require CSRF protection    return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));}$.ajaxSetup({    beforeSend: function(xhr, settings) {        if (!csrfSafeMethod(settings.type) &amp;&amp; !this.crossDomain) {            xhr.setRequestHeader(&quot;X-CSRFToken&quot;, csrftoken);        }    }});</code></pre><h3 id="11-4-了解如何添加Django表单实例属性"><a href="#11-4-了解如何添加Django表单实例属性" class="headerlink" title="11.4 了解如何添加Django表单实例属性"></a>11.4 了解如何添加Django表单实例属性</h3><pre><code>from django import formsfrom .models import Tasterclass TasterForm(forms.ModelForm):    class Meta:        model = Taster    def __init__(self, *args, **kwargs):        # set the user as an attribute of the form        self.user = kwargs.pop(&apos;user&apos;)        super(TasterForm, self).__init__(*args, **kwargs)</code></pre><p>在设置super()之前，我们把kwargs中的user拿了出来，赋予了self.user，看看view：</p><pre><code>from django.views.generic import UpdateViewfrom braces.views import LoginRequiredMixinfrom .forms import TasterFormfrom .models import Tasterclass TasterUpdateView(LoginRequiredMixin, UpdateView):    model = Taster    form_class = TasterForm    success_url = &quot;/someplace/&quot;    def get_form_kwargs(self):        &quot;&quot;&quot;This method is what injects forms with their keyword arguments.&quot;&quot;&quot;        # grab the current set of form #kwargs        kwargs = super(TasterUpdateView, self).get_form_kwargs()        # Update the kwargs with the user_id        kwargs[&apos;user&apos;] = self.request.user        return kwargs</code></pre><h3 id="11-5-知道表单校验是如何工作的"><a href="#11-5-知道表单校验是如何工作的" class="headerlink" title="11.5 知道表单校验是如何工作的"></a>11.5 知道表单校验是如何工作的</h3><p>调用form.is_valid()的时候，背后发生了这些事情：</p><ol><li>如果表单绑定了数据，form.is_valid()调用form.full_clean()方法</li><li><p>form.full_clean()通过表单字段进行迭代，并且每个字段都验证自身</p><p> a. 数据写入到字段的时候被强制进入到了Python中,通过to_python()方法或者抛出ValidationError异常</p><p> b. 数据的验证依赖具体的字段规则，包括自定义的校验器。失败抛出ValidationError异常</p><p> c. 如果有任何自定义的clean_<field>()方法存在于表单中，在这个时候他们都会被调用</field></p></li><li><p>form.full_clean()执行form.clean()方法</p></li><li><p>如果他是个ModelForm的实例，form._post_clean()做下面的事情：</p><p> a. 给模型实例设置ModelForm数据，而不管form.is_valid()是否是True或者False</p><p> b. 调用模型的clean()方法，作为参考，通过ORM保存模型实例不调用模型的clean()方法</p></li></ol><h4 id="11-5-1-ModelForm-数据先被存到表单中，再存到模型实例中"><a href="#11-5-1-ModelForm-数据先被存到表单中，再存到模型实例中" class="headerlink" title="11.5.1 ModelForm 数据先被存到表单中，再存到模型实例中"></a>11.5.1 ModelForm 数据先被存到表单中，再存到模型实例中</h4><p>在一个ModelForm中，表单数据的存储分为两步：</p><ol><li>首先，表单数据存在表单实例中</li><li>然后，表单数据存在模型实例中</li></ol><p>只有使用form.save()方法，数据才会被存到模型实例中。我们可以利用这种分离作为一个有用的功能。</p><p>举个例子，也许你需要捕捉表单提交失败的细节，储存满足用户的表单数据以及预期的模型实例变化。<br>一个简洁的方式如下，首先我们创建一个表单失败历史的模型：</p><pre><code># core/models.pyfrom django.db import modelsclass ModelFormFailureHistory(models.Model):    form_data = models.TextField()    model_data = models.TextField()</code></pre><p>第二步，我们添加个FlavorActionMixin的类</p><pre><code># flavors/views.pyimport jsonfrom django.contrib import messagesfrom django.core import serializersfrom core.models import ModelFormFailureHistoryclass FlavorActionMixin(object):    @property    def success_msg(self):        return NotImplemented    def form_valid(self, form):        messages.info(self.request, self.success_msg)        return super(FlavorActionMixin, self).form_valid(form)    def form_invalid(self, form):        &quot;&quot;&quot;Save invalid form and model data for later reference.&quot;&quot;&quot;        form_data = json.dumps(form.cleaned_data)        model_data = serializers.serialize(&quot;json&quot;,                    [form.instance])[1:-1]        ModelFormFailureHistory.objects.create(            form_data=form_data,            model_data=model_data        )        return super(FlavorActionMixin,                    self).form_invalid(form)</code></pre><p>如果你还记得，验证不良数据的表单失败后会调用form_invalid()。<br>在这个例子中，干净的表单数据和最后的数据会作为一个ModelFormFailureHistory记录储存在数据库中</p><h3 id="11-6-Form-add-error"><a href="#11-6-Form-add-error" class="headerlink" title="11.6 Form.add_error()"></a>11.6 Form.add_error()</h3><pre><code>from django import formsclass IceCreamReviewForm(forms.Form):    # Rest of tester form goes here    ...    def clean(self):        cleaned_data = super(TasterForm, self).clean()        flavor = cleaned_data.get(&quot;flavor&quot;)        age = cleaned_data.get(&quot;age&quot;)        if flavor == &apos;coffee&apos; and age &lt; 3:            # Record errors that will be displayed later.            msg = u&quot;Coffee Ice Cream is not for Babies.&quot;            self.add_error(&apos;flavor&apos;, msg)            self.add_error(&apos;age&apos;, msg)        # Always return the full collection of cleaned data.        return cleaned_data</code></pre><h4 id="其他有用的表单方法"><a href="#其他有用的表单方法" class="headerlink" title="其他有用的表单方法"></a>其他有用的表单方法</h4><ul><li><a href="https://docs.djangoproject.com/en/1.8/ref/forms/api/#django.forms.Form.errors.as_data" target="_blank" rel="noopener">https://docs.djangoproject.com/en/1.8/ref/forms/api/#django.forms.Form.errors.as_data</a></li><li><a href="https://docs.djangoproject.com/en/1.8/ref/forms/api/#django.forms.Form.errors.as_json" target="_blank" rel="noopener">https://docs.djangoproject.com/en/1.8/ref/forms/api/#django.forms.Form.errors.as_json</a></li><li><a href="https://docs.djangoproject.com/en/1.8/ref/forms/api/#django.forms.Form.has_error" target="_blank" rel="noopener">https://docs.djangoproject.com/en/1.8/ref/forms/api/#django.forms.Form.has_error</a></li><li><a href="https://docs.djangoproject.com/en/1.8/ref/forms/api/#django.forms.Form.non_field_errors" target="_blank" rel="noopener">https://docs.djangoproject.com/en/1.8/ref/forms/api/#django.forms.Form.non_field_errors</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;11-Form-Fundamentals-表单基本原理&quot;&gt;&lt;a href=&quot;#11-Form-Fundamentals-表单基本原理&quot; class=&quot;headerlink&quot; title=&quot;11. Form Fundamentals 表单基本原理&quot;&gt;&lt;/a&gt;11. Form Fundamentals 表单基本原理&lt;/h2&gt;&lt;p&gt;表单中最重要的事情是校验传入的数据&lt;/p&gt;
&lt;h3 id=&quot;11-1-用表单校验传入数据&quot;&gt;&lt;a href=&quot;#11-1-用表单校验传入数据&quot; class=&quot;headerlink&quot; title=&quot;11.1 用表单校验传入数据&quot;&gt;&lt;/a&gt;11.1 用表单校验传入数据&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;import csv
import StringIO

from django import forms

from .models import Purchase, Seller

class PurchaseForm(forms.ModelForm):

    class Meta:
        model = Purchase

    def clean_seller(self):
        seller = self.cleaned_data[&amp;quot;seller&amp;quot;]
        try:
            Seller.objects.get(name=seller)
        except Seller.DoesNotExist:
            msg = &amp;quot;{0} does not exist in purchase #{1}.&amp;quot;.format(
                seller,
                self.cleaned_data[&amp;quot;purchase_number&amp;quot;]
            )
            raise forms.ValidationError(msg)
        return seller

def add_csv_purchases(rows):

    rows = StringIO.StringIO(rows)

    records_added = 0
    errors = []
    # Generate a dict per row, with the first CSV row being the keys.
    for row in csv.DictReader(rows, delimiter=&amp;quot;,&amp;quot;):

        # Bind the row data to the PurchaseForm.
        form = PurchaseForm(row)
        # Check to see if the row data is valid.
        if form.is_valid():
            # Row data is valid so save the record.
            form.save()
            records_added += 1
        else:
            errors.append(form.errors)

    return records_added, errors
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Backend" scheme="https://morningchen.com/categories/Backend/"/>
    
      <category term="Django" scheme="https://morningchen.com/categories/Backend/Django/"/>
    
    
      <category term="Django" scheme="https://morningchen.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Install PostgreSQL on Mac OS</title>
    <link href="https://morningchen.com/2015/09/23/Install-PostgreSQL-on-Mac-OS/"/>
    <id>https://morningchen.com/2015/09/23/Install-PostgreSQL-on-Mac-OS/</id>
    <published>2015-09-23T02:25:15.000Z</published>
    <updated>2018-09-27T03:52:28.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre><code>➜  brew install postgres==&gt; Downloading https://homebrew.bintray.com/bottles/postgresql-9.4.4.yosemite.bottle.tar.######################################################################## 100.0%==&gt; Pouring postgre&lt;kbd&gt;b&lt;/kbd&gt;sql-9.4.4.yosemite.bottle.tar.gz==&gt; CaveatsIf builds of PostgreSQL 9 are failing and you have version 8.x installed,you may need to remove the previous version first. See:  https://github.com/Homebrew/homebrew/issues/2510To migrate existing data from a previous major version (pre-9.4) of PostgreSQL, see:  https://www.postgresql.org/docs/9.4/static/upgrading.htmlTo have launchd start postgresql at login:    ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgentsThen to load postgresql now:    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plistOr, if you don&apos;t want/need launchctl, you can just run:    postgres -D /usr/local/var/postgres==&gt; /usr/local/Cellar/postgresql/9.4.4/bin/initdb /usr/local/var/postgres==&gt; Summary🍺  /usr/local/Cellar/postgresql/9.4.4: 3014 files, 40M</code></pre><a id="more"></a><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><pre><code>initdb /usr/local/var/postgresln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgentslaunchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist</code></pre><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><pre><code>vi .zshrcexport PATH=$PATH:/Applications/Postgres.app/Contents/Versions/9.4/binalias postgres.server=&quot;sudo -u postgres pg_ctl -D /Library/PostgreSQL/9.4/data&quot;</code></pre><h3 id="启动停止服务"><a href="#启动停止服务" class="headerlink" title="启动停止服务"></a>启动停止服务</h3><pre><code>postgres.server startpostgres.server stop</code></pre><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><pre><code># 创建默认名为user的数据库createdb# 创建指定名为play的数据库createdb play# 用superuser创建数据库createdb -U postgres databasename</code></pre><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><pre><code>dropdb -U postgres databasename</code></pre><h3 id="创建用户赋予权限"><a href="#创建用户赋予权限" class="headerlink" title="创建用户赋予权限"></a>创建用户赋予权限</h3><pre><code>createuser -U postgres usernamepsql database -c &quot;GRANT ALL ON ALL TABLES IN SCHEMA public to user;&quot;psql database -c &quot;GRANT ALL ON ALL SEQUENCES IN SCHEMA public to user;&quot;psql database -c &quot;GRANT ALL ON ALL FUNCTIONS IN SCHEMA public to user;&quot;</code></pre><h3 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h3><pre><code># user的命令行psql# play的命令行psql play# 查看所有数据库psql -l# 以某个用户连接某个数据库psql -U username -d databasename# 查看版本号select version()PostgreSQL 9.5.1 on x86_64-apple-darwin14.5.0, compiled by Apple LLVM version 7.0.0 (clang-700.1.76), 64-bitselect postgis_full_version()POSTGIS=&quot;2.2.1 r14555&quot; GEOS=&quot;3.5.0-CAPI-1.9.0 r4084&quot; PROJ=&quot;Rel. 4.9.2, 08 September 2015&quot; GDAL=&quot;GDAL 1.11.3, released 2015/09/16&quot; LIBXML=&quot;2.9.2&quot; LIBJSON=&quot;0.11&quot; RASTER</code></pre><p>alter table cities add id serial primary key;</p><h2 id="PostgreSQL-高级特性"><a href="#PostgreSQL-高级特性" class="headerlink" title="PostgreSQL 高级特性"></a>PostgreSQL 高级特性</h2><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> myview <span class="keyword">AS</span></span><br><span class="line">    <span class="keyword">SELECT</span> city, temp_lo, temp_hi, prcp, <span class="built_in">date</span>, location</span><br><span class="line">        <span class="keyword">FROM</span> weather, cities</span><br><span class="line">        <span class="keyword">WHERE</span> city = <span class="keyword">name</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> myview;</span><br></pre></td></tr></table></figure><h3 id="外键"><a href="#外键" class="headerlink" title="外键"></a>外键</h3><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><p>BEGIN, COMMIT, ROLLBACK TO, SAVEPOINT</p><p>事务是所有数据库系统的一个基本概念。一次事务的要点就是把多个步骤捆绑成一个单一的、 不成功则成仁的操作。其它并发的事务是看不到在这些步骤之间的中间状态的，并且如果发生了一些问题， 导致该事务无法完成，那么所有这些步骤都完全不会影响数据库。</p><p>事务被认为是原子的： 从其它事务的角度来看，它要么是全部发生，要么完全不发生。</p><p>一个事务型数据库保证一个事务所做的所有更新在事务发出完成响应之前都记录到永久的存储中(也就是磁盘)。</p><p>事务型数据库的另外一个重要的性质和原子更新的概念关系密切：当多个事务并发地运行的时候， 每个事务都不应看到其它事务所做的未完成的变化。</p><p>一个打开的事务所做的更新在它完成之前是无法被其它事务看到的，而到提交的时候所有更新同时可见。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> accounts <span class="keyword">SET</span> balance = balance - <span class="number">100.00</span></span><br><span class="line">    <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'Alice'</span>;</span><br><span class="line"><span class="comment">-- 等等</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>如果在该事务的过程中，我们决定不做提交(可能是我们刚发现 Alice 的余额是负数)， 那么我们可以发出ROLLBACK而不是COMMIT命令， 那么到目前为止我们的所有更新都会被取消。</p><p>PostgreSQL 实际上把每个 SQL 语句当做在一个事务中执行来看待。 如果你没有发出BEGIN命令，那么每个独立的语句都被一个隐含的BEGIN 和(如果成功的话)COMMIT包围。一组包围在BEGIN和COMMIT 之间的语句有时候被称做事务块。</p><p>我们可以通过使用保存点的方法，在一个事务里更加精细地控制其中的语句。 保存点允许你选择性地抛弃事务中的某些部分，而提交剩下的部分。在用SAVEPOINT 定义了一个保存点后，如果需要，你可以使用ROLLBACK TO回滚到该保存点。 则该事务在定义保存点到 ROLLBACK TO 之间的所有数据库更改都被抛弃， 但是在保存点之前的修改将被保留。</p><h3 id="窗口函数"><a href="#窗口函数" class="headerlink" title="窗口函数"></a>窗口函数</h3><p>OVER<br>聚合函数+over()<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> depname, empno, salary, <span class="keyword">avg</span>(salary) <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> depname) <span class="keyword">FROM</span> empsalary;</span><br><span class="line">算出每个部门的平均工资</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> depname, empno, salary, <span class="keyword">rank</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> depname <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>, empno) <span class="keyword">FROM</span> empsalary;</span><br><span class="line">rank：每个部门人员的权重，按照over里的方式排序</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> depname, empno, salary, enroll_date, pos</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">  (<span class="keyword">SELECT</span> depname, empno, salary, enroll_date,</span><br><span class="line">          <span class="keyword">rank</span>() <span class="keyword">OVER</span> (<span class="keyword">PARTITION</span> <span class="keyword">BY</span> depname <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>, empno) <span class="keyword">AS</span> pos</span><br><span class="line">     <span class="keyword">FROM</span> empsalary</span><br><span class="line">  ) <span class="keyword">AS</span> ss</span><br><span class="line"><span class="keyword">WHERE</span> pos &lt; <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">子查询：查询rank&lt;3的行</span><br></pre></td></tr></table></figure></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>INHERITS<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> cities (</span><br><span class="line">  <span class="keyword">name</span>       <span class="built_in">text</span>,</span><br><span class="line">  population <span class="built_in">real</span>,</span><br><span class="line">  altitude   <span class="built_in">int</span>     <span class="comment">-- (单位是英尺)</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> capitals (</span><br><span class="line">  state      <span class="built_in">char</span>(<span class="number">2</span>)</span><br><span class="line">) INHERITS (cities);</span><br></pre></td></tr></table></figure></p><p>capitals继承了其父表 cities的所有字段,州首府有一个额外的字段 state显示其所处的州</p><h2 id="词法结构"><a href="#词法结构" class="headerlink" title="词法结构"></a>词法结构</h2><h3 id="标识符和关键字"><a href="#标识符和关键字" class="headerlink" title="标识符和关键字"></a>标识符和关键字</h3><p>SQL 标识符和关键字必须以一个字母(a-z 以及带变音符的字母和非拉丁字母)或下划线开头， 随后的字符可以是字母、下划线、数字(0-9)、 美元符号($)</p><h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> empsalary(<span class="built_in">int</span>) <span class="keyword">RETURNS</span> empsalary                                                                                                                                                                                                                           <span class="keyword">AS</span> $$ <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> empsalary <span class="keyword">WHERE</span> empno = $<span class="number">1</span> $$                                                                                                                                                                                                                               <span class="keyword">LANGUAGE</span> <span class="keyword">SQL</span>;</span><br></pre></td></tr></table></figure><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><h4 id="位置表示法"><a href="#位置表示法" class="headerlink" title="位置表示法"></a>位置表示法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> concat_lower_or_upper(a <span class="built_in">text</span>, b <span class="built_in">text</span>, uppercase <span class="built_in">boolean</span> <span class="keyword">DEFAULT</span> <span class="literal">false</span>)                                                                                                                                                                                   <span class="keyword">RETURNS</span> <span class="built_in">text</span>                                                                                                                                                                                                                                                                    <span class="keyword">AS</span>                                                                                                                                                                                                                                                                              $$                                                                                                                                                                                                                                                                                <span class="keyword">SELECT</span> <span class="keyword">CASE</span>                                                                                                                                                                                                                                                                            <span class="keyword">WHEN</span> $<span class="number">3</span> <span class="keyword">THEN</span> <span class="keyword">UPPER</span>($<span class="number">1</span> || <span class="string">' '</span> || $<span class="number">2</span>)                                                                                                                                                                                                                                             <span class="keyword">ELSE</span> <span class="keyword">LOWER</span>($<span class="number">1</span> || <span class="string">' '</span> || $<span class="number">1</span>)                                                                                                                                                                                                                                                     <span class="keyword">END</spanspan><br><span class="line"></span><br><span class="line"> <span class="keyword">select</span> concat_lower_or_upper(<span class="string">'a'</span>, <span class="string">'b'</span>);</span><br><span class="line"> concat_lower_or_upper</span><br><span class="line"><span class="comment">-----------------------</span></span><br><span class="line"> a a</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><h4 id="名称表示法"><a href="#名称表示法" class="headerlink" title="名称表示法"></a>名称表示法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> concat_lower_or_upper(a := <span class="string">'Hello'</span>, b := <span class="string">'World'</span>, uppercase := <span class="literal">true</span>);</span><br><span class="line"> concat_lower_or_upper</span><br><span class="line"><span class="comment">-----------------------</span></span><br><span class="line"> HELLO WORLD</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><h4 id="混合表示法"><a href="#混合表示法" class="headerlink" title="混合表示法"></a>混合表示法</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> concat_lower_or_upper(<span class="string">'Hello'</span>, <span class="string">'World'</span>, uppercase := <span class="literal">true</span>);</span><br><span class="line"> concat_lower_or_upper</span><br><span class="line"><span class="comment">-----------------------</span></span><br><span class="line"> HELLO WORLD</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure><h2 id="数据定义"><a href="#数据定义" class="headerlink" title="数据定义"></a>数据定义</h2><h3 id="缺省值"><a href="#缺省值" class="headerlink" title="缺省值"></a>缺省值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> products (</span><br><span class="line">    product_no <span class="built_in">integer</span> <span class="keyword">DEFAULT</span> <span class="keyword">nextval</span>(<span class="string">'products_product_no_seq'</span>),</span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>缩写<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> products (</span><br><span class="line">    product_no <span class="built_in">SERIAL</span>,</span><br><span class="line">    ...</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h3 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h3><ul><li>检查约束<ul><li>CHECK (price &gt; 0)  字段约束</li><li>CONSTRAINT positive_price CHECK (price &gt; 0)  命名约束</li><li>CHECK (price &gt; discounted_price)  表约束</li><li>CHECK (discounted_price &gt; 0 AND price &gt; discounted_price)</li></ul></li><li>非空约束<ul><li>NOT NULL</li></ul></li><li>唯一约束<ul><li>UNIQUE</li><li>UNIQUE (a, b, c)</li></ul></li><li>主键<ul><li>PRIMARY KEY (与 UNIQUE NOT NULL 等价)</li><li>PRIMARY KEY (a, b, c)</li></ul></li><li>外键<ul><li>REFERENCES products (product_no) 如果缺少字段列表的话，就会引用被引用表的主键</li><li>FOREIGN KEY (b, c) REFERENCES other_table (c1, c2)</li><li>ON DELETE RESTRICT  限制删除：禁止删除被引用的行</li><li>ON DELETE CASCADE  级联删除：在删除一个被引用的行的时候，所有引用它的行也会被自动删除</li><li>SET NULL  删除后的设置为 NULL</li><li>SET DEFAULT 删除后设置为 默认值DEFAULT</li></ul></li><li>排除约束<ul><li>EXCLUDE</li></ul></li></ul><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><ul><li>增加字段<ul><li>ALTER TABLE products ADD COLUMN description text;</li></ul></li><li>删除字段<ul><li>ALTER TABLE products DROP COLUMN description;</li><li>ALTER TABLE products DROP COLUMN description CASCADE;</li></ul></li><li>增加约束<ul><li>ALTER TABLE products ADD CHECK (name &lt;&gt; ‘’);</li><li>ALTER TABLE products ADD CONSTRAINT some_name UNIQUE (product_no);</li><li>ALTER TABLE products ADD FOREIGN KEY (product_group_id) REFERENCES product_groups;</li><li>ALTER TABLE products ALTER COLUMN product_no SET NOT NULL;</li></ul></li><li>删除约束<ul><li>ALTER TABLE products DROP CONSTRAINT some_name;</li><li>ALTER TABLE products DROP CONSTRAINT some_name CASCADE;</li><li>ALTER TABLE products ALTER COLUMN product_no DROP NOT NULL;</li></ul></li><li>修改缺省值<ul><li>ALTER TABLE products ALTER COLUMN price SET DEFAULT 7.77;</li><li>ALTER TABLE products ALTER COLUMN price DROP DEFAULT;</li></ul></li><li>修改字段数据类型<ul><li>ALTER TABLE products ALTER COLUMN price TYPE numeric(10,2);</li></ul></li><li>重命名字段<ul><li>ALTER TABLE products RENAME COLUMN product_no TO product_number;</li></ul></li><li>重命名表<ul><li>ALTER TABLE products RENAME TO items;</li></ul></li></ul><h3 id="架构schema"><a href="#架构schema" class="headerlink" title="架构schema"></a>架构schema</h3><h4 id="自定义schema"><a href="#自定义schema" class="headerlink" title="自定义schema"></a>自定义schema</h4><p>用途：</p><ul><li>允许多个用户使用一个数据库而不会干扰其它用户。</li><li>把数据库对象组织成逻辑组，让它们更便于管理。</li><li>第三方的应用可以放在不同的模式中，这样它们就不会和其它对象的名字冲突。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">database.schema.table</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> myschema;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> myschema.mytable (</span><br><span class="line"> ...</span><br><span class="line">);</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">SCHEMA</span> myschema;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">SCHEMA</span> myschema <span class="keyword">CASCADE</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">SCHEMA</span> schemaname AUTHORIZATION username;</span><br></pre></td></tr></table></figure><h4 id="The-Public-Schema"><a href="#The-Public-Schema" class="headerlink" title="The Public Schema"></a>The Public Schema</h4><p>CREATE TABLE products ( … );<br>CREATE TABLE public.products ( … );</p><h4 id="The-Schema-Search-Path"><a href="#The-Schema-Search-Path" class="headerlink" title="The Schema Search Path"></a>The Schema Search Path</h4><p>SHOW search_path;<br>SET search_path TO myschema,public;<br>DROP TABLE mytable;</p><h4 id="Schemas-and-Privileges"><a href="#Schemas-and-Privileges" class="headerlink" title="Schemas and Privileges"></a>Schemas and Privileges</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">CREATE</span> <span class="keyword">ON</span> <span class="keyword">SCHEMA</span> <span class="keyword">public</span> <span class="keyword">FROM</span> <span class="keyword">PUBLIC</span>;</span><br></pre></td></tr></table></figure><p>不允许所有用户有CREATE的权限，第一个”public”是schema，第二个”PUBLIC”意思是”所有用户”</p><h4 id="The-System-Catalog-Schema"><a href="#The-System-Catalog-Schema" class="headerlink" title="The System Catalog Schema"></a>The System Catalog Schema</h4><p>pg_catalog 它包含系统表和所有内置数据类型、函数、操作符</p><h2 id="数据操作"><a href="#数据操作" class="headerlink" title="数据操作"></a>数据操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> products (<span class="keyword">name</span>, price, product_no) <span class="keyword">VALUES</span> (<span class="string">'Cheese'</span>, <span class="number">9.99</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> products (product_no, <span class="keyword">name</span>, price) <span class="keyword">VALUES</span></span><br><span class="line">    (<span class="number">1</span>, <span class="string">'Cheese'</span>, <span class="number">9.99</span>),</span><br><span class="line">    (<span class="number">2</span>, <span class="string">'Bread'</span>, <span class="number">1.99</span>),</span><br><span class="line">    (<span class="number">3</span>, <span class="string">'Milk'</span>, <span class="number">2.99</span>);</span><br><span class="line"><span class="keyword">UPDATE</span> mytable <span class="keyword">SET</span> a = <span class="number">5</span>, b = <span class="number">3</span>, c = <span class="number">1</span> <span class="keyword">WHERE</span> a &gt; <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> products <span class="keyword">WHERE</span> price = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="表连接"><a href="#表连接" class="headerlink" title="表连接"></a>表连接</h3><ul><li>CROSS JOIN (卡笛尔积 Cartesian product)</li><li>INNER JOIN ON</li><li>INNER JOIN USING</li><li>NATURAL INNER JOIN</li><li>LEFT JOIN</li><li>RIGHT JOIN</li><li>FULL JOIN</li></ul><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>子查询的结果(派生表)必须包围在圆括弧里并且必须赋予一个别名</p><h3 id="表函数"><a href="#表函数" class="headerlink" title="表函数"></a>表函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> foo (fooid <span class="built_in">int</span>, foosubid <span class="built_in">int</span>, fooname <span class="built_in">text</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> getfoo(<span class="built_in">int</span>) <span class="keyword">RETURNS</span> SETOF foo <span class="keyword">AS</span> $$</span><br><span class="line">    <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> foo <span class="keyword">WHERE</span> fooid = $<span class="number">1</span>;</span><br><span class="line">$$ LANGUAGE SQL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> getfoo(<span class="number">1</span>) <span class="keyword">AS</span> t1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> foo</span><br><span class="line">    <span class="keyword">WHERE</span> foosubid <span class="keyword">IN</span> (</span><br><span class="line">                        <span class="keyword">SELECT</span> foosubid</span><br><span class="line">                        <span class="keyword">FROM</span> getfoo(foo.fooid) z</span><br><span class="line">                        <span class="keyword">WHERE</span> z.fooid = foo.fooid</span><br><span class="line">                      );</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> vw_getfoo <span class="keyword">AS</span> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> getfoo(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> vw_getfoo;</span><br></pre></td></tr></table></figure><h3 id="LATERAL-Subqueries"><a href="#LATERAL-Subqueries" class="headerlink" title="LATERAL Subqueries"></a>LATERAL Subqueries</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p1.id, p2.id, v1, v2</span><br><span class="line"><span class="keyword">FROM</span> polygons p1, polygons p2,</span><br><span class="line">     LATERAL vertices(p1.poly) v1,</span><br><span class="line">     LATERAL vertices(p2.poly) v2</span><br><span class="line"><span class="keyword">WHERE</span> (v1 &lt;-&gt; v2) &lt; <span class="number">10</span> <span class="keyword">AND</span> p1.id != p2.id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> p1.id, p2.id, v1, v2</span><br><span class="line"><span class="keyword">FROM</span> polygons p1 <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> LATERAL vertices(p1.poly) v1,</span><br><span class="line">     polygons p2 <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> LATERAL vertices(p2.poly) v2</span><br><span class="line"><span class="keyword">WHERE</span> (v1 &lt;-&gt; v2) &lt; <span class="number">10</span> <span class="keyword">AND</span> p1.id != p2.id;</span><br></pre></td></tr></table></figure><h3 id="The-GROUP-BY-and-HAVING-Clauses"><a href="#The-GROUP-BY-and-HAVING-Clauses" class="headerlink" title="The GROUP BY and HAVING Clauses"></a>The GROUP BY and HAVING Clauses</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> select_list <span class="keyword">FROM</span> ... [<span class="keyword">WHERE</span> ...] <span class="keyword">GROUP</span> <span class="keyword">BY</span> ... <span class="keyword">HAVING</span> boolean_expression</span><br><span class="line"><span class="keyword">SELECT</span> product_id, p.name, (<span class="keyword">sum</span>(s.units) * (p.price - p.cost)) <span class="keyword">AS</span> profit</span><br><span class="line">    <span class="keyword">FROM</span> products p <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> sales s <span class="keyword">USING</span> (product_id)</span><br><span class="line">    <span class="keyword">WHERE</span> s.date &gt; <span class="keyword">CURRENT_DATE</span> - <span class="built_in">INTERVAL</span> <span class="string">'4 weeks'</span></span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> product_id, p.name, p.price, p.cost</span><br><span class="line">    <span class="keyword">HAVING</span> <span class="keyword">sum</span>(p.price * s.units) &gt; <span class="number">5000</span>;</span><br></pre></td></tr></table></figure><h3 id="GROUPING-SETS-CUBE-and-ROLLUP"><a href="#GROUPING-SETS-CUBE-and-ROLLUP" class="headerlink" title="GROUPING SETS, CUBE, and ROLLUP"></a>GROUPING SETS, CUBE, and ROLLUP</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">=&gt; SELECT * FROM items_sold;</span><br><span class="line"> brand | size | sales</span><br><span class="line"><span class="comment">-------+------+-------</span></span><br><span class="line"> Foo   | L    |  10</span><br><span class="line"> Foo   | M    |  20</span><br><span class="line"> Bar   | M    |  15</span><br><span class="line"> Bar   | L    |  5</span><br><span class="line">(4 rows)</span><br><span class="line"></span><br><span class="line">=&gt; SELECT brand, size, sum(sales) FROM items_sold GROUP BY GROUPING SETS ((brand), (size), ());</span><br><span class="line"> brand | size | sum</span><br><span class="line"><span class="comment">-------+------+-----</span></span><br><span class="line"> Foo   |      |  30</span><br><span class="line"> Bar   |      |  20</span><br><span class="line">       | L    |  15</span><br><span class="line">       | M    |  35</span><br><span class="line">       |      |  50</span><br><span class="line">(5 rows)</span><br></pre></td></tr></table></figure><h3 id="Combining-Queries"><a href="#Combining-Queries" class="headerlink" title="Combining Queries"></a>Combining Queries</h3><p>对两个查询的结果进行集合操作(并、交、差)</p><ul><li>query1 UNION [ALL] query2</li><li>query1 INTERSECT [ALL] query2</li><li>query1 EXCEPT [ALL] query2</li></ul><h3 id="Sorting-Rows"><a href="#Sorting-Rows" class="headerlink" title="Sorting Rows"></a>Sorting Rows</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> select_list</span><br><span class="line">    <span class="keyword">FROM</span> table_expression</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> sort_expression1 [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>] [<span class="keyword">NULLS</span> &#123; <span class="keyword">FIRST</span> | <span class="keyword">LAST</span> &#125;]</span><br><span class="line">             [, sort_expression2 [<span class="keyword">ASC</span> | <span class="keyword">DESC</span>] [<span class="keyword">NULLS</span> &#123; <span class="keyword">FIRST</span> | <span class="keyword">LAST</span> &#125;] ...]</span><br></pre></td></tr></table></figure><h3 id="LIMIT-and-OFFSET"><a href="#LIMIT-and-OFFSET" class="headerlink" title="LIMIT and OFFSET"></a>LIMIT and OFFSET</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> select_list</span><br><span class="line">    <span class="keyword">FROM</span> table_expression</span><br><span class="line">    [ <span class="keyword">ORDER</span> <span class="keyword">BY</span> ... ]</span><br><span class="line">    [ <span class="keyword">LIMIT</span> &#123; <span class="built_in">number</span> | ALL &#125; ] [ <span class="keyword">OFFSET</span> <span class="built_in">number</span> ]</span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>PostgreSQL有着丰富的内置数据类型可用。 用户还可以使用CREATE TYPE命令增加新的数据类型。</p><table><thead><tr><th>名字</th><th>别名</th><th>描述</th></tr></thead><tbody><tr><td>bigint</td><td>int8</td><td>有符号8字节整数</td></tr><tr><td>bigserial</td><td>serial8</td><td>自增8字节整数</td></tr><tr><td>bit [ (n) ]</td><td></td><td>定长位串</td></tr><tr><td>bit varying [ (n) ]</td><td>varbit</td><td>可变长位串</td></tr><tr><td>boolean</td><td>bool</td><td>逻辑布尔值(真/假)</td></tr><tr><td>box</td><td></td><td>平面上的矩形</td></tr><tr><td>bytea</td><td></td><td>二进制数据(“字节数组”)</td></tr><tr><td>character varying [ (n) ]</td><td>varchar [ (n) ]</td><td>可变长字符串</td></tr><tr><td>character [ (n) ]</td><td>char [ (n) ]</td><td>定长字符串</td></tr><tr><td>cidr</td><td></td><td>IPv4 或 IPv6 网络地址</td></tr><tr><td>circle</td><td></td><td>平面上的圆</td></tr><tr><td>date</td><td></td><td>日历日期(年, 月, 日)</td></tr><tr><td>double precision</td><td>float8</td><td>双精度浮点数(8字节)</td></tr><tr><td>inet</td><td></td><td>IPv4 或 IPv6 主机地址</td></tr><tr><td>integer</td><td>int, int4</td><td>有符号 4 字节整数</td></tr><tr><td>interval [ fields ] [ (p) ]</td><td></td><td>时间间隔</td></tr><tr><td>line</td><td></td><td>平面上的无限长直线</td></tr><tr><td>lseg</td><td></td><td>平面上的线段</td></tr><tr><td>macaddr</td><td></td><td>MAC (Media Access Control)地址</td></tr><tr><td>money</td><td></td><td>货币金额</td></tr><tr><td>numeric [ (p, s) ]</td><td>decimal [ (p, s) ]</td><td>可选精度的准确数值数据类型</td></tr><tr><td>path</td><td></td><td>平面上的几何路径</td></tr><tr><td>point</td><td></td><td>平面上的点</td></tr><tr><td>polygon</td><td></td><td>平面上的封闭几何路径</td></tr><tr><td>real</td><td>float4</td><td>单精度浮点数(4 字节)</td></tr><tr><td>smallint</td><td>int2</td><td>有符号 2 字节整数</td></tr><tr><td>smallserial</td><td>serial2</td><td>自增 2 字节整数</td></tr><tr><td>serial</td><td>serial4</td><td>自增 4 字节整数</td></tr><tr><td>text</td><td></td><td>可变长字符串</td></tr><tr><td>time [ (p) ] [ without time zone ]</td><td></td><td>一天中的时刻(无时区)</td></tr><tr><td>time [ (p) ] with time zone</td><td>timetz</td><td>一天中的时刻，含时区</td></tr><tr><td>timestamp [ (p) ] [ without time zone ]</td><td></td><td>日期与时刻(无时区)</td></tr><tr><td>timestamp [ (p) ] with time zone</td><td>timestamptz</td><td>日期与时刻，含时区</td></tr><tr><td>tsquery</td><td></td><td>文本检索查询</td></tr><tr><td>tsvector</td><td></td><td>文本检索文档</td></tr><tr><td>txid_snapshot</td><td></td><td>用户级别的事务ID快照</td></tr><tr><td>uuid</td><td></td><td>通用唯一标识符</td></tr><tr><td>xml</td><td></td><td>XML 数据</td></tr><tr><td>json</td><td></td><td>JSON 数据</td></tr></tbody></table><p>如果你要求精确的计算(比如计算货币金额)，应使用numeric(decimal)类型</p><h2 id="并发控制"><a href="#并发控制" class="headerlink" title="并发控制"></a>并发控制</h2><ul><li>MVCC (Multiversion Concurrency Control)</li><li>Table- and row-level locking</li></ul><h3 id="transaction-isolation"><a href="#transaction-isolation" class="headerlink" title="transaction isolation"></a>transaction isolation</h3><table><thead><tr><th>Isolation Level</th><th>Dirty Read</th><th>Nonrepeatable Read</th><th>Phantom Read</th><th>Serialization Anomaly</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>Allowed, but not in PG</td><td>Possible</td><td>Possible</td><td>Possible</td></tr><tr><td>Read committed</td><td>Not possible</td><td>Possible</td><td>Possible</td><td>Possible</td></tr><tr><td>Repeatable read</td><td>Not possible</td><td>Not possible</td><td>Allowed, but not in PG</td><td>Possible</td></tr><tr><td>Serializable</td><td>Not possible</td><td>Not possible</td><td>Not possible</td><td>Not possible</td></tr></tbody></table><p>PostgreSQL 中默认的隔离级别是Read committed</p><h2 id="默认函数"><a href="#默认函数" class="headerlink" title="默认函数"></a>默认函数</h2><p>random()<br>rank()</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;➜  brew install postgres
==&amp;gt; Downloading https://homebrew.bintray.com/bottles/postgresql-9.4.4.yosemite.bottle.tar.
######################################################################## 100.0%
==&amp;gt; Pouring postgre&amp;lt;kbd&amp;gt;b&amp;lt;/kbd&amp;gt;sql-9.4.4.yosemite.bottle.tar.gz
==&amp;gt; Caveats
If builds of PostgreSQL 9 are failing and you have version 8.x installed,
you may need to remove the previous version first. See:
  https://github.com/Homebrew/homebrew/issues/2510

To migrate existing data from a previous major version (pre-9.4) of PostgreSQL, see:
  https://www.postgresql.org/docs/9.4/static/upgrading.html


To have launchd start postgresql at login:
    ln -sfv /usr/local/opt/postgresql/*.plist ~/Library/LaunchAgents
Then to load postgresql now:
    launchctl load ~/Library/LaunchAgents/homebrew.mxcl.postgresql.plist
Or, if you don&amp;apos;t want/need launchctl, you can just run:
    postgres -D /usr/local/var/postgres
==&amp;gt; /usr/local/Cellar/postgresql/9.4.4/bin/initdb /usr/local/var/postgres
==&amp;gt; Summary
🍺  /usr/local/Cellar/postgresql/9.4.4: 3014 files, 40M
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://morningchen.com/categories/DevOps/"/>
    
    
      <category term="PostgreSQL" scheme="https://morningchen.com/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title>Install Sentry and Supervisor on Centos</title>
    <link href="https://morningchen.com/2015/09/16/install-sentry-on-centos/"/>
    <id>https://morningchen.com/2015/09/16/install-sentry-on-centos/</id>
    <published>2015-09-16T12:35:02.000Z</published>
    <updated>2018-09-27T03:52:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>安装前先用virtualenv创建一个隔离环境</p><pre><code>yum updateyum -y install python-setuptools python-setuptools-develyum install libxml2-devel libxslt-devel python-devel -yyum install gcc libffi-devel openssl-devel -yyum -y install mysql-server mysql mysql-develyum install epel-release -ypip install MySQL-python</code></pre><h3 id="启动mysql和redis"><a href="#启动mysql和redis" class="headerlink" title="启动mysql和redis"></a>启动mysql和redis</h3><pre><code>sudo service mysqld startredis-server</code></pre><a id="more"></a><h3 id="安装sentry"><a href="#安装sentry" class="headerlink" title="安装sentry"></a>安装sentry</h3><pre><code>pip install sentry</code></pre><p>配置文件：</p><pre><code>sentry init</code></pre><p>修改生成文件sentry.conf.py，主要修改以下字段：</p><pre><code>DATABASESSENTRY_ADMIN_EMAILSENTRY_URL_PREFIXSENTRY_REDIS_OPTIONS</code></pre><p>启动sentry:</p><pre><code>sentry --config=/root/.sentry/sentry.conf.py upgradesentry start</code></pre><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><pre><code>vi /etc/yum.repos.d/nginx.repo[nginx]name=nginx repobaseurl=http://nginx.org/packages/centos/6/x86_64/gpgcheck=0enabled=1yum updateyum install nginx</code></pre><p>启动nginx</p><pre><code>sudo service nginx restart</code></pre><h3 id="安装supervisor"><a href="#安装supervisor" class="headerlink" title="安装supervisor"></a>安装supervisor</h3><pre><code>easy_install supervisorecho_supervisord_conf &gt; /path/to/supervisord.confvi /etc/supervisord.conf[program:sentry-web]directory=/home/work/sentry/environment=SENTRY_CONF=/root/.sentry/sentry.conf.pycommand=/home/work/sentry/bin/sentry startautostart=trueautorestart=trueredirect_stderr=truestdout_logfile=syslogstderr_logfile=syslog[program:sentry-worker]directory=/home/work/sentry/environment=SENTRY_CONF=/root/.sentry/sentry.conf.pycommand=/home/work/sentry/bin/sentry celery worker -Bautorestart=trueredirect_stderr=truestdout_logfile=syslogstderr_logfile=syslogvi /etc/nginx/conf.d/sentry.confserver {    listen 80;    server_name sentry.yourhost.com;    location / {        proxy_pass         http://127.0.0.1:9000;        proxy_redirect     off;        proxy_set_header   Host              $host;        proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;        proxy_set_header   X-Forwarded-Proto $scheme;    }}supervisord -c /etc/supervisord.confsupervisorctl updatesupervisorctl</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;安装依赖&quot;&gt;&lt;a href=&quot;#安装依赖&quot; class=&quot;headerlink&quot; title=&quot;安装依赖&quot;&gt;&lt;/a&gt;安装依赖&lt;/h3&gt;&lt;p&gt;安装前先用virtualenv创建一个隔离环境&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yum update
yum -y install python-setuptools python-setuptools-devel
yum install libxml2-devel libxslt-devel python-devel -y
yum install gcc libffi-devel openssl-devel -y
yum -y install mysql-server mysql mysql-devel
yum install epel-release -y
pip install MySQL-python
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;启动mysql和redis&quot;&gt;&lt;a href=&quot;#启动mysql和redis&quot; class=&quot;headerlink&quot; title=&quot;启动mysql和redis&quot;&gt;&lt;/a&gt;启动mysql和redis&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;sudo service mysqld start
redis-server
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="DevOps" scheme="https://morningchen.com/categories/DevOps/"/>
    
    
      <category term="Sentry" scheme="https://morningchen.com/tags/Sentry/"/>
    
      <category term="Supervisor" scheme="https://morningchen.com/tags/Supervisor/"/>
    
      <category term="Nginx" scheme="https://morningchen.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Two Scoops of Django 1.8 学习笔记五</title>
    <link href="https://morningchen.com/2015/09/14/Two-Scoops-of-Django-1-8-notes-5/"/>
    <id>https://morningchen.com/2015/09/14/Two-Scoops-of-Django-1-8-notes-5/</id>
    <published>2015-09-14T15:38:38.000Z</published>
    <updated>2018-09-27T14:12:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="9-FBVs最佳实践"><a href="#9-FBVs最佳实践" class="headerlink" title="9. FBVs最佳实践"></a>9. FBVs最佳实践</h2><h3 id="9-1-FBVs的优势"><a href="#9-1-FBVs的优势" class="headerlink" title="9.1 FBVs的优势"></a>9.1 FBVs的优势</h3><p>虽然FBVs不能像CBVs一样有继承。但它确实有更显著的功能优势<br>写FBVs的时候我们遵循以下指南：</p><ul><li>越少代码越好</li><li>杜绝重复的代码</li><li>Views应该处理演示逻辑。如果有必要的话，试着把业务逻辑放在models中或者forms中</li><li>保证views的简洁</li><li>用他们写自定义的403，404，500错误处理</li><li>使用复杂的嵌套-如果要避免阻塞的话</li></ul><h3 id="9-2-传递HttpRequest对象"><a href="#9-2-传递HttpRequest对象" class="headerlink" title="9.2 传递HttpRequest对象"></a>9.2 传递HttpRequest对象</h3><p>有些时候我们想在views中重用代码，但是并没有想中间件和上下文处理器一样把它和全局功能联系起来。<br>在这本书的开头，我们建议创建跨项目的功能函数。<br>对于多数功能函数而言，我们从<code>django.http.HttpRequest</code>对象中拿到一个或多个属性，来收集数据或者执行操作。<br>通过把request对象作为首要参数，我们能在更多的方法上拥有更简单的参数。这意味着我们只需要传一个HttpRequest对象就可以了<br><a id="more"></a></p><pre><code># sprinkles/utils.pyfrom django.core.exceptions import PermissionDenieddef check_sprinkle_rights(request):    if request.user.can_sprinkle or request.user.is_staff:        return request    # Return a HTTP 403 back to the user    raise PermissionDenied</code></pre><p><code>check_sprinkle_rights()</code>这个函数的作用是检查用户的权限，抛出<code>django.core.exceptions.PermissionDenied</code>异常</p><p>你会注意到我们返回了一个HttpRequest对象，而不是返回任意的值或者返回None。我们这样做的原因是，python作为动态类型的语言，我们能给HttpRequest加上额外的属性。看下面的例子：</p><pre><code># sprinkles/utils.pyfrom django.core.exceptions import PermissionDenieddef check_sprinkles(request):    if request.user.can_sprinkle or request.user.is_staff:        # By adding this value here it means our display templates        #   can be more generic. We don&apos;t need to have        {% raw %}            #   {% if request.user.can_sprinkle or request.user.is_staff %}            #   instead just using            #   {% if request.can_sprinkle %}            {% endraw %}        request.can_sprinkle = True        return request    # Return a HTTP 403 back to the user    raise PermissionDenied</code></pre><p>还有一个原因要简单说下。同时，我们看下views的代码</p><pre><code># sprinkles/views.pyfrom django.shortcuts import get_object_or_404from django.shortcuts import renderfrom .utils import check_sprinklesfrom .models import Sprinkledef sprinkle_list(request):    &quot;&quot;&quot;Standard list view&quot;&quot;&quot;    request = check_sprinkles(request)    return render(request,        &quot;sprinkles/sprinkle_list.html&quot;,        {&quot;sprinkles&quot;: Sprinkle.objects.all()})def sprinkle_detail(request, pk):    &quot;&quot;&quot;Standard detail view&quot;&quot;&quot;    request = check_sprinkles(request)    sprinkle = get_object_or_404(Sprinkle, pk=pk)    return render(request, &quot;sprinkles/sprinkle_detail.html&quot;,        {&quot;sprinkle&quot;: sprinkle})def sprinkle_preview(request):    &quot;&quot;&quot;&quot;preview of new sprinkle, but without the            check_sprinkles function being used.    &quot;&quot;&quot;    sprinkle = Sprinkle.objects.all()    return render(request,        &quot;sprinkles/sprinkle_preview.html&quot;,        {&quot;sprinkle&quot;: sprinkle})</code></pre><p>这个方法的另一个特点是可以集成到CBVs里：</p><pre><code># sprinkles/views.pyfrom django.views.generic import DetailViewfrom .utils import check_sprinklesfrom .models import Sprinkleclass SprinkleDetail(DetailView):    &quot;&quot;&quot;Standard detail view&quot;&quot;&quot;    model = Sprinkle    def dispatch(self, request, *args, **kwargs):        request = check_sprinkles(request)        return super(SprinkleDetail, self).dispatch(                                request, *args, **kwargs)</code></pre><h3 id="9-3-Decorators-Are-Sweet"><a href="#9-3-Decorators-Are-Sweet" class="headerlink" title="9.3 Decorators Are Sweet"></a>9.3 Decorators Are Sweet</h3><p>在计算机科学的说法中，给编程语言加上语法糖的做法是为了让事情更容易理解和表达。在python中，装饰器的功能添加可以让人类阅读起来更清晰更甜美。 下面是装饰器用于FBVs的样板：</p><pre><code># simple decorator templateimport functoolsdef decorator(view_func):    @functools.wraps(view_func)    def new_view_func(request, *args, **kwargs):        # You can modify the request (HttpRequest) object here.        response = view_func(request, *args, **kwargs)        # You can modify the response (HttpResponse) object here.        return response    return new_view_func</code></pre><p>举个具体的例子：</p><pre><code># sprinkles/decorators.pyfrom functools import wrapsfrom . import utils# based off the decorator template from Example 8.5def check_sprinkles(view_func):    &quot;&quot;&quot;Check if a user can add sprinkles&quot;&quot;&quot;    @wraps(view_func)    def new_view_func(request, *args, **kwargs):        # Act on the request object with utils.can_sprinkle()        request = utils.can_sprinkle(request)        # Call the view function        response = view_func(request, *args, **kwargs)        # Return the HttpResponse object        return response    return new_view_func</code></pre><p>上面写好了一个装饰器函数。我们把他用到view里：</p><pre><code># views.pyfrom django.shortcuts import get_object_or_404, renderfrom .decorators import check_sprinklesfrom .models import Sprinkle# Attach the decorator to the view@check_sprinklesdef sprinkle_detail(request, pk):    &quot;&quot;&quot;Standard detail view&quot;&quot;&quot;    sprinkle = get_object_or_404(Sprinkle, pk=pk)    return render(request, &quot;sprinkles/sprinkle_detail.html&quot;,        {&quot;sprinkle&quot;: sprinkle})</code></pre><h4 id="装饰器的扩展阅读资料"><a href="#装饰器的扩展阅读资料" class="headerlink" title="装饰器的扩展阅读资料"></a>装饰器的扩展阅读资料</h4><ul><li>Decorator Explained<br><a href="http://www.jeffknupp.com/blog/2013/11/29/improve-your-python-decorators-explained/" target="_blank" rel="noopener">http://www.jeffknupp.com/blog/2013/11/29/improve-your-python-decorators-explained/</a></li><li>Decorator and Functional Python<br><a href="http://www.brianholdefehr.com/decorators-and-functional-python" target="_blank" rel="noopener">http://www.brianholdefehr.com/decorators-and-functional-python</a></li><li>Decorator Cheat Sheet by author Daniel Roy Greenfeld<br><a href="http://www.pydanny.com/python-decorator-cheatsheet.html" target="_blank" rel="noopener">http://www.pydanny.com/python-decorator-cheatsheet.html</a></li><li>本书的附录C</li></ul><h3 id="9-4-传递HttpResponse对象"><a href="#9-4-传递HttpResponse对象" class="headerlink" title="9.4 传递HttpResponse对象"></a>9.4 传递HttpResponse对象</h3><p>就像用HttpRequest对象一样，我们也可以在函数之间传递HttpResponse对象。<br>一个可供选择的<code>Middleware.process_request()</code>的方法。</p><ul><li><a href="https://docs.djangoproject.com/en/1.8/topics/http/middleware/#process-response" target="_blank" rel="noopener">https://docs.djangoproject.com/en/1.8/topics/http/middleware/#process-response</a></li></ul><h2 id="10-CBVs最佳实践"><a href="#10-CBVs最佳实践" class="headerlink" title="10. CBVs最佳实践"></a>10. CBVs最佳实践</h2><p>Django提供了一个标准方式来写CBVs。事实上，在前面章节提到过，django的视图事实上就是一个调用， 他接受一个请求对象，返回一个响应对象。对于FBVs来说，这个调用就是视图函数；对于CBVs来说， 它提供了一个<code>as_view()</code>的类方法来返回这个调用。这个机制是在<code>django.views.generic.View</code>中实现的。 所有的CBVs都应该直接或者间接的继承这个类。<br>Django 也提供了一系列的通用类视图(generic class-based views, GCBVs)，它能实现在大多数web项目中实现通用的模式。</p><h3 id="10-1-CBVs指南"><a href="#10-1-CBVs指南" class="headerlink" title="10.1 CBVs指南"></a>10.1 CBVs指南</h3><ul><li>越少代码越好</li><li>杜绝重复的代码</li><li>Views应该处理演示逻辑。如果有必要的话，试着把业务逻辑放在models中或者forms中</li><li>保证views的简洁</li><li>不要用CBVs写自定义的403,404,500错误处理程序。用FBVs代替</li><li>更简洁的 mixins</li></ul><h3 id="10-2-Using-Mixins-With-CBVs"><a href="#10-2-Using-Mixins-With-CBVs" class="headerlink" title="10.2 Using Mixins With CBVs"></a>10.2 Using Mixins With CBVs</h3><p>编程中，mixin是一个类，它提供一些功能来被继承，但并不意味着它能实例化自己。 Mixins能增加类的功能和表现。<br>我们能使用mixins的功能来给我们的apps构建自己的view classes。那么是按照什么顺序继承的呢？ 它遵循python的方法解析顺序(method resolution order)，最简单的定义是，按照下列规则从左到右依次执行：</p><ol><li>django本身提供的base view classes总是在右边</li><li>Mixins在base view的左边</li><li>Mixins应该继承自python的内建object</li></ol><pre><code>from django.views.generic import TemplateViewclass FreshFruitMixin(object):    def get_context_data(self, **kwargs):        context = super(FreshFruitMixin,                    self).get_context_data(**kwargs)        context[&quot;has_fresh_fruit&quot;] = True        return contextclass FruityFlavorView(FreshFruitMixin, TemplateView):    template_name = &quot;fruity_flavor.html&quot;</code></pre><p>在这个例子中，FruityFlavorView继承自 FreshFruitMixin和 TemplateView，<br>因为 TemplateView是Django提供的base view class，因此它在最右边(规则1)，<br>它左边是 FreshFruitMixin(规则2)。最后 FreshFruitMixin继承自object(规则3)</p><h3 id="10-3-哪种任务用哪个GCBV"><a href="#10-3-哪种任务用哪个GCBV" class="headerlink" title="10.3 哪种任务用哪个GCBV?"></a>10.3 哪种任务用哪个GCBV?</h3><table><thead><tr><th>名称</th><th>用途</th><th>Two Scoops 的例子</th></tr></thead><tbody><tr><td>View</td><td>能使用在任何地方</td><td>看10.6节</td></tr><tr><td>RedirectView</td><td>重定向到其他的URL</td><td>将用户从’/log-in/‘页面带到’/login/‘页面</td></tr><tr><td>TemplateView</td><td>呈现一个HTML模板</td><td>‘/about/‘页面</td></tr><tr><td>ListView</td><td>列出一系列对象</td><td>各种冰淇淋口味的列表</td></tr><tr><td>DetailView</td><td>呈现一个对象</td><td>冰淇淋口味的详情</td></tr><tr><td>FormView</td><td>提交一个表单</td><td>站点的联系或者email表单</td></tr><tr><td>CreateView</td><td>创建一个对象</td><td>创建一个新的冰淇淋口味</td></tr><tr><td>UpdateView</td><td>更新一个对象</td><td>更新一个已存在的冰淇淋口味</td></tr><tr><td>DeleteView</td><td>删除一个对象</td><td>删除一个不好吃的冰淇淋口味，比如说香草牛排味</td></tr><tr><td>Generic date views</td><td>用于一段时间内的对象展示</td><td>创建一个公共的历史记录，它能显示冰淇淋口味是什么时候添加到数据库的</td></tr></tbody></table><h3 id="10-4-CBVs的常规tips"><a href="#10-4-CBVs的常规tips" class="headerlink" title="10.4 CBVs的常规tips"></a>10.4 CBVs的常规tips</h3><p>这一章涵盖了大多数CBV 和GCBV实现的有用的技巧。</p><h4 id="10-4-1-通过身份认证制约用户访问CBV-GCBV"><a href="#10-4-1-通过身份认证制约用户访问CBV-GCBV" class="headerlink" title="10.4.1 通过身份认证制约用户访问CBV/GCBV"></a>10.4.1 通过身份认证制约用户访问CBV/GCBV</h4><p>Django的CBV文档给出了一个有用的例子，使用<code>django.contrib.auth.decorators.login_required</code>装饰器。<br><a href="https://docs.djangoproject.com/en/1.8/topics/class-based-views/intro/#decorating-class-based-views" target="_blank" rel="noopener">https://docs.djangoproject.com/en/1.8/topics/class-based-views/intro/#decorating-class-based-views</a></p><p>幸运的是，django第三方app <a href="https://github.com/brack3t/django-braces" target="_blank" rel="noopener">django-braces</a>提供了一个<code>LogubRequireMixin</code>实现方式。</p><pre><code># flavors/views.pyfrom django.views.generic import DetailViewfrom braces.views import LoginRequiredMixinfrom .models import Flavorclass FlavorDetailView(LoginRequiredMixin, DetailView):    model = Flavor</code></pre><p>别忘了Mixin顺序：</p><ul><li>LoginRequiredMixin 一定是在最左边</li><li>Base view class 一定实在最右边</li></ul><p>如果打乱了顺序，将会得到不可预测的结果</p><h4 id="10-4-2-在数据有效的表单上执行自定义操作"><a href="#10-4-2-在数据有效的表单上执行自定义操作" class="headerlink" title="10.4.2 在数据有效的表单上执行自定义操作"></a>10.4.2 在数据有效的表单上执行自定义操作</h4><pre><code>from django.views.generic import CreateViewfrom braces.views import LoginRequiredMixinfrom .models import Flavorclass FlavorCreateView(LoginRequiredMixin, CreateView):    model = Flavor    fields = (&apos;title&apos;, &apos;slug&apos;, &apos;scoops_remaining&apos;)    def form_valid(self, form):        # Do custom logic here        return super(FlavorCreateView, self).form_valid(form)</code></pre><p>为了在已验证有效的表单数据上执行自定义的逻辑，简单的加上<code>form_valid()</code>逻辑就好了。<br><code>form_valid()</code>的返回值应该是个<code>django.http.HttpResponseRedirect</code></p><h4 id="10-4-3-在数据无效的表单上执行自定义操作"><a href="#10-4-3-在数据无效的表单上执行自定义操作" class="headerlink" title="10.4.3 在数据无效的表单上执行自定义操作"></a>10.4.3 在数据无效的表单上执行自定义操作</h4><p>这个方法返回一个<code>django.http.HttpResponse</code></p><pre><code>from django.views.generic import CreateViewfrom braces.views import LoginRequiredMixinfrom .models import Flavorclass FlavorCreateView(LoginRequiredMixin, CreateView):    model = Flavor    def form_invalid(self, form):        # Do custom logic here        return super(FlavorCreateView, self).form_invalid(form)</code></pre><h4 id="10-4-4-使用view对象"><a href="#10-4-4-使用view对象" class="headerlink" title="10.4.4 使用view对象"></a>10.4.4 使用view对象</h4><p>如果你正在使用CBVs来渲染内容，考虑下使用view对象它自己来提供访问属性和方法，<br>这样就可以被其他属性和方法调用。它们也可以在模板中被调用，例子：</p><pre><code>from django.utils.functional import cached_propertyfrom django.views.generic import UpdateView, TemplateViewfrom braces.views import LoginRequiredMixinfrom .models import Flavorfrom .tasks import update_users_who_favoritedclass FavoriteMixin(object):    @cached_property    def likes_and_favorites(self):        &quot;&quot;&quot;Returns a dictionary of likes and favorites&quot;&quot;&quot;        likes = self.object.likes()        favorites = self.object.favorites()        return {            &quot;likes&quot;: likes,            &quot;favorites&quot;: favorites,            &quot;favorites_count&quot;: favorites.count(),        }class FlavorUpdateView(LoginRequiredMixin, FavoriteMixin, UpdateView):    model = Flavor    fields = (&apos;title&apos;, &apos;slug&apos;, &apos;scoops_remaining&apos;)    def form_valid(self, form):        update_users_who_favorited(            instance=self.object,            favorites=self.likes_and_favorites[&apos;favorites&apos;]        )        return super(FlavorCreateView, self).form_valid(form)class FlavorDetailView(LoginRequiredMixin, FavoriteMixin, TemplateView):    model = Flavor</code></pre><p>这个flavors app模板能访问这个属性了：</p><pre><code>{% raw %}    {# flavors/base.html #}    {% extends "base.html" %}    {% block likes_and_favorites %}    {% endraw %}&lt;ul&gt;  &lt;li&gt;Likes: {% raw %}{{ view.likes_and_favorites.likes }}{% endraw %}&lt;/li&gt;  &lt;li&gt;Favorites: {% raw %}{{ view.likes_and_favorites.favorites_count }}{% endraw %}&lt;/li&gt;&lt;/ul&gt;{% raw %}    {% endblock likes_and_favorites %}    {% endraw %}</code></pre><h3 id="10-5-GCBVs和表单是如何兼容的"><a href="#10-5-GCBVs和表单是如何兼容的" class="headerlink" title="10.5 GCBVs和表单是如何兼容的"></a>10.5 GCBVs和表单是如何兼容的</h3><p>首先我们定义一个flavor model用在这一章的view中：</p><pre><code># flavors/models.pyfrom django.core.urlresolvers import reversefrom django.db import modelsSTATUS = (    (0, &quot;zero&quot;),    (1, &quot;one&quot;),)class Flavor(models.Model):    title = models.CharField(max_length=255)    slug = models.SlugField(unique=True)    scoops_remaining = models.IntegerField(default=0, choices=STATUS)    def get_absolute_url(self):        return reverse(&quot;flavors:detail&quot;, kwargs={&quot;slug&quot;: self.slug})</code></pre><p>现在我们来探讨一些普遍的表单场景</p><h4 id="10-5-1-Views-ModelForm的例子"><a href="#10-5-1-Views-ModelForm的例子" class="headerlink" title="10.5.1 Views + ModelForm的例子"></a>10.5.1 Views + ModelForm的例子</h4><p>这是最简单也是最普遍的表单场景。通常当你创建一个model时，你可能想增加一个新的记录或者<br>更新已存在的记录。</p><p>在这个例子中，我们会知道如何构造一系列的views，这些view可以创建、修改、展示flavor记录。<br>我们也会演示如何提供确认变更。下面是我们需要的views:</p><ol><li>FlavorCreateView 对应在一个表单中添加新口味</li><li>FlavorUpdateView 对应在一个表单中编辑口味</li><li>FlavorDetailView 对应用于风味创作和风味更新的确认页面</li></ol><p><img src="view+modelform_flow.png" alt="views+modelform_flow"></p><p>需要注意的是我们要尽可能的紧扣Django的命名约定。这三个view分别是Django中CreateView, UpdateView和DetailView的子类。<br>很容易就能写出这些views，因为Django给我们提供了大部分的用法：</p><pre><code># flavors/views.pyfrom django.views.generic import CreateView, UpdateView, DetailViewfrom braces.views import LoginRequiredMixinfrom .models import Flavorclass FlavorCreateView(LoginRequiredMixin, CreateView):    model = Flavor    fields = (&apos;title&apos;, &apos;slug&apos;, &apos;scoops_remaining&apos;)class FlavorUpdateView(LoginRequiredMixin, UpdateView):    model = Flavor    fields = (&apos;title&apos;, &apos;slug&apos;, &apos;scoops_remaining&apos;)class FlavorDetailView(DetailView):    model = Flavor</code></pre><p>但是有个问题，当我们写出这些view的urls.py和必要的模板时，会发现这个问题：</p><ul><li>这个FlavorDetailView 不是一个确认页面</li></ul><p>幸运的是，我们只需要小小的修改一下就好了。</p><p>修改的第一步是使用<code>django.contrib.messages</code>来告知用户只需要增加或者修改这个falvor来访问FlavorDetailView。<br>我们需要重写<code>FlavorCreateView.form_valid()</code>和<code>FlavorUpdateView.form_valid()</code>方法。<br>只需要给这两个views加上<code>FlavorActionMixin</code>就可以了，简直方便得不行。</p><pre><code># flavors/views.pyfrom django.contrib import messagesfrom django.views.generic import CreateView, UpdateView, DetailViewfrom braces.views import LoginRequiredMixinfrom .models import Flavorclass FlavorActionMixin(object):    fields = (&apos;title&apos;, &apos;slug&apos;, &apos;scoops_remaining&apos;)    @property    def success_msg(self):        return NotImplemented    def form_valid(self, form):        messages.info(self.request, self.success_msg)        return super(FlavorActionMixin, self).form_valid(form)class FlavorCreateView(LoginRequiredMixin, FlavorActionMixin,                        CreateView):    model = Flavor    success_msg = &quot;Flavor created!&quot;class FlavorUpdateView(LoginRequiredMixin, FlavorActionMixin,                        UpdateView):    model = Flavor    success_msg = &quot;Flavor updated!&quot;class FlavorDetailView(DetailView):    model = Flavor</code></pre><p>在本章之前，我们举了一个简单的例子，如何在GCBV中覆写<code>form_valid()</code>。<br>这里，我们通过给多个views创建一个mixin继承的方式来复用<code>form_valid()</code>。</p><p>现在我们使用django的消息框架来给用户展示确认消息。<code>FlavorActionMixin</code>的作用是根据用户动作的执行来排列一个确认消息，</p><p>flavor被添加或修改后，一个消息列表被传递到了<code>FlavorDetailView</code>的上下文。<br>我们给view的模板加上下面的代码，再创建或者修改flavor就能看到这些消息：</p><pre><code>{% raw %}    {# templates/flavors/flavor_detail.html #}    {% if messages %}    {% endraw %}    &lt;ul class=&quot;messages&quot;&gt;{% raw %}            {% for message in messages %}    {% endraw %}        &lt;li id=&quot;{% raw %}message_{{ forloop.counter }}{% endraw %}&quot;            {% raw %}                {% if message.tags %} class="{{ message.tags }}"                    {% endif %}>                {{ message }}                {% endraw %}        &lt;/li&gt;{% raw %}            {% endfor %}    {% endraw %}    &lt;/ul&gt;{% raw %}    {% endif %}    {% endraw %}</code></pre><p>回顾下，这个例子再次演示了如何覆写<code>form_valid</code>方法，合并到mixin中，<br>如何合并多个mixins到一个view，并且给出了非常有用的<code>django.contrib.messages</code>框架的快速介绍</p><h4 id="10-5-2-Views-Form的例子"><a href="#10-5-2-Views-Form的例子" class="headerlink" title="10.5.2 Views + Form的例子"></a>10.5.2 Views + Form的例子</h4><p>对于ModelForm有时候你更想使用Form，搜索表单是一个特别好的使用案例，你可能还会碰上其他的真实场景。</p><p>在这个例子中，我们将会创建一个简单的flavor搜索表单。它不会改变任何flavor数据。<br>只会查询ORM，然后在搜索结果页面把数据展示出来。</p><p>有很多复杂的方法可以实现，但是对于我们这个简单的例子，只需要加上一个view就足够。<br>我们把<code>FlavorListView</code>用作搜索页面和搜索结果页面。</p><p>这种场景下，我们会把<code>q</code>用作查询参数，倾向于使用<code>GET</code>请求，因为我们不涉及到添加，修改，删除对象的操作，因此不必使用<code>POST</code>请求。</p><p>为了返回匹配的搜索结果，我们需要修改标准查询集(queryset)。我们在<code>flavor/view.py</code>中添加下面代码：</p><pre><code>from django.views.generic import ListViewfrom .models import Flavorclass FlavorListView(ListView):    model = Flavor    def get_queryset(self):        # Fetch the queryset from the parent get_queryset        queryset = super(FlavorListView, self).get_queryset()        # Get the q GET parameter        q = self.request.GET.get(&quot;q&quot;)        if q:            # Return a filtered queryset            return queryset.filter(title__icontains=q)        # Return the base queryset        return queryset</code></pre><p>搜索表单应该看起来和下面差不多：</p><pre><code>{% raw %}    {# templates/flavors/_flavor_search.html #}    {% comment %}        Usage: {% include "flavors/_flavor_search.html" %}    {% endcomment %}    {% endraw %}&lt;form action=&quot;{% raw %}{% url "flavor_list" %}{% endraw %}&quot; method=&quot;GET&quot;&gt;    &lt;input type=&quot;text&quot; name=&quot;q&quot; /&gt;    &lt;button type=&quot;submit&quot;&gt;search&lt;/button&gt;&lt;/form&gt;</code></pre><h3 id="10-6-只使用django-views-generic-View"><a href="#10-6-只使用django-views-generic-View" class="headerlink" title="10.6 只使用django.views.generic.View"></a>10.6 只使用django.views.generic.View</h3><p>只在项目中使用<code>django.views.generic.View</code>也是完全可能的。它没有我们想象得那么极端。</p><p>如果用FBVs来写的话，需要多个if嵌套HTTP方法，<code>if request.method == ...</code>。<br>但是按照下面的方式来写的话，开发者理解起来毫无困难：</p><pre><code>from django.shortcuts import get_object_or_404from django.shortcuts import render, redirectfrom django.views.generic import Viewfrom braces.views import LoginRequiredMixinfrom .forms import FlavorFormfrom .models import Flavorclass FlavorView(LoginRequiredMixin, View):    def get(self, request, *args, **kwargs):        # Handles display of the Flavor object        flavor = get_object_or_404(Flavor, slug=kwargs[&apos;slug&apos;])        return render(request,            &quot;flavors/flavor_detail.html&quot;,                {&quot;flavor&quot;: flavor}            )    def post(self, request, *args, **kwargs):        # Handles updates of the Flavor object        flavor = get_object_or_404(Flavor, slug=kwargs[&apos;slug&apos;])        form = FlavorForm(request.POST)        if form.is_valid():            form.save()        return redirect(&quot;flavors:detail&quot;, flavor.slug)</code></pre><p>我们发现在项目中使用<code>django.views.generic.View</code>类，用GET方法来展现JSON,PDF或者其他非HTML内容是非常有用的。<br>我们用来在FBVs中渲染CSV, Excel, PDF文件的技巧在CBVs中也可以实现。</p><pre><code>from django.http import HttpResponsefrom django.shortcuts import get_object_or_404from django.views.generic import Viewfrom braces.views import LoginRequiredMixinfrom .models import Flavorfrom .reports import make_flavor_pdfclass PDFFlavorView(LoginRequiredMixin, View):    def get(self, request, *args, **kwargs):        # Get the flavor        flavor = get_object_or_404(Flavor, slug=kwargs[&apos;slug&apos;])        # create the response        response = HttpResponse(content_type=&apos;application/pdf&apos;)        # generate the PDF stream and attach to the response        response = make_flavor_pdf(response, flavor)        return response</code></pre><p>这个例子相当直接，但是如果我们需要更多的mixins，处理更多的自定义逻辑的话，相比其他厚重的views，<code>django.views.generic</code>的简洁性能帮助我们更容易的处理。</p><h3 id="10-7-更多资源"><a href="#10-7-更多资源" class="headerlink" title="10.7 更多资源"></a>10.7 更多资源</h3><ul><li><a href="https://docs.djangoproject.com/en/1.8/topics/class-based-views/" target="_blank" rel="noopener">https://docs.djangoproject.com/en/1.8/topics/class-based-views/</a></li><li><a href="https://docs.djangoproject.com/en/1.8/topics/class-based-views/generic-display/" target="_blank" rel="noopener">https://docs.djangoproject.com/en/1.8/topics/class-based-views/generic-display/</a></li><li><a href="https://docs.djangoproject.com/en/1.8/topics/class-based-views/generic-editing/" target="_blank" rel="noopener">https://docs.djangoproject.com/en/1.8/topics/class-based-views/generic-editing/</a></li><li><a href="https://docs.djangoproject.com/en/1.8/topics/class-based-views/mixins/" target="_blank" rel="noopener">https://docs.djangoproject.com/en/1.8/topics/class-based-views/mixins/</a></li><li><a href="https://docs.djangoproject.com/en/1.8/ref/class-based-views/" target="_blank" rel="noopener">https://docs.djangoproject.com/en/1.8/ref/class-based-views/</a></li><li><a href="http://ccbv.co.uk/" target="_blank" rel="noopener">http://ccbv.co.uk/</a></li><li><a href="http://www.pydanny.com/tag/class-based-views.html" target="_blank" rel="noopener">http://www.pydanny.com/tag/class-based-views.html</a></li></ul><p>其他有用的CBV库</p><ul><li>django-extra-views</li><li>django-vanilla-views</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;9-FBVs最佳实践&quot;&gt;&lt;a href=&quot;#9-FBVs最佳实践&quot; class=&quot;headerlink&quot; title=&quot;9. FBVs最佳实践&quot;&gt;&lt;/a&gt;9. FBVs最佳实践&lt;/h2&gt;&lt;h3 id=&quot;9-1-FBVs的优势&quot;&gt;&lt;a href=&quot;#9-1-FBVs的优势&quot; class=&quot;headerlink&quot; title=&quot;9.1 FBVs的优势&quot;&gt;&lt;/a&gt;9.1 FBVs的优势&lt;/h3&gt;&lt;p&gt;虽然FBVs不能像CBVs一样有继承。但它确实有更显著的功能优势&lt;br&gt;写FBVs的时候我们遵循以下指南：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;越少代码越好&lt;/li&gt;
&lt;li&gt;杜绝重复的代码&lt;/li&gt;
&lt;li&gt;Views应该处理演示逻辑。如果有必要的话，试着把业务逻辑放在models中或者forms中&lt;/li&gt;
&lt;li&gt;保证views的简洁&lt;/li&gt;
&lt;li&gt;用他们写自定义的403，404，500错误处理&lt;/li&gt;
&lt;li&gt;使用复杂的嵌套-如果要避免阻塞的话&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;9-2-传递HttpRequest对象&quot;&gt;&lt;a href=&quot;#9-2-传递HttpRequest对象&quot; class=&quot;headerlink&quot; title=&quot;9.2 传递HttpRequest对象&quot;&gt;&lt;/a&gt;9.2 传递HttpRequest对象&lt;/h3&gt;&lt;p&gt;有些时候我们想在views中重用代码，但是并没有想中间件和上下文处理器一样把它和全局功能联系起来。&lt;br&gt;在这本书的开头，我们建议创建跨项目的功能函数。&lt;br&gt;对于多数功能函数而言，我们从&lt;code&gt;django.http.HttpRequest&lt;/code&gt;对象中拿到一个或多个属性，来收集数据或者执行操作。&lt;br&gt;通过把request对象作为首要参数，我们能在更多的方法上拥有更简单的参数。这意味着我们只需要传一个HttpRequest对象就可以了&lt;br&gt;
    
    </summary>
    
      <category term="Backend" scheme="https://morningchen.com/categories/Backend/"/>
    
      <category term="Django" scheme="https://morningchen.com/categories/Backend/Django/"/>
    
    
      <category term="Django" scheme="https://morningchen.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Two Scoops of Django 1.8 学习笔记四</title>
    <link href="https://morningchen.com/2015/09/12/Two-Scoops-of-Django-1-8-notes-4/"/>
    <id>https://morningchen.com/2015/09/12/Two-Scoops-of-Django-1-8-notes-4/</id>
    <published>2015-09-12T12:26:26.000Z</published>
    <updated>2018-09-27T14:11:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="8-Function-and-Class-Based-Views"><a href="#8-Function-and-Class-Based-Views" class="headerlink" title="8. Function- and Class-Based Views"></a>8. Function- and Class-Based Views</h2><ul><li>Function-based views(FBVs) 函数视图</li><li>Class-based views(CBVs)  类视图</li></ul><h3 id="8-1-什么时候使用FBVs或者CBVs"><a href="#8-1-什么时候使用FBVs或者CBVs" class="headerlink" title="8.1 什么时候使用FBVs或者CBVs"></a>8.1 什么时候使用FBVs或者CBVs</h3><p>每当你想实现一个view的时候，考虑下用哪种方法比较好，下面是各种情况下该使用FBVs还是CBVs流程图<br><img src="FBVs_CBVs.png" alt="FBVs_CBVs"><br>我们更倾向于在大多数情况下使用CBVs来实现</p><a id="more"></a><h3 id="8-2-将View的逻辑放在URLConfs之外"><a href="#8-2-将View的逻辑放在URLConfs之外" class="headerlink" title="8.2 将View的逻辑放在URLConfs之外"></a>8.2 将View的逻辑放在URLConfs之外</h3><p>requests通过URLConfs被路由到views上，在一个模块中通常用urls.py表示。</p><p>URL设计哲学 <a href="https://docs.djangoproject.com/en/1.8/misc/design-philosophies/#url-design" target="_blank" rel="noopener">https://docs.djangoproject.com/en/1.8/misc/design-philosophies/#url-design</a></p><p>要点很明确：</p><ul><li>view模块应该包含view的逻辑</li><li>URL模块应该包含URL的逻辑</li></ul><p>下面的代码，你可能在官方文档里见过：</p><pre><code>Bad Examplefrom django.conf.urls import urlfrom django.views.generic import DetailViewfrom tastings.models import Tastingurlpatterns = [    url(r&quot;^(?P&lt;pk&gt;\d+)/$&quot;,        DetailView.as_view(            model=Tasting,            template_name=&quot;tastings/detail.html&quot;),        name=&quot;detail&quot;),    url(r&quot;^(?P&lt;pk&gt;\d+)/results/$&quot;,        DetailView.as_view(            model=Tasting,            template_name=&quot;tastings/results.html&quot;),        name=&quot;results&quot;),]</code></pre><p>瞟一眼代码可能感觉是对的，但是它违反了Django的设计哲学：</p><ul><li>它用tight coupling(紧耦合)取代了Loose coupling(松耦合),意味着不能重用这个view</li><li>违反了DRY原则，在CBVs之间使用了同一个或者相似的参数</li><li>破坏了可扩展性，CBVs的优势是类的继承，可他在用<a href="https://zh.wikipedia.org/wiki/%E5%8F%8D%E9%9D%A2%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">反面模式</a></li><li>太多其他问题：当你加上身份认证的时候会发生什么？授权怎么办？你准备用两个或者更多的装饰器封装每个URLConfs视图吗？<br>把你的view代码放在URLConfs中导致你的URLConfs混乱不利于维护</li></ul><h3 id="8-3-坚持松耦合的URLConfs"><a href="#8-3-坚持松耦合的URLConfs" class="headerlink" title="8.3 坚持松耦合的URLConfs"></a>8.3 坚持松耦合的URLConfs</h3><p>为了避免上面提到过的问题，我们这样创建URLConfs，先写个views</p><pre><code># tastings/views.pyfrom django.views.generic import ListView, DetailView, UpdateViewfrom django.core.urlresolvers import reversefrom .models import Tastingclass TasteListView(ListView):    model = Tastingclass TasteDetailView(DetailView):    model = Tastingclass TasteResultsView(TasteDetailView):    template_name = &quot;tastings/results.html&quot;class TasteUpdateView(UpdateView):    model = Tasting    def get_success_url(self):        return reverse(&quot;tastings:detail&quot;,            kwargs={&quot;pk&quot;: self.object.pk})</code></pre><p>再写个urls</p><pre><code># tastings/urls.pyfrom django.conf.urls import urlfrom . import viewsurlpatterns = [    url(        regex=r&quot;^$&quot;,        view=views.TasteListView.as_view(),        name=&quot;list&quot;    ),    url(        regex=r&quot;^(?P&lt;pk&gt;\d+)/$&quot;,        view=views.TasteDetailView.as_view(),        name=&quot;detail&quot;    ),    url(        regex=r&quot;^(?P&lt;pk&gt;\d+)/results/$&quot;,        view=views.TasteResultsView.as_view(),        name=&quot;results&quot;    ),    url(        regex=r&quot;^(?P&lt;pk&gt;\d+)/update/$&quot;,        view=views.TasteUpdateView.as_view(),        name=&quot;update&quot;    )]</code></pre><p>为什么要这样写呢：</p><ul><li>DRY原则：没有参数和属性的重复</li><li>松耦合：我们从URLConfs中移除了model和template name，因为URLConfs就是URLConfs，view就是view。<br>我们应该尽可能的从一个或者更多的URLConfs调用views，这个例子就做到了</li><li>URLConfs should do one thing and do it well：这个例子中我们的URLConfs只专注于roating</li><li>views 能从Class-based中受益：views可以继承自其他的类，这样，加个身份认证，授权，新的评论格式或者其他的业务需求就变得更容易了</li><li>无限的扩展性：在views中，我们能实现自定义逻辑</li></ul><h3 id="8-4-使用URL-命名空间"><a href="#8-4-使用URL-命名空间" class="headerlink" title="8.4 使用URL 命名空间"></a>8.4 使用URL 命名空间</h3><p>URL 命名空间给app-level提供了一个标识符，命名空间在表面上看起来没什么软用，但是一旦开发者开始用的时候就会抱怨为什么不早点使用。<br>我们总结了使用命名空间的规则：</p><ul><li>我们像这样写 tastings:detail (冒号后面不要写空格！不要写空格！不要写空格！)</li></ul><p>在root URLConfs上们加上：</p><pre><code># urls.py at root of projecturlpatterns += [    url(r&apos;^tastings/&apos;, include(&apos;tastings.urls&apos;, namespace=&apos;tastings&apos;)),]</code></pre><p>再看下view的代码片段：</p><pre><code># tastings/views.py snippetclass TasteUpdateView(UpdateView):    model = Tasting    def get_success_url(self):        return reverse(&quot;tastings:detail&quot;,            kwargs={&quot;pk&quot;: self.object.pk})</code></pre><p>在HTML这样使用：</p><pre><code>{% raw %}    {% extends "base.html" %}    {% block title %}Tastings{% endblock title %}    {% block content %}    {% endraw %}&lt;ul&gt;{% raw %}      {% for taste in tastings %}    {% endraw %}    &lt;li&gt;      &lt;a href=&quot;{% raw %}{% url "tastings:detail" taste.pk %}">{{ taste.title }}{% endraw %}&lt;/a&gt;      &lt;small&gt;        &lt;a {% raw %}href="{% url "tastings:update" taste.pk %}">update{% endraw %}&lt;/a&gt;      &lt;/small&gt;    &lt;/li&gt;{% raw %}      {% endfor %}    {% endraw %}&lt;/ul&gt;{% raw %}    {% endblock content %}    {% endraw %}</code></pre><h4 id="8-4-1创建更短，更显而易见，DRY的URL名"><a href="#8-4-1创建更短，更显而易见，DRY的URL名" class="headerlink" title="8.4.1创建更短，更显而易见，DRY的URL名"></a>8.4.1创建更短，更显而易见，DRY的URL名</h4><h4 id="8-4-2通过第三方库增加互通性"><a href="#8-4-2通过第三方库增加互通性" class="headerlink" title="8.4.2通过第三方库增加互通性"></a>8.4.2通过第三方库增加互通性</h4><p>如果已经存在一个contact的app，但是我们还要加一个，我们可以这样：</p><pre><code># urls.py at root of projecturlpatterns += [    url(r&apos;^contact/&apos;, include(&apos;contactmonger.urls&apos;,        namespace=&apos;contactmonger&apos;)),    url(r&apos;^report-problem/&apos;, include(&apos;contactapp.urls&apos;,        namespace=&apos;contactapp&apos;)),]</code></pre><p>在templates让它生效</p><pre><code>{% raw %}    {% extends "base.html" %}    {% block title %}Contact{% endblock title %}    {% block content %}    {% endraw %}    &lt;p&gt;  &lt;a href=&quot;{% raw %}{% url "contactmonger:create" %}{% endraw %}&quot;&gt;Contact Us&lt;/a&gt;    &lt;/p&gt;    &lt;p&gt;  &lt;a href=&quot;{% raw %}{% url "contactapp:report" %}{% endraw %}&quot;&gt;Report a Problem&lt;/a&gt;    &lt;/p&gt;{% raw %}    {% endblock content %}    {% endraw %}</code></pre><h3 id="8-5-在URLConfs中引用views的时候不要用字符串"><a href="#8-5-在URLConfs中引用views的时候不要用字符串" class="headerlink" title="8.5 在URLConfs中引用views的时候不要用字符串"></a>8.5 在URLConfs中引用views的时候不要用字符串</h3><p>在Django1.8之前的官方文档中，在URLConfs引用views的时候，会把views作为字符串：</p><pre><code>BAD Example# DON&apos;T DO THIS!# polls/urls.pyfrom django.conf.urls import patterns, urlurlpatterns = patterns(&apos;&apos;,    # Defining the view as a string    url(r&apos;^$&apos;, &apos;polls.views.index&apos;, name=&apos;index&apos;),)</code></pre><p>这种方法有两个问题：</p><ul><li>Django 神奇的添加了view函数/类，这个魔法特性的问题是当view有个错误时，增加了调试的困难性</li><li>这个方法需要把空字符串作为patterns的前缀，太麻烦</li></ul><p>来看看patterns的源码：</p><pre><code>def patterns(prefix, *args):    warnings.warn(        &apos;django.conf.urls.patterns() is deprecated and will be removed in &apos;        &apos;Django 1.10. Update your urlpatterns to be a list of &apos;        &apos;django.conf.urls.url() instances instead.&apos;,        RemovedInDjango110Warning, stacklevel=2    )    pattern_list = []    for t in args:        if isinstance(t, (list, tuple)):            t = url(prefix=prefix, *t)        elif isinstance(t, RegexURLPattern):            t.add_prefix(prefix)        pattern_list.append(t)    return pattern_list</code></pre><p>它自己都说了在1.10版本之后就会移除，可官方文档还在这样写，sibusisha….</p><p>以下是定义views的正确方法：</p><pre><code># polls/urls.pyfrom django.conf.urls import urlfrom . import viewsurlpatterns = [    # Defining the views explicitly    url(r&apos;^$&apos;, views.index, name=&apos;index&apos;),]</code></pre><p>参考: <a href="https://docs.djangoproject.com/en/1.8/releases/1.8/#django-conf-urls-patterns" target="_blank" rel="noopener">https://docs.djangoproject.com/en/1.8/releases/1.8/#django-conf-urls-patterns</a></p><h3 id="8-6-将业务逻辑放在views之外"><a href="#8-6-将业务逻辑放在views之外" class="headerlink" title="8.6 将业务逻辑放在views之外"></a>8.6 将业务逻辑放在views之外</h3><p>过去，我们会把复杂的业务逻辑放在views里面，不幸的是，当需要在我们的views中生成PDF，加一个 REST API，或者要服务于其他版式时，它实现起来会变得很困难。<br>这就是我们更倾向使用model methods, manager methods, 或者常规实用的辅助功能的原因。当把业务逻辑放在更容易复用的组件中，再从views内调用，<br>通过扩展组件可以让项目更容易做更多的事情。</p><h3 id="8-7-Django-Views-Are-Functions"><a href="#8-7-Django-Views-Are-Functions" class="headerlink" title="8.7 Django Views Are Functions"></a>8.7 Django Views Are Functions</h3><pre><code># Django FBV as a functionHttpResponse = view(HttpRequest)# Deciphered into basic math (remember functions from algebra?)y = f(x)# ... and then translated into a CBV exampleHttpResponse = View.as_view()(HttpRequest)</code></pre><p>这个函数将一个HTTP 请求对象转换成了HTTP 响应对象。你可以理解成数学中的函数。<br>CBV通过as_view()也可以作为函数使用。</p><h4 id="最简单的views"><a href="#最简单的views" class="headerlink" title="最简单的views"></a>最简单的views</h4><pre><code># simplest_views.pyfrom django.http import HttpResponsefrom django.views.generic import View# The simplest FBVdef simplest_view(request):    # Business logic goes here    return HttpResponse(&quot;FBV&quot;)# The simplest CBVclass SimplestView(View):    def get(self, request, *args, **kwargs):        # Business logic goes here        return HttpResponse(&quot;CBV&quot;)</code></pre><p>为什么需要了解？</p><ul><li>有时我们需要一次性的views来做一件小事</li><li>理解了最简单的views意味着我们能更好的理解这样做的目的</li><li>说明 FBVs不用指定HTTP方法(GET,POST,DELETE等等)，而CBVs需要指定特定的HTTP方法</li></ul><h3 id="8-8-不要使用locals-作为Views-Context"><a href="#8-8-不要使用locals-作为Views-Context" class="headerlink" title="8.8 不要使用locals()作为Views Context"></a>8.8 不要使用locals()作为Views Context</h3><p>从任何调用中返回 locals() 是 anti-pattern(反面模式)。虽然它看上去方便快捷，事实上它太特么耗时了。<br>我们来举一个anti-pattern的例子：</p><pre><code>BAD Exampledef ice_cream_store_display(request, store_id):    store = get_object_or_404(Store, id=store_id)    date = timezone.now()    return render(request, &apos;melted_ice_cream_report.html&apos;, locals())</code></pre><p>表面看起来一切OK，然而，因为我们把一个本应该显式的设计，捣鼓成了隐式的anti-pattern，让这个简单的view有了维护的烦恼。<br>特别强调的是我们根本不知道它会返回什么结果。我们改变任一个变量，返回结果都不会立刻呈现。<br>这就是为什么我们强烈的提倡在views中使用明确的上下文：</p><pre><code>def ice_cream_store_display(request, store_id):    return render(request, &apos;melted_ice_cream_report.html&apos;, dict{        &apos;store&apos;: get_object_or_404(Store, id=store_id),        &apos;now&apos;: timezone.now()    })</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;8-Function-and-Class-Based-Views&quot;&gt;&lt;a href=&quot;#8-Function-and-Class-Based-Views&quot; class=&quot;headerlink&quot; title=&quot;8. Function- and Class-Based Views&quot;&gt;&lt;/a&gt;8. Function- and Class-Based Views&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Function-based views(FBVs) 函数视图&lt;/li&gt;
&lt;li&gt;Class-based views(CBVs)  类视图&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;8-1-什么时候使用FBVs或者CBVs&quot;&gt;&lt;a href=&quot;#8-1-什么时候使用FBVs或者CBVs&quot; class=&quot;headerlink&quot; title=&quot;8.1 什么时候使用FBVs或者CBVs&quot;&gt;&lt;/a&gt;8.1 什么时候使用FBVs或者CBVs&lt;/h3&gt;&lt;p&gt;每当你想实现一个view的时候，考虑下用哪种方法比较好，下面是各种情况下该使用FBVs还是CBVs流程图&lt;br&gt;&lt;img src=&quot;FBVs_CBVs.png&quot; alt=&quot;FBVs_CBVs&quot;&gt;&lt;br&gt;我们更倾向于在大多数情况下使用CBVs来实现&lt;/p&gt;
    
    </summary>
    
      <category term="Backend" scheme="https://morningchen.com/categories/Backend/"/>
    
      <category term="Django" scheme="https://morningchen.com/categories/Backend/Django/"/>
    
    
      <category term="Django" scheme="https://morningchen.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Two Scoops of Django 1.8  学习笔记三</title>
    <link href="https://morningchen.com/2015/09/10/Two-Scoops-of-Django-1-8-notes-3/"/>
    <id>https://morningchen.com/2015/09/10/Two-Scoops-of-Django-1-8-notes-3/</id>
    <published>2015-09-10T01:50:17.000Z</published>
    <updated>2018-09-27T03:56:35.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="7-查询和数据库层"><a href="#7-查询和数据库层" class="headerlink" title="7. 查询和数据库层"></a>7. 查询和数据库层</h2><h3 id="7-1-对单个对象使用get-object-or-404"><a href="#7-1-对单个对象使用get-object-or-404" class="headerlink" title="7.1 对单个对象使用get_object_or_404()"></a>7.1 对单个对象使用<code>get_object_or_404()</code></h3><p>在详情页面视图中，如果你想接受单个对象，用<code>get_object_or_404()</code>代替<code>get()</code><br>警告：只在视图中使用!!!只在视图中使用!!!只在视图中使用!!!</p><h3 id="7-2-谨慎的使用查询，它可能抛出异常"><a href="#7-2-谨慎的使用查询，它可能抛出异常" class="headerlink" title="7.2 谨慎的使用查询，它可能抛出异常"></a>7.2 谨慎的使用查询，它可能抛出异常</h3><p>当你通过<code>get_object_or_404()</code>这个快捷方式得到Model的实例的时候，不需要用try-except封装，<br>因为<code>get_object_or_404()</code>已经帮你封装好了。<br>然而，在其他大多数情况下，你需要使用try-except。一些tips:</p><h4 id="7-2-1-ObjectDoesNotExist-vs-DoesNotExist"><a href="#7-2-1-ObjectDoesNotExist-vs-DoesNotExist" class="headerlink" title="7.2.1 ObjectDoesNotExist vs. DoesNotExist"></a>7.2.1 ObjectDoesNotExist vs. DoesNotExist</h4><p>ObjectDoesNotExist允许被使用在任何model对象中，但是DoesNotExist只能在一些特定的model中使用</p><pre><code>from django.core.exceptions import ObjectDoesNotExistfrom flavors.models import Flavorfrom store.exceptions import OutOfStockdef list_flavor_line_item(sku):    try:        return Flavor.objects.get(sku=sku, quantity__gt=0)    except Flavor.DoesNotExist:        msg = &quot;We are out of {0}&quot;.format(sku)        raise OutOfStock(msg)def list_any_line_item(model, sku):    try:        return model.objects.get(sku=sku, quantity__gt=0)    except ObjectDoesNotExist:        msg = &quot;We are out of {0}&quot;.format(sku)        raise OutOfStock(msg)</code></pre><a id="more"></a><h4 id="7-2-2-当你只是想要一个对象，但是得到了多个"><a href="#7-2-2-当你只是想要一个对象，但是得到了多个" class="headerlink" title="7.2.2 当你只是想要一个对象，但是得到了多个"></a>7.2.2 当你只是想要一个对象，但是得到了多个</h4><p>如果你的查询可能会返回多个对象，用<code>MultipleObjectsReturned</code>来检查</p><pre><code>from flavors.models import Flavorfrom store.exceptions import OutOfStock, CorruptedDatabasedef list_flavor_line_item(sku):    try:        return Flavor.objects.get(sku=sku, quantity__gt=0)    except Flavor.DoesNotExist:        msg = &quot;We are out of {}&quot;.format(sku)        raise OutOfStock(msg)    except Flavor.MultipleObjectsReturned:        msg = &quot;Multiple items have SKU {}. Please fix!&quot;.format(sku)        raise CorruptedDatabase(msg)</code></pre><h3 id="7-3-使用lazy-evaluation-让查询更清晰"><a href="#7-3-使用lazy-evaluation-让查询更清晰" class="headerlink" title="7.3 使用lazy evaluation 让查询更清晰"></a>7.3 使用lazy evaluation 让查询更清晰</h3><p>Django 的ORM 非常强大，它让代码清晰易读，利于维护。<br>通过lazy evaluation， 意味着在数据真正被使用之前，ORM不会调用SQL。<br>我们可以尽可能多的连接ORM方法和函数，直到拿到结果，django都不会接触到数据库层。</p><h3 id="7-4-学习高级的查询工具"><a href="#7-4-学习高级的查询工具" class="headerlink" title="7.4 学习高级的查询工具"></a>7.4 学习高级的查询工具</h3><p>ORM 容易学，直观，涵盖了许多用例，然而还有若干件事情不能做好。在查询集返回后，我们会在python里处理更多的数据。<br>这是耻辱，因为每一个数据库的管理和传输都比python(或ruby, javascript, go, java等等这些语言)要快。<br>取代用python管理数据，我们通常会使用django的高级查询工具。这样做，我们不仅提高了性能，<br>而且比起我们自己创建的基于python的解决办法的代码，我们更喜欢使用已经被测试过的代码。</p><h4 id="7-4-1-查询表达式"><a href="#7-4-1-查询表达式" class="headerlink" title="7.4.1 查询表达式"></a>7.4.1 查询表达式</h4><p>当在数据库上执行读取时，查询表达式被使用在创建值或计算。下面这个例子中，列出所有平均订单数大于一次的客户</p><pre><code># Bad Examplefrom models.customers import Customercustomers = []for customer in Customer.objects.iterate():    if customer.scoop_ordered &gt; customer.srore_visits:        customers.append(customer)</code></pre><p>这个例子让我们不寒而栗，为什么？</p><ul><li>它用python来一个个遍历数据库中所有的顾客记录，这太慢了而且还占用内存</li><li>在使用的情况下，它都可能产生竞态(race condition)，当我们运行这段代码时，<br>如果在别的地方，恰好customers正在与数据库进行交互，不是READ,而是UPDATE，那么这段代码的遍历会损失掉一些数据</li></ul><p>幸运的是，django提供了一个更有效的，解决竞态(race condition)问题的方法</p><pre><code>from django.db.models import Ffrom models.customers import Customercustomers = Customer.objects.filter(scoops_ordered__gt=F(&apos;store_visits&apos;))</code></pre><p><code>F()</code>这个方法可以让数据库它自己来执行比较，类似下面的SQL语句：</p><pre><code>SELECT * from customers_customer where scoops_ordered &gt; store_visits</code></pre><h4 id="7-4-2-数据库函数"><a href="#7-4-2-数据库函数" class="headerlink" title="7.4.2 数据库函数"></a>7.4.2 数据库函数</h4><p>UPPER(), LOWER(), COALESCE(), CONCAT(), LENGTH(), SUBSTR()</p><p><a href="https://docs.djangoproject.com/en/1.8/ref/models/database-functions/" target="_blank" rel="noopener">https://docs.djangoproject.com/en/1.8/ref/models/database-functions/</a></p><h3 id="7-5-不要抛弃原始的SQL语句，除非有必要"><a href="#7-5-不要抛弃原始的SQL语句，除非有必要" class="headerlink" title="7.5 不要抛弃原始的SQL语句，除非有必要"></a>7.5 不要抛弃原始的SQL语句，除非有必要</h3><p>大多数情况下我们都会使用ORM来进行数据管理和操作，<br>那么什么时候该使用SQL语句呢，如果使用SQL语句能大大的简化python代码，不要犹豫，用吧。<br>比如说你连结了若干个查询集操作，而且每个操作都是在庞大的数据下进行的，用SQL语句也许会更有效。</p><h3 id="7-6-根据需要加上索引"><a href="#7-6-根据需要加上索引" class="headerlink" title="7.6 根据需要加上索引"></a>7.6 根据需要加上索引</h3><p>给任何model字段加上<code>db_index=True</code>都是容易的，但是判断该什么时候使用的话就不是那么容易了。<br>我们更倾向于开始的时候不加索引，根据需要再加<br>什么时候考虑加上索引：</p><ul><li>这个索引使用频繁，占据了所有查询的10-20%</li><li>有真实数据，或者接近真实数据，因此我们可以分析出索引的结果</li><li>我们能通过跑测试来判断这个索引是否产生了改善的结果</li></ul><h3 id="7-7-事务-Transactions"><a href="#7-7-事务-Transactions" class="headerlink" title="7.7 事务(Transactions)"></a>7.7 事务(Transactions)</h3><p>django1.8的ORM默认行为是当查询调用时自动提交，在数据改变的情况下，这意味着每时每刻a.create() 或者 update()都在被调用，<br>它立刻改变了数据库里的数据。它的优势是让初期开发者更好的理解ORM，<br>劣势是如果一个视图需要存在2个或者多个数据更改，而只有一个更改成功了，那么这个数据可能有崩溃的风险</p><p>解决这个风险的办法是通过使用数据库事务，<br>一个数据库事务通常包含了一个序列的对数据库的读/写操作。它的存在包含有以下两个目的：</p><ol><li>为数据库操作序列提供了一个从失败中恢复到正常状态的方法，同时提供了数据库即使在异常状态下仍能保持一致性的方法。</li><li>当多个应用程序在并发访问数据库时，可以在这些应用程序之间提供一个隔离方法，以防止彼此的操作互相干扰。<br>当事务被提交给了DBMS（数据库管理系统），则DBMS（数据库管理系统）需要确保该事务中的所有操作都成功完成且其结果被永久保存在数据库中，如果事务中有的操作没有成功完成，则事务中的所有操作都需要被回滚，回到事务执行前的状态;同时，该事务对数据库或者其他事务的执行无影响，所有的事务都好像在独立的运行。</li></ol><p>并非任意的对数据库的操作序列都是数据库事务。数据库事务拥有以下四个特性，习惯上被称之为ACID特性。</p><ul><li>原子性（Atomicity）：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。</li><li>一致性（Consistency）：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态的含义是数据库中的数据应满足完整性约束。</li><li>隔离性（Isolation）：多个事务并发执行时，一个事务的执行不应影响其他事务的执行。</li><li>持久性（Durability）：已被提交的事务对数据库的修改应该永久保存在数据库中。</li></ul><p>django提供了一个强大的，相当易用的事务机制，在相对直观的模式中使用装饰器和上下文管理器保障了项目中数据的完整性。</p><h4 id="7-7-1-在一个事务中封装每个http-request"><a href="#7-7-1-在一个事务中封装每个http-request" class="headerlink" title="7.7.1 在一个事务中封装每个http request"></a>7.7.1 在一个事务中封装每个http request</h4><pre><code># settings/base.pyDATABASES = {    &apos;default&apos;: {        # ...        &apos;ATOMIC_REQUESTS&apos;: True,    },}</code></pre><p>django中通过设置ATOMIC_REQUESTS 让处理事务里的所有web请求变得更容易。通过设置’ATOMIC_REQUESTS’: True,<br>所有的requests都被封装在了事务中，包括只读数据。这种方法的优势是保证了安全性：所有在视图中的数据查询都被保护起来了，<br>劣势是性能受到了影响。我们无法告诉你这会影响多少性能，因为它依赖独立的数据库设计和不同的数据库引擎</p><p>当用ATOMIC_REQUESTS的时候，还有一件事情需要牢记，出现错误的时候只有数据库的状态会回滚。<br>发出一封确认邮件，然后封装的request事务回滚了，出现这种情况会令人相当尴尬。这个问题可能会发生在数据库以外的任何的<code>写入</code>过程中：<br>发送邮件，短信服务，调用第三方API，写入系统文件等等。然而，当写一个能create/update/delete的views的时候，而且它不与数据库条目进行交互，<br>你应该给view加上transaction.non_atomic_requests()装饰器</p><pre><code># flavors/views.pyfrom django.db import transactionfrom django.http import HttpResponsefrom django.shortcuts import get_object_or_404from django.utils import timezonefrom .models import Flavor@transaction.non_atomic_requestsdef posting_flavor_status(request, pk, status):    flavor = get_object_or_404(Flavor, pk=pk)    # This will execute in autocommit mode (Django&apos;s default).    flavor.latest_status_change_attempt = timezone.now()    flavor.save()    with transaction.atomic():        # This code executes inside a transaction.        flavor.status = status        flavor.latest_status_change_success = timezone.now()        flavor.save()        return HttpResponse(&quot;Hooray&quot;)    # If the transaction fails, return the appropriate status    return HttpResponse(&quot;Sadness&quot;, status_code=400)</code></pre><h4 id="7-7-2-明确的事务声明"><a href="#7-7-2-明确的事务声明" class="headerlink" title="7.7.2 明确的事务声明"></a>7.7.2 明确的事务声明</h4><p>明确的事务声明是给站点增加性能的方式之一，换句话说，就是指定哪个视图和业务逻辑封装在事务中，哪个不封装。<br>当谈到事务的时候，下面是一些好的准则：</p><ul><li>不修改数据的数据库操作不该被封装在事务中</li><li>修改数据的数据库操作应该被封装在事务中</li><li>包含数据库的修改的特殊情况，需要数据库的读取和性能方面的考虑可能会影响到前两个准则</li></ul><p>如果还是不太清楚的话，下面这张表可以很好的解释：</p><table><thead><tr><th>目的</th><th>ORM方法</th><th>通常情况下使用事务</th></tr></thead><tbody><tr><td>创建数据</td><td>.create(), .bulk_create(), .get_or_create()</td><td>可以</td></tr><tr><td>接收数据</td><td>.get(), .filter(), .count(), .iterate(), .exists(), .exclude(), .in_bulk, 等等</td><td></td></tr><tr><td>修改数据</td><td>.update()</td><td>可以</td></tr><tr><td>删除数据</td><td>.delete()</td><td>可以</td></tr></tbody></table><h4 id="7-7-3-django-http-StreamingHttpResponse-and-Transactions"><a href="#7-7-3-django-http-StreamingHttpResponse-and-Transactions" class="headerlink" title="7.7.3 django.http.StreamingHttpResponse and Transactions"></a>7.7.3 django.http.StreamingHttpResponse and Transactions</h4><p>如果视图函数正在返回一个django.http.StreamingHttpResponse，一旦response发生，它不可能去处理事务错误。如果你的项目中用到了这个response方法，那么ATOMIC_REQUESTS应该遵循下面其中一个：</p><ul><li>把ATOMIC_REQUESTS设置成默认的False，然后明确事务声明，或者…</li><li>在django.db.transaction.non_atomic_requests装饰器中封装view</li></ul><h4 id="7-7-4-MySQL中的事务处理"><a href="#7-7-4-MySQL中的事务处理" class="headerlink" title="7.7.4 MySQL中的事务处理"></a>7.7.4 MySQL中的事务处理</h4><p>MyISAM不支持事务处理，InnoDB支持</p><ul><li><a href="https://docs.djangoproject.com/en/1.8/topics/db/transactions/#transactions-in-mysql" target="_blank" rel="noopener">https://docs.djangoproject.com/en/1.8/topics/db/transactions/#transactions-in-mysql</a></li><li><a href="http://dev.mysql.com/doc/refman/5.0/en/sql-syntax-transactions.html" target="_blank" rel="noopener">http://dev.mysql.com/doc/refman/5.0/en/sql-syntax-transactions.html</a></li></ul><h4 id="7-7-5-关于Django-ORM-事务处理的资料"><a href="#7-7-5-关于Django-ORM-事务处理的资料" class="headerlink" title="7.7.5 关于Django ORM 事务处理的资料"></a>7.7.5 关于Django ORM 事务处理的资料</h4><ul><li>文档 <a href="https://docs.djangoproject.com/en/1.8/topics/db/transactions/" target="_blank" rel="noopener">https://docs.djangoproject.com/en/1.8/topics/db/transactions/</a></li><li>real python <a href="https://realpython.com/blog/python/transaction-management-with-django-1-6/" target="_blank" rel="noopener">https://realpython.com/blog/python/transaction-management-with-django-1-6/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;7-查询和数据库层&quot;&gt;&lt;a href=&quot;#7-查询和数据库层&quot; class=&quot;headerlink&quot; title=&quot;7. 查询和数据库层&quot;&gt;&lt;/a&gt;7. 查询和数据库层&lt;/h2&gt;&lt;h3 id=&quot;7-1-对单个对象使用get-object-or-404&quot;&gt;&lt;a href=&quot;#7-1-对单个对象使用get-object-or-404&quot; class=&quot;headerlink&quot; title=&quot;7.1 对单个对象使用get_object_or_404()&quot;&gt;&lt;/a&gt;7.1 对单个对象使用&lt;code&gt;get_object_or_404()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;在详情页面视图中，如果你想接受单个对象，用&lt;code&gt;get_object_or_404()&lt;/code&gt;代替&lt;code&gt;get()&lt;/code&gt;&lt;br&gt;警告：只在视图中使用!!!只在视图中使用!!!只在视图中使用!!!&lt;/p&gt;
&lt;h3 id=&quot;7-2-谨慎的使用查询，它可能抛出异常&quot;&gt;&lt;a href=&quot;#7-2-谨慎的使用查询，它可能抛出异常&quot; class=&quot;headerlink&quot; title=&quot;7.2 谨慎的使用查询，它可能抛出异常&quot;&gt;&lt;/a&gt;7.2 谨慎的使用查询，它可能抛出异常&lt;/h3&gt;&lt;p&gt;当你通过&lt;code&gt;get_object_or_404()&lt;/code&gt;这个快捷方式得到Model的实例的时候，不需要用try-except封装，&lt;br&gt;因为&lt;code&gt;get_object_or_404()&lt;/code&gt;已经帮你封装好了。&lt;br&gt;然而，在其他大多数情况下，你需要使用try-except。一些tips:&lt;/p&gt;
&lt;h4 id=&quot;7-2-1-ObjectDoesNotExist-vs-DoesNotExist&quot;&gt;&lt;a href=&quot;#7-2-1-ObjectDoesNotExist-vs-DoesNotExist&quot; class=&quot;headerlink&quot; title=&quot;7.2.1 ObjectDoesNotExist vs. DoesNotExist&quot;&gt;&lt;/a&gt;7.2.1 ObjectDoesNotExist vs. DoesNotExist&lt;/h4&gt;&lt;p&gt;ObjectDoesNotExist允许被使用在任何model对象中，但是DoesNotExist只能在一些特定的model中使用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.core.exceptions import ObjectDoesNotExist

from flavors.models import Flavor
from store.exceptions import OutOfStock

def list_flavor_line_item(sku):
    try:
        return Flavor.objects.get(sku=sku, quantity__gt=0)
    except Flavor.DoesNotExist:
        msg = &amp;quot;We are out of {0}&amp;quot;.format(sku)
        raise OutOfStock(msg)

def list_any_line_item(model, sku):
    try:
        return model.objects.get(sku=sku, quantity__gt=0)
    except ObjectDoesNotExist:
        msg = &amp;quot;We are out of {0}&amp;quot;.format(sku)
        raise OutOfStock(msg)
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Backend" scheme="https://morningchen.com/categories/Backend/"/>
    
      <category term="Django" scheme="https://morningchen.com/categories/Backend/Django/"/>
    
    
      <category term="Django" scheme="https://morningchen.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Two Scoops of Django 1.8 学习笔记二</title>
    <link href="https://morningchen.com/2015/09/07/Two-Scoops-of-Django-1-8-notes-2/"/>
    <id>https://morningchen.com/2015/09/07/Two-Scoops-of-Django-1-8-notes-2/</id>
    <published>2015-09-07T09:27:03.000Z</published>
    <updated>2018-09-27T03:56:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="6-Model-最佳实践"><a href="#6-Model-最佳实践" class="headerlink" title="6. Model 最佳实践"></a>6. Model 最佳实践</h2><p>Models是大多数django项目的基础，在创建Model的时候请三思而后行，充分考虑之后再创建大而全的Model。</p><h3 id="6-1-基础"><a href="#6-1-基础" class="headerlink" title="6.1 基础"></a>6.1 基础</h3><h4 id="6-1-1-拆分拥有过多models的app"><a href="#6-1-1-拆分拥有过多models的app" class="headerlink" title="6.1.1 拆分拥有过多models的app"></a>6.1.1 拆分拥有过多models的app</h4><p>如果一个app有20+ models,考虑下能不能把这些models拆分到更小的app里面，因为这可能意味着你的app做了太多的事情。<br>在实际中，我们一般会将这个数值减小至每个app不超过5个models</p><h4 id="6-1-2-谨慎使用model继承"><a href="#6-1-2-谨慎使用model继承" class="headerlink" title="6.1.2 谨慎使用model继承"></a>6.1.2 谨慎使用model继承</h4><p>Django中的model继承是一个棘手的问题，Django提供了三种继承方式：</p><ul><li>Abstract base classes</li><li>Multi-table inheritance</li><li>Proxy models</li></ul><p>他们之间的具体优缺点比较如下：</p><a id="more"></a><table><thead><tr><th>model继承类型</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>不使用model继承：如果models有一个共同的字段，给每个model都赋予那个字段</td><td>便于理解models和数据库表之间的关系</td><td>过多的字段穿插在models中，不利于维护</td></tr><tr><td>Abstract base classes(抽象基类)：仅用于衍生模型</td><td>一个抽象父类中拥有共同的字段，从而减少了我们的输入。</td><td>不能单独使用父类。</td></tr><tr><td>Multi-table inheritance（多表继承）：用于将父类子类联系起来，隐晦的意思就是OneToOneField</td><td>给了每个model一张表，因此我们既能查询父类也可以查询子类。而且我们从父类中得到了一个子对象：parent.child</td><td>增加了大量的开销，因为上一个子表的每个查询需要加入到所有父表。我们强烈建议不要使用多表继承。</td></tr><tr><td>Proxy models（代理模型）：仅用于原始模型</td><td>让我们拥有具备不同Python行为的model别名。</td><td>我们不能修改model的字段</td></tr></tbody></table><p>那么具体什么时候该使用哪一种 model继承呢？下面提供一个简单的规则：</p><ul><li>如果models之间只有极小的重叠部分（比如说两个模型只有一两个共同的字段），那么就不必使用 model继承，给每个model都加上那个字段就好啦</li><li>如果models之间有很多重叠部分，而且这些重复的字段的维护会给我们造成困惑和意想不到的错误，<br>那么在大多数情况下就需要考虑代码重构了。因此我们把这些共同的字段写到Abstract base classes中</li><li>Proxy models 是一个偶尔有用的便捷功能，但是他和其他两种 model继承方式有非常大的不同</li><li>每个人都应该避免使用Multi-table inheritance，取而代之的是使用 OneToOneField 和 ForeignKey</li></ul><h4 id="6-1-3-实践中的-model继承-TimeStampedModel"><a href="#6-1-3-实践中的-model继承-TimeStampedModel" class="headerlink" title="6.1.3 实践中的 model继承: TimeStampedModel"></a>6.1.3 实践中的 model继承: TimeStampedModel</h4><p>在Django项目中大多数 model都会包含一个能创建和修改的时间戳字段。最好的方法就是写一个TimeStampedModel</p><pre><code># core/models.pyfrom django.db import modelsclass TimeStampedModel(models.Model):    &quot;&quot;&quot;    An abstract base class model that provides    self-updating created and modified fields.    &quot;&quot;&quot;    created = models.DateTimeField(auto_now_add=True)    modified = models.DateTimeField(auto_now=True)    class Meta:        abstract = True</code></pre><p>注意上面代码的最后2句，他把这个model转化成了abstract base class.<br>我们定义一个继承TimeStampedModel的新的class的之后，运行migrate,<br>Django不会在数据库创建一张名为 core_timestampedmodel的表。</p><pre><code># flavors/models.pyfrom django.db import modelsfrom core.models import TimeStampedModelclass Flavor(TimeStampedModel):    title = models.CharField(max_length=200)</code></pre><p>Flavor继承自 TimeStampedModel 当我们migrate的时候只会创建一张名为 flavors_flavor的表。这说明Abstract base classes不会单独的创建一张表，简直完美。</p><h4 id="6-1-4-Database-Migrations-数据迁移"><a href="#6-1-4-Database-Migrations-数据迁移" class="headerlink" title="6.1.4 Database Migrations 数据迁移"></a>6.1.4 Database Migrations 数据迁移</h4><p>创建迁移文件的tips：</p><ul><li>创建一个新的app 或者 model之后，花一点点时间来给这个 model创建一个初始的 django.db.migrations。我们只需要python manage.py makemigrations</li><li>在运行之前检查一下生成的migration代码，特别是涉及到较复杂的改变的时候。并且复查一下SQL</li><li>用<a href="https://docs.djangoproject.com/en/1.8/ref/settings/#std:setting-MIGRATION_MODULES" target="_blank" rel="noopener">MIGRATION_MODULES</a> 来管理那些没有自己的django.db.migrations风格的迁移文件</li><li>不用担心创建了多少个迁移文件，如果数量太过笨拙，使用 <a href="https://docs.djangoproject.com/en/1.8/topics/migrations/#squashing-migrations" target="_blank" rel="noopener">squashmigrations</a>使他们就范</li></ul><p>migrations的部署和管理：</p><ul><li>在项目部署之前，一定要检查是否可以回滚migrations。</li><li>如果一个项目有上百万条数据，在生产环境服务器上运行migration之前，请在staging服务器上做粗犷测试，在真实数据上跑migrations会比预想中花更多更多更多时间！</li><li><p>如果你在用Mysql:</p><ol><li>在任一架构改变之前必须拆分数据库，MYSQL缺乏围绕架构更改的事务支持，因此不可能回滚</li><li>如果可以的话，在执行修改之前把这个项目设置成只读模式</li><li>如果不小心，在庞大的表中修改了架构，那么将会花很长的时间，不是几秒几分的概念，而是几小时</li></ol></li></ul><h3 id="6-2-Django-Model-设计"><a href="#6-2-Django-Model-设计" class="headerlink" title="6.2 Django Model 设计"></a>6.2 Django Model 设计</h3><p>如何设计一个好的django models 是最难的主题之一</p><h4 id="6-2-1-规范化开端"><a href="#6-2-1-规范化开端" class="headerlink" title="6.2.1 规范化开端"></a>6.2.1 规范化开端</h4><p>开始之前，请熟悉下数据库标准化(Database normalization)</p><ul><li><a href="https://en.wikipedia.org/wiki/Database_normalization" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Database_normalization</a></li><li><a href="https://en.wikibooks.org/wiki/Relational_Database_Design/Normalization" target="_blank" rel="noopener">https://en.wikibooks.org/wiki/Relational_Database_Design/Normalization</a></li></ul><h4 id="6-2-2-什么时候用null和blank"><a href="#6-2-2-什么时候用null和blank" class="headerlink" title="6.2.2 什么时候用null和blank"></a>6.2.2 什么时候用null和blank</h4><table><thead><tr><th>字段类型</th><th>设置 null=True</th><th>设置 blank=True</th></tr></thead><tbody><tr><td>CharField, TextField, SlugField, EmailField, CommaSepararedIntegerField, UUIDField</td><td>不行</td><td>可以</td></tr><tr><td>FileField, ImageField</td><td>不行</td><td>可以</td></tr><tr><td>BooleanField</td><td>不行 用NullBooleanField代替</td><td>不行</td></tr><tr><td>IntegerField, FloatField, DecimalField, DurationField, etc</td><td>可以</td><td>可以</td></tr><tr><td>DateTimeField, DateField, TimeField, etc</td><td>可以</td><td>可以</td></tr><tr><td>ForeignKey, ManyToManyField, OneToOneField</td><td>可以</td><td>可以</td></tr><tr><td>GenericIPAddressField</td><td>可以</td><td>可以</td></tr><tr><td>IPAddressField</td><td>已弃用  用GenericIPAddressField代替</td><td>已弃用  用GenericIPAddressField代替</td></tr></tbody></table><h4 id="6-2-3-避免使用Generic-Relations"><a href="#6-2-3-避免使用Generic-Relations" class="headerlink" title="6.2.3 避免使用Generic Relations"></a>6.2.3 避免使用Generic Relations</h4><p>使用Generic Relations的弊大于利，简而言之：</p><ul><li>避免使用 Generic Relations 和 GenericForeignKey</li><li>如果你觉得你需要使用 Generic Relations的话，看看能不能通过更好的 model设计或者 PostgreSQL里的新字段代替</li><li>如果必须要用，尝试使用现成的第三方app，第三方app提供的隔离将有助于保证数据更干净</li></ul><h4 id="6-2-4-PostgreSQL中的特别字段什么时候用null和blank"><a href="#6-2-4-PostgreSQL中的特别字段什么时候用null和blank" class="headerlink" title="6.2.4 PostgreSQL中的特别字段什么时候用null和blank"></a>6.2.4 PostgreSQL中的特别字段什么时候用null和blank</h4><table><thead><tr><th>字段类型</th><th>设置 null=True</th><th>设置 blank=True</th></tr></thead><tbody><tr><td>ArrayField</td><td>可以</td><td>可以</td></tr><tr><td>HStoreField</td><td>可以</td><td>可以</td></tr><tr><td>IntegerRangeField, BigIntegerRangeField, FloatRangeField</td><td>可以</td><td>可以</td></tr><tr><td>DateTimeRangeField, DateRangeField</td><td>可以</td><td>可以</td></tr></tbody></table><h3 id="6-3-The-Model-meta-API"><a href="#6-3-The-Model-meta-API" class="headerlink" title="6.3 The Model _meta API"></a>6.3 The Model <code>_meta</code> API</h3><p>Django 1.8之前，Model <code>_meta</code> API 都还是非官方的，即使修改了api的内容也不会提及。<br>最初的目的只是让Model它自己储存一些额外的信息，然而这一功能已经证实<code>_meta</code>是相当有用的，所以现在有API文档了</p><p>大多数项目里你都不会需要 <code>_meta</code>，它的主要用途是，当你需要</p><ul><li>得到model的字段列表</li><li>得到class的特定字段（或者它的继承链，或者它的派生）</li><li>在跨未来的django版本中，确保如何让你得到这些信息保持不变</li></ul><p>例如下面这些例子：</p><ul><li>构造一个django model的自省工具</li><li>构造自定义的表单库</li><li>创建一个类管理员工具来与django model进行编辑和交互</li><li>写一个可视化的或者具有分析力的库</li></ul><p>扩展阅读：</p><ul><li>Model <code>_meta</code> 文档: <a href="https://docs.djangoproject.com/en/1.8/ref/models/meta/" target="_blank" rel="noopener">https://docs.djangoproject.com/en/1.8/ref/models/meta/</a></li><li>django 1.8 的更新说明中关于 model <code>_meta</code> 的解释<a href="https://docs.djangoproject.com/en/1.8/releases/1.8/#model-meta-api" target="_blank" rel="noopener">https://docs.djangoproject.com/en/1.8/releases/1.8/#model-meta-api</a></li></ul><h3 id="6-4-Model-Managers-模型管理器"><a href="#6-4-Model-Managers-模型管理器" class="headerlink" title="6.4 Model Managers 模型管理器"></a>6.4 Model Managers 模型管理器</h3><p>每当我们用django的ORM来查询model的时候， 我们都会用到一个名叫 Model Managers的接口来与数据库进行交互, Model Managers可以说是这个模型类的所有可能的实例。<br>Django给每个model都提供了一个默认的 Model Managers，但是我们依然可以定义自己的Model Managers.</p><pre><code>from django.db import modelsfrom django.utils import timezoneclass PublishedManager(models.Manager):    use_for_related_fields = True    def published(self, **kwargs):        return self.filter(pub_date__lte=timezone.now(), **kwargs)class FlavorReview(models.Model):    review = models.CharField(max_length=255)    pub_date = models.DateTimeField()    # add our custom model manager    objects = PublishedManager()</code></pre><p>现在如果我们想要先显示所有的评论，然后显示已发布的评论，可以这样做</p><pre><code>&gt;&gt;&gt; from reviews.models import FlavorReview&gt;&gt;&gt; FlavorReview.objects.count()35&gt;&gt;&gt; FlavorReview.objects.published().count()31</code></pre><p>很简单不是吗？但是如果你只是增加了第二个Model Managers，你可能会用到下面的方法：</p><pre><code># Bad example&gt;&gt;&gt; from reviews.models import FlavorReview&gt;&gt;&gt; FlavorReview.objects.filter().count()35&gt;&gt;&gt; FlavorReview.published().filter.count()31</code></pre><p>表面上看来，取代默认的Model Managers 是常理的做法，不幸的是，在实际的项目开发中当我们用到这个方法的时候应该非常的小心。为啥？</p><ul><li>第一，当我们用model继承的时候，abstract base classes的子类接受来自他们父类的manager，但是concrete base classes就不会。</li><li>第二，应用到model class的第一个manager会被django当作默认的manager，这显然打破了python的模式，导致会从QuerySet中出现不可预知的结果<br>了解到以上知识之后，你应该在自定义model manager之前先定义好<code>objects = models.Managers()</code></li></ul><p>扩展阅读：<a href="https://docs.djangoproject.com/en/1.8/topics/db/managers/" target="_blank" rel="noopener">https://docs.djangoproject.com/en/1.8/topics/db/managers/</a></p><h3 id="6-5-理解-Fat-Models"><a href="#6-5-理解-Fat-Models" class="headerlink" title="6.5 理解 Fat Models"></a>6.5 理解 Fat Models</h3><p>之前提到过 Fat Models，意思是不要把数据相关的代码都放在Views和Templates里面，<br>而是将他们的逻辑封装在models methods, classmethods, properties,甚至可以是manager method里。<br>这样，任意一个views或者任务都可以用这个相同的逻辑。例如我们有个Ice Cream的评论model，我们可能会接触到以下的方法：</p><ul><li><code>Review.create_review(cls, user, rating, title, description)</code><br>  一个创建评论的方法，从HTML和REST视图调用model class本身，以及一个接受电子表格的导入工具</li><li><code>review.product_average</code>一个评论的实例属性，返回这个评论项目的平均排名。用于审查的细节视图，以便读者不离开页面就能感受到整体的意见</li><li><code>review.found_useful(self, user, yes)</code>这个方法可以设置成是或者否，让读者发现评论是否有用。用于详情和列表视图，来实现HTML和REST</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;6-Model-最佳实践&quot;&gt;&lt;a href=&quot;#6-Model-最佳实践&quot; class=&quot;headerlink&quot; title=&quot;6. Model 最佳实践&quot;&gt;&lt;/a&gt;6. Model 最佳实践&lt;/h2&gt;&lt;p&gt;Models是大多数django项目的基础，在创建Model的时候请三思而后行，充分考虑之后再创建大而全的Model。&lt;/p&gt;
&lt;h3 id=&quot;6-1-基础&quot;&gt;&lt;a href=&quot;#6-1-基础&quot; class=&quot;headerlink&quot; title=&quot;6.1 基础&quot;&gt;&lt;/a&gt;6.1 基础&lt;/h3&gt;&lt;h4 id=&quot;6-1-1-拆分拥有过多models的app&quot;&gt;&lt;a href=&quot;#6-1-1-拆分拥有过多models的app&quot; class=&quot;headerlink&quot; title=&quot;6.1.1 拆分拥有过多models的app&quot;&gt;&lt;/a&gt;6.1.1 拆分拥有过多models的app&lt;/h4&gt;&lt;p&gt;如果一个app有20+ models,考虑下能不能把这些models拆分到更小的app里面，因为这可能意味着你的app做了太多的事情。&lt;br&gt;在实际中，我们一般会将这个数值减小至每个app不超过5个models&lt;/p&gt;
&lt;h4 id=&quot;6-1-2-谨慎使用model继承&quot;&gt;&lt;a href=&quot;#6-1-2-谨慎使用model继承&quot; class=&quot;headerlink&quot; title=&quot;6.1.2 谨慎使用model继承&quot;&gt;&lt;/a&gt;6.1.2 谨慎使用model继承&lt;/h4&gt;&lt;p&gt;Django中的model继承是一个棘手的问题，Django提供了三种继承方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Abstract base classes&lt;/li&gt;
&lt;li&gt;Multi-table inheritance&lt;/li&gt;
&lt;li&gt;Proxy models&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他们之间的具体优缺点比较如下：&lt;/p&gt;
    
    </summary>
    
      <category term="Backend" scheme="https://morningchen.com/categories/Backend/"/>
    
      <category term="Django" scheme="https://morningchen.com/categories/Backend/Django/"/>
    
    
      <category term="Django" scheme="https://morningchen.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Two Scoops of Django 1.8 学习笔记一</title>
    <link href="https://morningchen.com/2015/09/02/Two-Scoops-of-Django-1-8-notes-1/"/>
    <id>https://morningchen.com/2015/09/02/Two-Scoops-of-Django-1-8-notes-1/</id>
    <published>2015-09-02T01:27:06.000Z</published>
    <updated>2018-09-27T03:56:26.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近刚把Django的官方文档的重要部分看完，准备开始刷《Two Scoops of Django 1.8》这本书进行进阶，写的真的好好啊～</p><h2 id="核心思想"><a href="#核心思想" class="headerlink" title="核心思想"></a>核心思想</h2><ul><li>Keep It Simple, Stupid</li><li>Fat Models, Utility Modules, Thin Views, Stupid Templates</li><li>Start With Django by Default</li><li>Be Familiar with Django’s Design Philosophies</li><li>The Twelve-Factor App</li></ul><h2 id="1-编码风格"><a href="#1-编码风格" class="headerlink" title="1. 编码风格"></a>1. 编码风格</h2><h3 id="1-1-易读性"><a href="#1-1-易读性" class="headerlink" title="1.1 易读性"></a>1.1 易读性</h3><ul><li>避免简写的变量名</li><li>写出你的函数变量名</li><li>记录你的classes 和 methods</li><li>给代码注释</li><li>将重复的代码重构到函数或者方法里</li><li>保持函数和方法的简短，一个好的检验方法是，不用滚动就可以看到整个函数或方法</li></ul><a id="more"></a><h3 id="1-2-参考PEP8-编码规范"><a href="#1-2-参考PEP8-编码规范" class="headerlink" title="1.2 参考PEP8 编码规范"></a>1.2 参考PEP8 编码规范</h3><ul><li>每层4个空格缩进</li><li>每个class 间隔2行</li><li>class里的method间隔1行</li><li>每行限制在79个字符以内</li></ul><h3 id="1-3-import顺序"><a href="#1-3-import顺序" class="headerlink" title="1.3 import顺序"></a>1.3 import顺序</h3><ol><li>standard library</li><li>core Django</li><li>third-party App</li><li>your apps</li></ol><h3 id="1-4-使用明确的相对的import"><a href="#1-4-使用明确的相对的import" class="headerlink" title="1.4 使用明确的相对的import"></a>1.4 使用明确的相对的import</h3><p>不要硬编码</p><pre><code>from cones.models import Wafflecone</code></pre><p>要介样</p><pre><code>from .models import Wafflecone</code></pre><h3 id="1-5-避免使用import"><a href="#1-5-避免使用import" class="headerlink" title="1.5 避免使用import *"></a>1.5 避免使用import *</h3><p>不要介样</p><pre><code>from django.db.models import *</code></pre><p>要介样</p><pre><code>from django.db import models</code></pre><h3 id="1-6-Django-Coding-Style"><a href="#1-6-Django-Coding-Style" class="headerlink" title="1.6 Django Coding Style"></a>1.6 Django Coding Style</h3><ul><li><a href="https://docs.djangoproject.com/en/1.8/internals/contributing/writing-code/coding-style/" target="_blank" rel="noopener">Django官方代码风格</a></li><li>URL Pattern名 用下划线( _ )不要用破折号( - )</li><li>模板名 用下划线( _ )不要用破折号( - )</li></ul><h3 id="1-7-选择一个-JS-HTML-CSS-代码样式手册"><a href="#1-7-选择一个-JS-HTML-CSS-代码样式手册" class="headerlink" title="1.7 选择一个 JS, HTML, CSS 代码样式手册"></a>1.7 选择一个 JS, HTML, CSS 代码样式手册</h3><p>JS:</p><ul><li><a href="https://github.com/rwaldron/idiomatic.js/" target="_blank" rel="noopener">idiomatic.js</a></li><li><a href="https://github.com/madrobby/pragmatic.js" target="_blank" rel="noopener">pragmatic.js</a></li><li><a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">airbnb</a></li><li><a href="https://github.com/felixge/node-style-guide" target="_blank" rel="noopener">node.js</a></li><li><a href="http://javascript.crockford.com/code.html" target="_blank" rel="noopener">Code Conventions for the JavaScript Programming Language</a></li></ul><p>HTML CSS:</p><ul><li><a href="http://codeguide.co/" target="_blank" rel="noopener">Code Guide by @mdo</a></li><li><a href="https://github.com/necolas/idiomatic-css" target="_blank" rel="noopener">idiomatic-css</a></li></ul><h2 id="2-最佳的-Django环境设置"><a href="#2-最佳的-Django环境设置" class="headerlink" title="2. 最佳的 Django环境设置"></a>2. 最佳的 Django环境设置</h2><ul><li><p>每个地方都使用同一个数据库引擎</p><p>  无论是本地开发环境还是生产环境都要保持使用同一种数据库引擎，<br>  很多开发者在开发环境使用SQLite3，而在生产环境使用PostgreSQL，这是非常不好的。</p></li><li><p>用Pip 和 Virtualenv 进行环境隔离</p></li><li>通过pip 安装django和其他依赖</li><li>使用git当作版本控制</li></ul><h2 id="3-Django-项目布局"><a href="#3-Django-项目布局" class="headerlink" title="3. Django 项目布局"></a>3. Django 项目布局</h2><p>django默认的布局不咋地，<br>我们更倾向的项目布局是三层结构</p><ul><li>repository_root</li><li>django_project_root</li><li>configuration_root</li></ul><p>第一层repository_root是我们项目的绝对根目录，里面除了有django_project_root之外，<br>还有其他一些至关重要的组件，比如README.rst, docs/, gitignore, requirements.txt,<br>常见的错误是把django_project_root当作repository_root</p><p>第二层django_project_root才是我们的django项目目录，所有的python代码都应该在里面</p><p>第三层configuration_root是settings模块和 base URLConf(urls.py)放的地方，<br>他必须是一个有效的python包(里面有<strong>init</strong>.py)</p><p>一个例子</p><pre><code>icecreamratings_project/    .gitignore    Makefile    docs/    README.rst    requirements.txt    icecreamratings/        manage.py        media/        products/        profiles/        ratings/        static/        templates/        config/            __init__.py            settings/            urls.py            wsgi.py</code></pre><p>可以通过Cookiecutter生成项目样板</p><pre><code>➜  ~  pip install cookiecutterCollecting cookiecutter  Downloading cookiecutter-1.0.0-py2.py3-none-any.whlCollecting PyYAML&gt;=3.10 (from cookiecutter)  Downloading PyYAML-3.11.tar.gz (248kB)    100% |████████████████████████████████| 249kB 550kB/sCollecting mock (from cookiecutter)  Downloading mock-1.3.0-py2.py3-none-any.whl (56kB)    100% |████████████████████████████████| 57kB 1.6MB/sCollecting click&lt;4.0 (from cookiecutter)  Downloading click-3.3-py2.py3-none-any.whl (58kB)    100% |████████████████████████████████| 61kB 3.3MB/sCollecting binaryornot&gt;=0.2.0 (from cookiecutter)  Downloading binaryornot-0.4.0-py2.py3-none-any.whlRequirement already satisfied (use --upgrade to upgrade): jinja2&gt;=2.7 in /usr/local/lib/python2.7/site-packages (from cookiecutter)Collecting funcsigs (from mock-&gt;cookiecutter)  Downloading funcsigs-0.4-py2.py3-none-any.whlRequirement already satisfied (use --upgrade to upgrade): pbr&gt;=0.11 in /usr/local/lib/python2.7/site-packages (from mock-&gt;cookiecutter)Requirement already satisfied (use --upgrade to upgrade): six&gt;=1.7 in /usr/local/lib/python2.7/site-packages (from mock-&gt;cookiecutter)Requirement already satisfied (use --upgrade to upgrade): chardet&gt;=2.0.0 in /usr/local/lib/python2.7/site-packages (from binaryornot&gt;=0.2.0-&gt;cookiecutter)Requirement already satisfied (use --upgrade to upgrade): markupsafe in /usr/local/lib/python2.7/site-packages (from jinja2&gt;=2.7-&gt;cookiecutter)Requirement already satisfied (use --upgrade to upgrade): pip in /usr/local/lib/python2.7/site-packages (from pbr&gt;=0.11-&gt;mock-&gt;cookiecutter)Installing collected packages: PyYAML, funcsigs, mock, click, binaryornot, cookiecutter  Running setup.py install for PyYAMLSuccessfully installed PyYAML-3.11 binaryornot-0.4.0 click-3.3 cookiecutter-1.0.0 funcsigs-0.4 mock-1.3.0➜  ~  cookiecutter https://github.com/pydanny/cookiecutter-django.gitCloning into &apos;cookiecutter-django&apos;...remote: Counting objects: 3385, done.remote: Compressing objects: 100% (138/138), done.remote: Total 3385 (delta 81), reused 0 (delta 0), pack-reused 3244Receiving objects: 100% (3385/3385), 643.77 KiB | 247.00 KiB/s, done.Resolving deltas: 100% (2042/2042), done.Checking connectivity... done.project_name (default is &quot;project_name&quot;)? balalarepo_name (default is &quot;balala&quot;)? snirauthor_name (default is &quot;Your Name&quot;)? chenchengemail (default is &quot;Your email&quot;)? chan4aaron@163.comdescription (default is &quot;A short description of the project.&quot;)? just for fundomain_name (default is &quot;example.com&quot;)? morningchen.comversion (default is &quot;0.1.0&quot;)?timezone (default is &quot;UTC&quot;)? Asia/Shanghainow (default is &quot;2015/01/13&quot;)? 2015/09/06year (default is &quot;2015&quot;)?use_whitenoise (default is &quot;y&quot;)? nuse_celery (default is &quot;n&quot;)? yuse_maildump (default is &quot;n&quot;)? yuse_sentry (default is &quot;n&quot;)? ywindows (default is &quot;n&quot;)?➜  ~  cd snir</code></pre><p>现在一个完整的项目模板就生成了。</p><h2 id="4-Django-APP设计基础"><a href="#4-Django-APP设计基础" class="headerlink" title="4. Django APP设计基础"></a>4. Django APP设计基础</h2><p>对一个新手开发者来说，常常会对django的’app’这个单词产生疑惑，<br>在我们深入app设计之前，明确一些定义非常重要。</p><ul><li>A Django project: 由django框架驱动的一个网页应用程序</li><li>Django apps: 代表项目一个方面的小型库</li><li>INSTALLED_APPS: setting中的app list</li><li>Third-party Django packages: 已经被python打包工具打包好的简洁,可插拔,可复用的django apps</li></ul><h3 id="Django-App设计的黄金定律"><a href="#Django-App设计的黄金定律" class="headerlink" title="Django App设计的黄金定律"></a>Django App设计的黄金定律</h3><blockquote><p>Write program do one thing and do it well.</p></blockquote><p>其本质就是每个app只专注它自己的任务，如果一个app你不能用一句简单的话概括，<br>那可能意味着这个app太大了，你需要打散它。</p><h3 id="如何命名你的Django-app"><a href="#如何命名你的Django-app" class="headerlink" title="如何命名你的Django app"></a>如何命名你的Django app</h3><p>每个人都有自己的编码风格，有的人喜欢用炫酷的命名，我们更倾向于平淡，显而易见的命名。<br>比如说flavors, animals, blog, polls, dreams, estimates, finances。</p><p>一个棒棒的，显而易见的app命名让这个项目更易于维护.使用有效的、遵循PEP8规范的命名：简短、小写，不要有数字、破折号、句号、空格和其他特殊字符。<br>可以使用下划线让单词的易读性更强</p><h2 id="5-配置文件和依赖文件"><a href="#5-配置文件和依赖文件" class="headerlink" title="5. 配置文件和依赖文件"></a>5. 配置文件和依赖文件</h2><p>我们应该遵循以下最佳实现：</p><ul><li>所有的配置文件都要有版本控制</li><li>Don’t repeat yourself (DRY原则)</li><li>保证secret key 安全(一定一定一定要把他隔离在版本控制器的外面!!!!!!)</li></ul><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>为了隔离开发环境和生产环境的配置文件，用settings/文件夹取代settings.py</p><pre><code>settings/    __init__.py    base.py    local.py    staging.py    test.py    production.py</code></pre><ul><li>base.py 共用的配置文件</li><li>local.py 本地开发环境的配置文件，不同于production.py的是里面有DEBUG模块，像django-debug-toolbar这样的日志级别的开发者工具</li><li>staging.py 在网站生产服务器上跑的半私人化的版本</li><li>test.py 跑测试用的</li><li>production.py 生产环境下的配置文件</li></ul><p>运行本地脚本和服务器</p><pre><code>python manage.py shell --settings=twoscoops.settings.localpython manage.py runserver --settings=twoscoops.settings.local</code></pre><p>有时候一个大项目，不同的开发者有不同的配置，但是他们共用一个dev.py文件。<br>所以我们可以给不同的开发者设置不同的配置文件。</p><pre><code>settings/    __init__.py    base.py    local.py    staging.py    test.py    production.py    dev_cc.py    dev_audreyr.py</code></pre><p>dev_cc.py 和 dev_audreyr 分别是cc和audreyr这两位开发者的配置文件，<br>这样就解决了这个问题，并且项目组成员还可以互相检查看看谁缺少了什么至关重要的组件</p><p>从代码中隔离出下面的配置，比如说：</p><ul><li>数据库，Memcached，以及其他 后端服务 的配置</li><li>第三方服务的证书，如 Amazon S3、Twitter 等</li><li>每份部署特有的配置，如域名等</li></ul><p>配置文件遵循以下原则</p><ul><li><a href="http://12factor.net/zh_cn/config" target="_blank" rel="noopener">12factor-config</a></li></ul><h3 id="依赖文件"><a href="#依赖文件" class="headerlink" title="依赖文件"></a>依赖文件</h3><p>依赖文件requirements.txt可以用文件requirements/代替，<br>以区分本地和生产环境，结构如下</p><pre><code>requirements/    base.txt    local.txt    staging.txt    production.txt</code></pre><p>下面是local.txt的内容</p><pre><code>-r base.txtdjango-debug-toolbar==1.3.0</code></pre><p>安装本地环境依赖：</p><pre><code>$ pip install -r requirements/local.txt</code></pre><h3 id="setting里的文件路径"><a href="#setting里的文件路径" class="headerlink" title="setting里的文件路径"></a>setting里的文件路径</h3><p>MEDIA_ROOT, STATIC_ROOT, TEMPLATES等等不要硬编码</p><p>用django的第三方app <a href="https://github.com/joke2k/django-environ" target="_blank" rel="noopener">django-environ</a>可以很好的解决这个问题，<br>具体用法看官方说明</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近刚把Django的官方文档的重要部分看完，准备开始刷《Two Scoops of Django 1.8》这本书进行进阶，写的真的好好啊～&lt;/p&gt;
&lt;h2 id=&quot;核心思想&quot;&gt;&lt;a href=&quot;#核心思想&quot; class=&quot;headerlink&quot; title=&quot;核心思想&quot;&gt;&lt;/a&gt;核心思想&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Keep It Simple, Stupid&lt;/li&gt;
&lt;li&gt;Fat Models, Utility Modules, Thin Views, Stupid Templates&lt;/li&gt;
&lt;li&gt;Start With Django by Default&lt;/li&gt;
&lt;li&gt;Be Familiar with Django’s Design Philosophies&lt;/li&gt;
&lt;li&gt;The Twelve-Factor App&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-编码风格&quot;&gt;&lt;a href=&quot;#1-编码风格&quot; class=&quot;headerlink&quot; title=&quot;1. 编码风格&quot;&gt;&lt;/a&gt;1. 编码风格&lt;/h2&gt;&lt;h3 id=&quot;1-1-易读性&quot;&gt;&lt;a href=&quot;#1-1-易读性&quot; class=&quot;headerlink&quot; title=&quot;1.1 易读性&quot;&gt;&lt;/a&gt;1.1 易读性&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;避免简写的变量名&lt;/li&gt;
&lt;li&gt;写出你的函数变量名&lt;/li&gt;
&lt;li&gt;记录你的classes 和 methods&lt;/li&gt;
&lt;li&gt;给代码注释&lt;/li&gt;
&lt;li&gt;将重复的代码重构到函数或者方法里&lt;/li&gt;
&lt;li&gt;保持函数和方法的简短，一个好的检验方法是，不用滚动就可以看到整个函数或方法&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Backend" scheme="https://morningchen.com/categories/Backend/"/>
    
      <category term="Django" scheme="https://morningchen.com/categories/Backend/Django/"/>
    
    
      <category term="Django" scheme="https://morningchen.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django - QuerySets学习笔记</title>
    <link href="https://morningchen.com/2015/08/06/Django-QuerySets-notes/"/>
    <id>https://morningchen.com/2015/08/06/Django-QuerySets-notes/</id>
    <published>2015-08-06T01:30:20.000Z</published>
    <updated>2018-09-27T03:50:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进行查询"><a href="#进行查询" class="headerlink" title="进行查询"></a>进行查询</h2><p>通过这个例子来说明如何进行查询的：</p><pre><code>from django.db import modelsclass Blog(models.Model):    name = models.CharField(max_length=100)    tagline = models.TextField()    def __str__(self):              # __unicode__ on Python 2        return self.nameclass Author(models.Model):    name = models.CharField(max_length=50)    email = models.EmailField()    def __str__(self):              # __unicode__ on Python 2        return self.nameclass Entry(models.Model):    blog = models.ForeignKey(Blog)    headline = models.CharField(max_length=255)    body_text = models.TextField()    pub_date = models.DateField()    mod_date = models.DateField()    authors = models.ManyToManyField(Author)    n_comments = models.IntegerField()    n_pingbacks = models.IntegerField()    rating = models.IntegerField()    def __str__(self):              # __unicode__ on Python 2        return self.headline</code></pre><a id="more"></a><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>为了把数据库表中的数据表示成python对象，Django使用了一个直观的系统：一个model class代表一个数据库表<br>而用这个类的实例表示数据库表中一条特定的记录</p><p>要创建一个对象，实例化模型类的关键字参数，然后调用save（）将其保存到数据库中。</p><p>假定model文件在 mysite/blog/models.py中</p><pre><code>&gt;&gt;&gt; from blog.models import Blog&gt;&gt;&gt; b = Blog(name=&apos;Beatles Blog&apos;, tagline=&apos;All the latest Beatles news.&apos;)&gt;&gt;&gt; b.save()</code></pre><p>他背后执行的就是sql的insert语句，在你明确的调用save()之前，<br>Django不会访问数据库，需要特别说明的是save()方法没有返回值</p><h3 id="保存对象的改动"><a href="#保存对象的改动" class="headerlink" title="保存对象的改动"></a>保存对象的改动</h3><p>用save()方法来保存已存在于数据库中的对象的改动<br>假设一个Blog的实例b5已经被保存在数据库中，这个例子更改了它的名字，并且在数据库中更新它的记录</p><pre><code>&gt;&gt;&gt; b5.name = &apos;New name&apos;&gt;&gt;&gt; b5.save()</code></pre><p>他背后执行的就是sql语句的update语法</p><h3 id="保存ForeignKey和ManyToManyField字段"><a href="#保存ForeignKey和ManyToManyField字段" class="headerlink" title="保存ForeignKey和ManyToManyField字段"></a>保存ForeignKey和ManyToManyField字段</h3><pre><code>&gt;&gt;&gt; from blog.models import Entry&gt;&gt;&gt; entry = Entry.objects.get(pk=1)&gt;&gt;&gt; cheese_blog = Blog.objects.get(name=&quot;Cheddar Talk&quot;)&gt;&gt;&gt; entry.blog = cheese_blog&gt;&gt;&gt; entry.save()&gt;&gt;&gt; from blog.models import Author&gt;&gt;&gt; joe = Author.objects.create(name=&quot;Joe&quot;)&gt;&gt;&gt; entry.authors.add(joe)&gt;&gt;&gt; john = Author.objects.create(name=&quot;John&quot;)&gt;&gt;&gt; paul = Author.objects.create(name=&quot;Paul&quot;)&gt;&gt;&gt; george = Author.objects.create(name=&quot;George&quot;)&gt;&gt;&gt; ringo = Author.objects.create(name=&quot;Ringo&quot;)&gt;&gt;&gt; entry.authors.add(john, paul, george, ringo)</code></pre><h3 id="检索对象"><a href="#检索对象" class="headerlink" title="检索对象"></a>检索对象</h3><p>检索所有Entry对象</p><pre><code>all_entries = Entry.objects.all()</code></pre><p>检索发布日期是2006年的对象 注意用双下划线筛选年份</p><pre><code>Entry.objects.filter(pub_date__year=2006)</code></pre><p>检索发布日期不是2006年的对象 注意用双下划线筛选年份</p><pre><code>Entry.objects.exclude(pub_date__year=2006)</code></pre><p>检索标题以What 开头，发布日期在2005-1-30与今天之间的Entry</p><ul><li>__startwith 很好理解 以什么开头</li><li>__gte  就是great than and equal 大于等于的缩写</li><li>类似的还有__lte 就是less than and equal 小于等于的缩写</li></ul><pre><code>&gt;&gt;&gt; Entry.objects.filter(...     headline__startswith=&apos;What&apos;... ).exclude(...     pub_date__gte=datetime.date.today()... ).filter(...     pub_date__gte=datetime(2005, 1, 30)... )</code></pre><p>每次筛选的结果都是独立的</p><pre><code>&gt;&gt;&gt; q1 = Entry.objects.filter(headline__startswith=&quot;What&quot;)&gt;&gt;&gt; q2 = q1.exclude(pub_date__gte=datetime.date.today())&gt;&gt;&gt; q3 = q1.filter(pub_date__gte=datetime.date.today())</code></pre><ul><li>q1查询集是筛选headline以What 开头的所有Entry</li><li>q2查询集是q1的子集，满足q1的同时，筛选出除了发布日期大于今天的所有Entry，<br>也就是今天之前所有的Entry</li><li>q3查询集也是q1的子集，满足q1的同时，筛选今天之后的所有Entry</li></ul><p>他们彼此之间都是独立的互不影响</p><p>还有一点查询集的特性需要说明，就是它很‘懒’，看下面的例子</p><pre><code>&gt;&gt;&gt; q = Entry.objects.filter(headline__startswith=&quot;What&quot;)&gt;&gt;&gt; q = q.filter(pub_date__lte=datetime.date.today())&gt;&gt;&gt; q = q.exclude(body_text__icontains=&quot;food&quot;)&gt;&gt;&gt; print(q)</code></pre><p>看上去查询集访问了3次数据库，事实上直到你要用到他的时候他才开始访问数据库，并且只访问了一次</p><p>用get()检索一条数据<br>想要只查询一条数据的话，get()与filter()的区别是，filter()需要切片，像这样filter()[0]</p><pre><code>&gt;&gt;&gt; one_entry = Entry.objects.get(pk=1)</code></pre><p>你必须确保他只会查到一条数据，如果没查到，他会抛出DoesNotExist异常，<br>如果查到了多条数据，他会抛出MultipleObjectsReturned异常，</p><p>field__lookuptype=value</p><pre><code>&gt;&gt;&gt; Entry.objects.filter(pub_date__lte=&apos;2006-01-01&apos;)</code></pre><p>翻译成SQL语句就是：</p><p>SELECT * FROM blog_entry WHERE pub_date &lt;= ‘2006-01-01’;</p><p>常用的lookuptype:</p><pre><code>exact 精确查询 大小写敏感iexact 大小写不敏感contains 相当于LIKE &apos;%foo%&apos; 大小写敏感icontains  大小写不敏感startswithendswithistartswithiendswith</code></pre><p>多个参数和多个筛选之间的区别：</p><pre><code>Blog.objects.filter(entry__headline__contains=&apos;Lennon&apos;,        entry__pub_date__year=2008)Blog.objects.filter(entry__headline__contains=&apos;Lennon&apos;).filter(        entry__pub_date__year=2008)</code></pre><p>假设有个blog,一个Entry包含Lennon，另一个Entry的pub_date在2008年，<br>但是没有同时满足名字叫’Lennon’并且发布在2008年的Entry</p><p>那么第一个筛选不会返回任何blog，第二个可以筛选到这个blog</p><p>count()<br>aggregate(Avg())<br>aggregate(Max())<br>Sum(F(‘price’)/F(‘pages’), output_field=FloatField()))</p><p>annotate()</p><p>annotate() 应该在filter()前面  如果在后面则会忽略annotate()</p><h3 id="Evaluate-QuerySet"><a href="#Evaluate-QuerySet" class="headerlink" title="Evaluate QuerySet"></a>Evaluate QuerySet</h3><ul><li>Iteration</li><li>Slicing</li><li>Pickling/Caching</li><li>repr()</li><li>len()</li><li>count()</li><li>list()</li><li>bool()</li></ul><h3 id="QuerySet-API"><a href="#QuerySet-API" class="headerlink" title="QuerySet API"></a>QuerySet API</h3><h4 id="Methods-that-return-new-QuerySets"><a href="#Methods-that-return-new-QuerySets" class="headerlink" title="Methods that return new QuerySets"></a>Methods that return new QuerySets</h4><ul><li>filter</li><li>exclude</li><li>annotate</li><li>order_by   + -前缀 ?随机排序 如果有2个order_by会忽略前面的</li><li>reverse</li><li>distinct  去重</li><li>values</li><li>values_list(*fields, flat=False)</li><li>dates(field, kind, order=’ASC’)  kind= “year”, “month” or “day”</li><li>datetimes(field_name, kind, order=’ASC’, tzinfo=None)  “year”, “month”, “day”, “hour”, “minute” or “second”</li><li>none()</li><li>all()</li><li>select_related  ForeignKey/OneToOneField 时使用和filter一起使用时顺序无要求  select_related(None)清除关系</li><li>prefetch_related(*lookups)</li><li>extra(select=None, where=None, params=None, tables=None, order_by=None, select_params=None)</li><li>defer</li><li>only</li><li>using(alias)</li><li>select_for_update(nowait=False)</li><li>raw</li></ul><h4 id="Methods-that-do-not-return-QuerySets"><a href="#Methods-that-do-not-return-QuerySets" class="headerlink" title="Methods that do not return QuerySets"></a>Methods that do not return QuerySets</h4><ul><li>get(**kwargs)</li><li>create(**kwargs)</li><li>get_or_create(defaults=None, **kwargs)</li><li>update_or_create(defaults=None, **kwargs)</li><li>bulk_create(objs, batch_size=None)    批量创建</li><li>count()</li><li>in_bulk(id_list)    取一个列表pk的值  返回一个dict 每个pk值对应一个对象实例</li><li>iterator()</li><li>latest(field_name=None)</li><li>earliest(field_name=None)</li><li>first()</li><li>last()</li><li>aggregate(*args, **kwargs)</li><li>exists()</li><li>update(**kwargs)</li><li>exists()       用它来判断存在与否 比循环要快</li><li>update(**kwargs)</li><li>delete()</li></ul><h4 id="Field-lookups"><a href="#Field-lookups" class="headerlink" title="Field lookups"></a>Field lookups</h4><ul><li>exact</li><li>iexact</li><li>contains</li><li>icontains</li><li>in</li><li>gt</li><li>gte</li><li>lt</li><li>lte</li><li>startswith</li><li>istartswith</li><li>endswith</li><li>iendswith</li><li>range</li><li>year</li><li>month</li><li>day</li><li>week_day</li><li>hour</li><li>minute</li><li>second</li><li>isnull</li><li>search(SQL)</li><li>regex</li><li>iregex</li></ul><h4 id="Aggregation-functions"><a href="#Aggregation-functions" class="headerlink" title="Aggregation functions"></a>Aggregation functions</h4><ul><li>Avg(expression, output_field=None, **extra)</li><li>Count(expression, distinct=False, **extra)</li><li>Max(expression, output_field=None, **extra)</li><li>Min(expression, output_field=None, **extra)</li><li>StdDev(expression, sample=False, **extra)  标准差</li><li>Sum(expression, output_field=None, **extra)</li><li>Variance(expression, sample=False, **extra)  方差</li></ul><h4 id="Query-related-classes"><a href="#Query-related-classes" class="headerlink" title="Query-related classes"></a>Query-related classes</h4><p>Q()<br>Prefetch(lookup, queryset=None, to_attr=None)</p><p>lookup表达式包含了3个部分</p><ul><li>Fields part</li><li>Transforms part</li><li>A lookup</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;进行查询&quot;&gt;&lt;a href=&quot;#进行查询&quot; class=&quot;headerlink&quot; title=&quot;进行查询&quot;&gt;&lt;/a&gt;进行查询&lt;/h2&gt;&lt;p&gt;通过这个例子来说明如何进行查询的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from django.db import models

class Blog(models.Model):
    name = models.CharField(max_length=100)
    tagline = models.TextField()

    def __str__(self):              # __unicode__ on Python 2
        return self.name

class Author(models.Model):
    name = models.CharField(max_length=50)
    email = models.EmailField()

    def __str__(self):              # __unicode__ on Python 2
        return self.name

class Entry(models.Model):
    blog = models.ForeignKey(Blog)
    headline = models.CharField(max_length=255)
    body_text = models.TextField()
    pub_date = models.DateField()
    mod_date = models.DateField()
    authors = models.ManyToManyField(Author)
    n_comments = models.IntegerField()
    n_pingbacks = models.IntegerField()
    rating = models.IntegerField()

    def __str__(self):              # __unicode__ on Python 2
        return self.headline
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Backend" scheme="https://morningchen.com/categories/Backend/"/>
    
      <category term="Django" scheme="https://morningchen.com/categories/Backend/Django/"/>
    
    
      <category term="Django" scheme="https://morningchen.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Django - Models学习笔记</title>
    <link href="https://morningchen.com/2015/07/23/Django-Models-notes/"/>
    <id>https://morningchen.com/2015/07/23/Django-Models-notes/</id>
    <published>2015-07-23T03:37:19.000Z</published>
    <updated>2018-09-27T03:50:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li><p>admin.StackedInline</p><p>  堆栈类型的内部关联</p></li><li><p>admin.TabularInline</p><p>  表格类型的内部关联</p></li></ul><p>list_display = ()<br>list_filter = []<br>search_fields = []<br>date_hierarchy = ‘’</p><p>was_published_recently.admin_order_field = ‘pub_date’<br>was_published_recently.boolean = True<br>变成图标<br>was_published_recently.short_description = ‘Published recently?’</p><p>urlpatterns 正则记得以/结尾</p><a id="more"></a><h3 id="shortcuts"><a href="#shortcuts" class="headerlink" title="shortcuts"></a>shortcuts</h3><p>get_object_or_404       get()<br>get_list_or_404         filter()</p><p>render</p><p>‘polls:detail’ question.id</p><p>命名空间:后面不要加空格</p><p>forloop.counter指示for标签已经循环多少次。</p><p>简而言之，所有针对内部URL的POST表单都应该使用csrf_token模板标签。<br>你应该永远在成功处理POST数据后返回一个HttpResponseRedirect</p><p>views<br>template_name<br>pk = primary key<br>lte = less than or equal to</p><h2 id="Models"><a href="#Models" class="headerlink" title="Models"></a>Models</h2><h3 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h3><ul><li>每一个model都是django.db.models.Model.的子类</li><li>类的属性相当于db的字段</li><li>db表的名字自动加上的 格式appname_classname</li><li>id字段是自动定义的 想要定制自己的pk 只需加上(primary_key=True)</li></ul><h3 id="using-models-使用模型"><a href="#using-models-使用模型" class="headerlink" title="using models 使用模型"></a>using models 使用模型</h3><ul><li>修改后在配置文件setting.py中INSTALLED_APPS添加新的app名</li><li>每次添加新的model时候记得migrate</li><li>第一次建立迁移文件时使用makemigrations</li></ul><h3 id="field-字段"><a href="#field-字段" class="headerlink" title="field 字段"></a>field 字段</h3><p>字段就是类的属性</p><p>要注意选择字段名称的时候不要和models API 冲突，比如clean, save, 或者delete.</p><h4 id="字段类型"><a href="#字段类型" class="headerlink" title="字段类型"></a>字段类型</h4><p>普通字段</p><ul><li>AutoField</li><li>BigIntegerField</li><li>BinaryField</li><li>BooleanField</li><li>CharField</li><li>CommaSeparatedIntegerField</li><li>DateField</li><li>DateTimeField</li><li>DecimalField</li><li>DurationField(New in Django1.8)</li><li>EmailField</li><li>FileField</li><li>FilePathField</li><li>FloatField</li><li>ImageField</li><li>IntegerField</li><li>IPAddressField</li><li>GenericIPAddressField</li><li>NullBooleanField</li><li>PositiveIntegerField(0 ~ 2147483647&lt;2^32-1&gt;)</li><li>PositiveSmallIntegerField(0 ~ 32767&lt;2^8-1&gt;)</li><li>SlugField</li><li>SmallIntegerField</li><li>TextField</li><li>TimeField</li><li>URLField</li><li>UUIDField(New in Django1.8)</li></ul><p>关系型字段</p><ul><li>ForeignKey</li><li>ManyToManyField</li><li>OneToOneField</li></ul><h4 id="字段选项"><a href="#字段选项" class="headerlink" title="字段选项"></a>字段选项</h4><p>每个字段都有特殊的属性<br>大多数都有max_length<br>下面是一些常用的属性,默认都是false</p><ul><li>null 把空值’’储存为null</li><li>blank 允许储存空值’’,与null不同，null是数据库关联，blank是校验关联</li><li>choice 先定义一个可迭代的二元组T 然后choice=T 会显示选项框</li><li>default 设置默认值</li><li>help_text 备注</li><li>primary_key 主键 不设置是默认添加id的</li><li>unique 唯一</li></ul><h4 id="自增主键字段"><a href="#自增主键字段" class="headerlink" title="自增主键字段"></a>自增主键字段</h4><p>默认情况下会加id = models.AutoField(primary_key=True)</p><p>如果你想指定一个自定义主键字段，只要在某个字段上指定 primary_key=True 即可。 你自定义了 Field.primary_key，就不会自动添加 id 列。</p><h4 id="字段详述名"><a href="#字段详述名" class="headerlink" title="字段详述名"></a>字段详述名</h4><p>first_name = models.CharField(“person’s first name”, max_length=30)</p><p>详述名是Person’s First Name<br>不加详述名就是first_name</p><p>关系型字段要在后面加verbose_name=”abc”, 不用刻意设置大小写, Django会自动大写首字母</p><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><p>ForeignKey 一对多</p><pre><code>from django.db import modelsclass Manufacturer(models.Model):    # ...    passclass Car(models.Model):    manufacturer = models.ForeignKey(Manufacturer)    # ...</code></pre><p>一个生产商Manufacturer 可以生产多个Car，但是每一辆Car 却只能有一个Manufacturer<br>类似这样的例子就用ForeignKey<br>还有一种递归的关系关联，自己关联自己<br> models.ForeignKey(‘self’)</p><p>ManyToManyField 多对多</p><p>需要定义中介model</p><p>OneToOneField 一对一</p><h3 id="字段命名限制"><a href="#字段命名限制" class="headerlink" title="字段命名限制"></a>字段命名限制</h3><ol start="0"><li>不能使用python的保留字</li><li>不能使用超过1个下划线，因为这样会影响Django 的查询<br>可以使用sql的保留字 例如select where join</li></ol><h3 id="可以自定义模型字段"><a href="#可以自定义模型字段" class="headerlink" title="可以自定义模型字段"></a>可以自定义模型字段</h3><h3 id="元选择"><a href="#元选择" class="headerlink" title="元选择"></a>元选择</h3><p>metadata 是除了默认字段外的所有选择，例如排序选择</p><p>以下是所有可用的元选择</p><ul><li>abstract = True 将不会在数据库中创建表 只有当其他class继承这个abstract base class的时候才会创建</li><li>app_label = ‘myapp’ 如果一个模型存在在规定位置之外，那么这个模型必须定义属于哪个app</li><li>db_table = ‘tablename’ 重命名数据表的名称 默认名称是appname_classname</li><li>db_tablespace 只支持PostgreSQL Oracle， 不支持SQLite MySQL</li><li>default_related_name</li><li>get_latest_by  定义了它就不能用get(), earliest() and latest()来筛选</li><li>managed</li><li>order_with_respect_to</li><li>ordering</li><li>permissions  permissions = ((“can_deliver_pizzas”, “Can deliver pizzas”),)</li><li>default_permissions 设置为空表示不需要默认的(‘add’, ‘change’, ‘delete’)任何权限</li><li>proxy = True 多表继承的时候使用  如果你要给父模型定义一个新的方法 又不想修改父模型的话</li><li>select_on_save  Django1.6 之前</li><li>unique_together</li><li>index_together</li><li>verbose_name  人类可读的对象命名 如果不写CamelCase -&gt; camel case</li><li>verbose_name_plural  复数命名 如果不写就是verbose_name + ‘s’</li></ul><h3 id="model属性"><a href="#model属性" class="headerlink" title="model属性"></a>model属性</h3><p>最重要的属性是models.Manager() 给管理员命名</p><p>Manager只能通过模型类使用，不能通过实例化</p><h3 id="model方法"><a href="#model方法" class="headerlink" title="model方法"></a>model方法</h3><ul><li><p>自定义的方法是给你的对象增加一个行级别的功能，然而Manager方法是表范围的。<br>model是一个很有价值的技术，它将业务逻辑聚集在一个地方</p></li><li><p><strong>str</strong>()</p></li><li><p>get_absolute_url()</p></li><li><p>重写预定义的模型方法</p><p>  执行自定义的 SQL<br>  如果django自带的model query APIs 不够用的话 可以自定义raw query</p></li></ul><h3 id="model继承"><a href="#model继承" class="headerlink" title="model继承"></a>model继承</h3><p>Django中有三种继承方式：</p><ol start="0"><li><p>通常情况下，你只需要使用父类来保存你不希望在每子模型显示的信息，<br>想让这个类不被单独的使用的话，请用Abstract base classes（抽象基准类 abstract = True）。</p></li><li><p>如果你想继承现有模型（也许是完全从另一个app继承），<br>并希望每个模型都有自己的数据库表，请用Multi-table inheritance（多表继承）</p></li><li><p>最后，如果你只是想修改模型的Python级行为，不以任何方式改变模型字段，您可以使用代理模式。<br>(proxy = True）。</p></li></ol><h4 id="Abstract-base-classes-抽象基类"><a href="#Abstract-base-classes-抽象基类" class="headerlink" title="Abstract base classes 抽象基类"></a>Abstract base classes 抽象基类</h4><h5 id="meta继承"><a href="#meta继承" class="headerlink" title="meta继承"></a>meta继承</h5><p>继承自抽象基类的子类，需要定义meta继承，然后重命名表(db_table)</p><h5 id="注意related-name"><a href="#注意related-name" class="headerlink" title="注意related_name"></a>注意related_name</h5><p>举例说明app common/models.py:</p><pre><code>from django.db import modelsclass Base(models.Model):    m2m = models.ManyToManyField(OtherModel, related_name=&quot;%(app_label)s_%(class)s_related&quot;)    class Meta:        abstract = Trueclass ChildA(Base):    passclass ChildB(Base):    pass</code></pre><p>另外一个app rare/models.py:</p><pre><code>from common.models import Baseclass ChildB(Base):    pass</code></pre><table><thead><tr><th>是否定义related_name的情况下各种字段字段名</th><th>不定义related_name</th><th>定义related_name</th></tr></thead><tbody><tr><td>common.ChildA.m2m</td><td>childa_set</td><td>common_childa_related</td></tr><tr><td>common.ChildA.m2m</td><td>childb_set</td><td>common_childb_related</td></tr><tr><td>rare.ChildB.m2m</td><td>childb_set</td><td>rare_childb_related</td></tr></tbody></table><h4 id="Multi-table-inheritance-多表继承"><a href="#Multi-table-inheritance-多表继承" class="headerlink" title="Multi-table inheritance 多表继承"></a>Multi-table inheritance 多表继承</h4><p>事实上就是OneToOneField</p><pre><code>from django.db import modelsclass Place(models.Model):    name = models.CharField(max_length=50)    address = models.CharField(max_length=80)class Restaurant(Place):    serves_hot_dogs = models.BooleanField(default=False)    serves_pizza = models.BooleanField(default=False)</code></pre><p>Restaurant继承自Place，Place下所有的字段都存在于Restaurant中</p><h5 id="Meta-and-multi-table-inheritance"><a href="#Meta-and-multi-table-inheritance" class="headerlink" title="Meta and multi-table inheritance"></a>Meta and multi-table inheritance</h5><p>在multi-table inheritance情况下，子类继承父类的meta类是没有意义的，<br>所有的meta选择都在父类中应用了，再次应用它们通常只会导致矛盾的行为</p><p>在少数限制条件下的子类继承父类的行为：<br>如果子类没有指定一个ordering属性或者get_latest_by属性，那么他将继承父类的这个属性<br>如果父类有个ordering属性，而你希望子类用自然的方式排序，可以明确的禁用它</p><pre><code>class ChildModel(ParentModel):    # ...    class Meta:        # Remove parent&apos;s ordering effect        ordering = []</code></pre><h5 id="Inheritance-and-reverse-relations"><a href="#Inheritance-and-reverse-relations" class="headerlink" title="Inheritance and reverse relations"></a>Inheritance and reverse relations</h5><p>如果要在父类的子类中使用这个方法，你必须在每一个字段中都指定related_name属性</p><pre><code>class Supplier(Place):    customers = models.ManyToManyField(Place, related_name=&apos;provider&apos;)</code></pre><h5 id="Specifying-the-parent-link-field"><a href="#Specifying-the-parent-link-field" class="headerlink" title="Specifying the parent link field"></a>Specifying the parent link field</h5><p>多表继承中，Django会自动给non-abstract父类模型的子类加上OneToOneField<br>如果你想创建属于自己的OneToOneField<br>那么就设置 parent_link=True 来表明你的字段是连接到父类的</p><h4 id="Proxy-models-代理模型"><a href="#Proxy-models-代理模型" class="headerlink" title="Proxy models 代理模型"></a>Proxy models 代理模型</h4><p>给原始模型创建一个代理，你就可以增加、删除、修改代理模型的实例，所有的数据都会被储存</p><p>不同的是你可以在代理模型中改变默认模型的排序方式或者管理员，而不必修改原始模型</p><p>代理模型必须继承自单一的非抽象模型类，不能继承多个非抽象模型</p><p>也能继承任意个抽象模型类，假如他们没有定义任何模型字段</p><h5 id="Proxy-model-managers"><a href="#Proxy-model-managers" class="headerlink" title="Proxy model managers"></a>Proxy model managers</h5><p>如果你没有在代理模型中指定任何管理员，他会从父类继承管理员。<br>如果你在代理模型中定义了管理员，他会成为默认的，尽管父类中定义的管理员也是有效的</p><h3 id="Multiple-inheritance"><a href="#Multiple-inheritance" class="headerlink" title="Multiple inheritance"></a>Multiple inheritance</h3><p>继承自父类的子类，字段名不能与父类的字段名一样</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;注意事项&quot;&gt;&lt;a href=&quot;#注意事项&quot; class=&quot;headerlink&quot; title=&quot;注意事项&quot;&gt;&lt;/a&gt;注意事项&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;admin.StackedInline&lt;/p&gt;
&lt;p&gt;  堆栈类型的内部关联&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;admin.TabularInline&lt;/p&gt;
&lt;p&gt;  表格类型的内部关联&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;list_display = ()&lt;br&gt;list_filter = []&lt;br&gt;search_fields = []&lt;br&gt;date_hierarchy = ‘’&lt;/p&gt;
&lt;p&gt;was_published_recently.admin_order_field = ‘pub_date’&lt;br&gt;was_published_recently.boolean = True&lt;br&gt;变成图标&lt;br&gt;was_published_recently.short_description = ‘Published recently?’&lt;/p&gt;
&lt;p&gt;urlpatterns 正则记得以/结尾&lt;/p&gt;
    
    </summary>
    
      <category term="Backend" scheme="https://morningchen.com/categories/Backend/"/>
    
      <category term="Django" scheme="https://morningchen.com/categories/Backend/Django/"/>
    
    
      <category term="Django" scheme="https://morningchen.com/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>Redis学习笔记</title>
    <link href="https://morningchen.com/2015/07/17/Redis-notes/"/>
    <id>https://morningchen.com/2015/07/17/Redis-notes/</id>
    <published>2015-07-17T09:42:45.000Z</published>
    <updated>2018-09-27T14:08:29.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h2><p><img src="redis.jpg" alt="redis"></p><p>其中分为三步：</p><ul><li><p>brew install redis</p><p>安装后根据提示进行以下两步</p></li><li><p>ln -sfv /usr/local/opt/redis/*.plist ~/Library/LaunchAgents</p><p>创建个连接 类似window的创建快捷方式</p></li><li><p>redis-server /usr/local/etc/redis.conf</p><p>启动redis服务器，然后就看到了这么炫酷的界面:)</p></li></ul><p>进命令行 redis-cli</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装Redis&quot;&gt;&lt;a href=&quot;#安装Redis&quot; class=&quot;headerlink&quot; title=&quot;安装Redis&quot;&gt;&lt;/a&gt;安装Redis&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;redis.jpg&quot; alt=&quot;redis&quot;&gt;&lt;/p&gt;
&lt;p&gt;其中分为三步：&lt;/
      
    
    </summary>
    
      <category term="DevOps" scheme="https://morningchen.com/categories/DevOps/"/>
    
    
      <category term="Redis" scheme="https://morningchen.com/tags/Redis/"/>
    
  </entry>
  
</feed>
